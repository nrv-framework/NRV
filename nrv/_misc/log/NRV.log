
2025-10-10 14:41:48,975 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:41:51,082 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:41:51,735 - NRV DEBUG: ...Done!
2025-10-10 14:41:51,744 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:41:51,745 - NRV DEBUG: ... start meshing
2025-10-10 14:41:58,086 - NRV DEBUG: ... meshing done
2025-10-10 14:41:58,118 - NRV DEBUG: Mesh properties:
2025-10-10 14:41:58,118 - NRV DEBUG: Number of processes : 3
2025-10-10 14:41:58,118 - NRV DEBUG: Number of entities : 525
2025-10-10 14:41:58,118 - NRV DEBUG: Number of nodes : 120528
2025-10-10 14:41:58,118 - NRV DEBUG: Number of elements : 759410
2025-10-10 14:42:02,586 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:42:02,588 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:42:02,589 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:42:05,515 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-4
2025-10-10 14:42:05,517 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-4
2025-10-10 14:42:05,550 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-3
2025-10-10 14:42:05,552 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-3
2025-10-10 14:42:05,600 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-5
2025-10-10 14:42:05,602 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-5
2025-10-10 14:42:05,612 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:42:05,612 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:42:05,633 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:42:05,633 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:42:05,694 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:42:05,694 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:42:28,025 - NRV INFO: FEN4NRV: solved in 25.357078552246094 s
 from process SpawnPoolWorker-3
2025-10-10 14:42:28,035 - NRV INFO: FEN4NRV: solved in 25.35377287864685 s
 from process SpawnPoolWorker-4
2025-10-10 14:42:28,124 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:42:28,124 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:42:28,125 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:42:28,125 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:42:28,233 - NRV INFO: FEN4NRV: solved in 25.55245542526245 s
 from process SpawnPoolWorker-5
2025-10-10 14:42:28,319 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:42:28,319 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:42:48,219 - NRV INFO: FEN4NRV: solved in 45.451639890670776 s
 from process SpawnPoolWorker-3
2025-10-10 14:42:48,255 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:42:48,256 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:42:48,270 - NRV INFO: FEN4NRV: solved in 45.499468088150024 s
 from process SpawnPoolWorker-4
2025-10-10 14:42:48,312 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:42:48,312 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:42:48,485 - NRV INFO: FEN4NRV: solved in 45.71922850608826 s
 from process SpawnPoolWorker-5
2025-10-10 14:42:48,521 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:42:48,522 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:43:08,219 - NRV INFO: FEN4NRV: solved in 65.41572785377502 s
 from process SpawnPoolWorker-3
2025-10-10 14:43:08,357 - NRV INFO: FEN4NRV: solved in 65.54446482658386 s
 from process SpawnPoolWorker-4
2025-10-10 14:43:08,561 - NRV INFO: FEN4NRV: solved in 65.75865530967712 s
 from process SpawnPoolWorker-5
2025-10-10 14:43:08,963 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:43:11,483 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:43:12,094 - NRV DEBUG: ...Done!
2025-10-10 14:43:12,154 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:43:12,154 - NRV DEBUG: ... start meshing
2025-10-10 14:43:18,279 - NRV DEBUG: ... meshing done
2025-10-10 14:43:18,310 - NRV DEBUG: Mesh properties:
2025-10-10 14:43:18,310 - NRV DEBUG: Number of processes : 3
2025-10-10 14:43:18,310 - NRV DEBUG: Number of entities : 525
2025-10-10 14:43:18,310 - NRV DEBUG: Number of nodes : 121120
2025-10-10 14:43:18,310 - NRV DEBUG: Number of elements : 763468
2025-10-10 14:43:22,714 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:43:22,723 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:43:22,735 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:43:25,560 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-9
2025-10-10 14:43:25,562 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-9
2025-10-10 14:43:25,657 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:43:25,657 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:43:25,714 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-10
2025-10-10 14:43:25,716 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-10
2025-10-10 14:43:25,728 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-8
2025-10-10 14:43:25,730 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-8
2025-10-10 14:43:25,802 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:43:25,802 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:43:25,816 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:43:25,816 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:43:47,220 - NRV INFO: FEN4NRV: solved in 24.402751922607422 s
 from process SpawnPoolWorker-9
2025-10-10 14:43:47,323 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:43:47,323 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:43:47,379 - NRV INFO: FEN4NRV: solved in 24.579976081848145 s
 from process SpawnPoolWorker-10
2025-10-10 14:43:47,419 - NRV INFO: FEN4NRV: solved in 24.59951663017273 s
 from process SpawnPoolWorker-8
2025-10-10 14:43:47,470 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:43:47,470 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:43:47,506 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:43:47,506 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:44:09,567 - NRV INFO: FEN4NRV: solved in 46.64672303199768 s
 from process SpawnPoolWorker-9
2025-10-10 14:44:09,634 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:44:09,634 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:44:09,778 - NRV INFO: FEN4NRV: solved in 46.88819432258606 s
 from process SpawnPoolWorker-10
2025-10-10 14:44:09,785 - NRV INFO: FEN4NRV: solved in 46.87905764579773 s
 from process SpawnPoolWorker-8
2025-10-10 14:44:09,827 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:44:09,827 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:44:09,832 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:44:09,832 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:44:31,433 - NRV INFO: FEN4NRV: solved in 68.4456262588501 s
 from process SpawnPoolWorker-9
2025-10-10 14:44:31,466 - NRV INFO: FEN4NRV: solved in 68.51256775856018 s
 from process SpawnPoolWorker-8
2025-10-10 14:44:31,547 - NRV INFO: FEN4NRV: solved in 68.60789752006531 s
 from process SpawnPoolWorker-10
2025-10-10 14:44:31,995 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:44:34,668 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:44:35,210 - NRV DEBUG: ...Done!
2025-10-10 14:44:35,281 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:44:35,282 - NRV DEBUG: ... start meshing
2025-10-10 14:44:41,310 - NRV DEBUG: ... meshing done
2025-10-10 14:44:41,342 - NRV DEBUG: Mesh properties:
2025-10-10 14:44:41,342 - NRV DEBUG: Number of processes : 3
2025-10-10 14:44:41,342 - NRV DEBUG: Number of entities : 495
2025-10-10 14:44:41,342 - NRV DEBUG: Number of nodes : 119669
2025-10-10 14:44:41,342 - NRV DEBUG: Number of elements : 753326
2025-10-10 14:44:45,594 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:44:45,598 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:44:45,599 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:44:48,505 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-14
2025-10-10 14:44:48,507 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-14
2025-10-10 14:44:48,555 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-15
2025-10-10 14:44:48,557 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-15
2025-10-10 14:44:48,593 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-13
2025-10-10 14:44:48,595 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-13
2025-10-10 14:44:48,607 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:44:48,607 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:44:48,650 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:44:48,650 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:44:48,748 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:44:48,748 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:45:11,151 - NRV INFO: FEN4NRV: solved in 25.399800062179565 s
 from process SpawnPoolWorker-13
2025-10-10 14:45:11,155 - NRV INFO: FEN4NRV: solved in 25.458196878433228 s
 from process SpawnPoolWorker-14
2025-10-10 14:45:11,167 - NRV INFO: FEN4NRV: solved in 25.479709148406982 s
 from process SpawnPoolWorker-15
2025-10-10 14:45:11,242 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:45:11,242 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:45:11,242 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:45:11,242 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:45:11,248 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:45:11,248 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:45:32,805 - NRV INFO: FEN4NRV: solved in 47.03664183616638 s
 from process SpawnPoolWorker-15
2025-10-10 14:45:32,851 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:45:32,851 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:45:32,863 - NRV INFO: FEN4NRV: solved in 47.078542947769165 s
 from process SpawnPoolWorker-14
2025-10-10 14:45:32,916 - NRV INFO: FEN4NRV: solved in 47.07330393791199 s
 from process SpawnPoolWorker-13
2025-10-10 14:45:32,929 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:45:32,929 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:45:32,966 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:45:32,966 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:45:53,365 - NRV INFO: FEN4NRV: solved in 67.55122542381287 s
 from process SpawnPoolWorker-15
2025-10-10 14:45:53,496 - NRV INFO: FEN4NRV: solved in 67.60350179672241 s
 from process SpawnPoolWorker-13
2025-10-10 14:45:53,504 - NRV INFO: FEN4NRV: solved in 67.65386581420898 s
 from process SpawnPoolWorker-14
2025-10-10 14:45:57,096 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:45:59,125 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:45:59,125 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:45:59,125 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:45:59,125 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:45:59,125 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:45:59,940 - NRV DEBUG: ...Done!
2025-10-10 14:45:59,947 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:45:59,948 - NRV DEBUG: ... start meshing
2025-10-10 14:46:07,885 - NRV DEBUG: ... meshing done
2025-10-10 14:46:07,944 - NRV DEBUG: Mesh properties:
2025-10-10 14:46:07,944 - NRV DEBUG: Number of processes : 3
2025-10-10 14:46:07,944 - NRV DEBUG: Number of entities : 405
2025-10-10 14:46:07,944 - NRV DEBUG: Number of nodes : 250869
2025-10-10 14:46:07,944 - NRV DEBUG: Number of elements : 1631439
2025-10-10 14:46:12,115 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:46:12,117 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:46:12,118 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:46:21,796 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-3
2025-10-10 14:46:22,000 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-4
2025-10-10 14:46:22,051 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-5
2025-10-10 14:46:22,474 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-3
2025-10-10 14:46:22,648 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-4
2025-10-10 14:46:22,718 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-5
2025-10-10 14:46:22,985 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:46:22,985 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:46:23,129 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:46:23,130 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:46:23,211 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:46:23,211 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:48:00,111 - NRV INFO: FEN4NRV: solved in 107.51577854156494 s
 from process SpawnPoolWorker-4
2025-10-10 14:48:00,254 - NRV INFO: FEN4NRV: solved in 107.64216804504395 s
 from process SpawnPoolWorker-5
2025-10-10 14:48:00,309 - NRV INFO: FEN4NRV: solved in 107.66994619369507 s
 from process SpawnPoolWorker-3
2025-10-10 14:48:01,338 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:48:01,339 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:48:01,397 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:48:01,397 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:48:01,397 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:48:01,397 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:49:14,105 - NRV INFO: FEN4NRV: solved in 180.2823805809021 s
 from process SpawnPoolWorker-4
2025-10-10 14:49:14,573 - NRV INFO: FEN4NRV: solved in 180.84602808952332 s
 from process SpawnPoolWorker-3
2025-10-10 14:49:15,043 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 14:49:15,043 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 14:49:15,348 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 14:49:15,348 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 14:49:15,356 - NRV INFO: FEN4NRV: solved in 181.60072803497314 s
 from process SpawnPoolWorker-5
2025-10-10 14:49:15,858 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 14:49:15,859 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 14:50:26,633 - NRV INFO: FEN4NRV: solved in 251.87278866767883 s
 from process SpawnPoolWorker-4
2025-10-10 14:50:26,653 - NRV INFO: FEN4NRV: solved in 252.15159606933594 s
 from process SpawnPoolWorker-3
2025-10-10 14:50:26,773 - NRV INFO: FEN4NRV: solved in 252.51514387130737 s
 from process SpawnPoolWorker-5
2025-10-10 14:50:27,582 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:50:30,139 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:50:30,139 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:50:30,139 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:50:30,140 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:50:30,140 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:50:30,974 - NRV DEBUG: ...Done!
2025-10-10 14:50:31,113 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:50:31,114 - NRV DEBUG: ... start meshing
2025-10-10 14:50:39,088 - NRV DEBUG: ... meshing done
2025-10-10 14:50:39,150 - NRV DEBUG: Mesh properties:
2025-10-10 14:50:39,150 - NRV DEBUG: Number of processes : 3
2025-10-10 14:50:39,150 - NRV DEBUG: Number of entities : 405
2025-10-10 14:50:39,150 - NRV DEBUG: Number of nodes : 250932
2025-10-10 14:50:39,150 - NRV DEBUG: Number of elements : 1631956
2025-10-10 14:50:43,327 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:50:43,337 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:50:43,348 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:50:52,735 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-8
2025-10-10 14:50:53,044 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-9
2025-10-10 14:50:53,109 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-10
2025-10-10 14:50:53,297 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-8
2025-10-10 14:50:53,645 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-9
2025-10-10 14:50:53,696 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-10
2025-10-10 14:50:53,815 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:50:53,815 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:50:54,107 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:50:54,107 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:50:54,155 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:50:54,156 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:52:07,374 - NRV INFO: FEN4NRV: solved in 83.50906944274902 s
 from process SpawnPoolWorker-8
2025-10-10 14:52:07,409 - NRV INFO: FEN4NRV: solved in 83.61284804344177 s
 from process SpawnPoolWorker-10
2025-10-10 14:52:08,445 - NRV INFO: FEN4NRV: solved in 84.65668797492981 s
 from process SpawnPoolWorker-9
2025-10-10 14:52:08,483 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:52:08,483 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:52:08,496 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:52:08,496 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:52:08,993 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:52:08,993 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:53:17,804 - NRV INFO: FEN4NRV: solved in 152.81659626960754 s
 from process SpawnPoolWorker-8
2025-10-10 14:53:17,829 - NRV INFO: FEN4NRV: solved in 152.95832204818726 s
 from process SpawnPoolWorker-10
2025-10-10 14:53:18,747 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 14:53:18,747 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 14:53:18,752 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 14:53:18,753 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 14:53:18,861 - NRV INFO: FEN4NRV: solved in 154.52421116828918 s
 from process SpawnPoolWorker-9
2025-10-10 14:53:19,351 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 14:53:19,351 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 14:54:30,124 - NRV INFO: FEN4NRV: solved in 224.3353180885315 s
 from process SpawnPoolWorker-10
2025-10-10 14:54:30,215 - NRV INFO: FEN4NRV: solved in 225.38862705230713 s
 from process SpawnPoolWorker-9
2025-10-10 14:54:30,266 - NRV INFO: FEN4NRV: solved in 224.33012461662292 s
 from process SpawnPoolWorker-8
2025-10-10 14:54:31,131 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:54:36,504 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:54:36,505 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:54:36,505 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:54:36,505 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:54:36,505 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:54:37,306 - NRV DEBUG: ...Done!
2025-10-10 14:54:37,444 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:54:37,445 - NRV DEBUG: ... start meshing
2025-10-10 14:54:45,114 - NRV DEBUG: ... meshing done
2025-10-10 14:54:45,176 - NRV DEBUG: Mesh properties:
2025-10-10 14:54:45,176 - NRV DEBUG: Number of processes : 3
2025-10-10 14:54:45,176 - NRV DEBUG: Number of entities : 405
2025-10-10 14:54:45,176 - NRV DEBUG: Number of nodes : 251031
2025-10-10 14:54:45,176 - NRV DEBUG: Number of elements : 1632371
2025-10-10 14:54:49,343 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:54:49,349 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:54:49,351 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:54:58,755 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-15
2025-10-10 14:54:58,766 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-13
2025-10-10 14:54:58,780 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-14
2025-10-10 14:54:59,322 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-15
2025-10-10 14:54:59,338 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-13
2025-10-10 14:54:59,356 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-14
2025-10-10 14:54:59,782 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:54:59,782 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:54:59,788 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:54:59,788 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:54:59,813 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:54:59,813 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:56:16,178 - NRV INFO: FEN4NRV: solved in 86.37872838973999 s
 from process SpawnPoolWorker-14
2025-10-10 14:56:16,866 - NRV INFO: FEN4NRV: solved in 87.06387186050415 s
 from process SpawnPoolWorker-13
2025-10-10 14:56:17,186 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:56:17,187 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:56:17,517 - NRV INFO: FEN4NRV: solved in 87.70418405532837 s
 from process SpawnPoolWorker-15
2025-10-10 14:56:17,608 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:56:17,608 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:56:18,081 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:56:18,081 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:57:33,021 - NRV INFO: FEN4NRV: solved in 162.21199131011963 s
 from process SpawnPoolWorker-14
2025-10-10 14:57:33,996 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 14:57:33,996 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 14:57:34,175 - NRV INFO: FEN4NRV: solved in 163.6305696964264 s
 from process SpawnPoolWorker-13
2025-10-10 14:57:34,672 - NRV INFO: FEN4NRV: solved in 164.2945761680603 s
 from process SpawnPoolWorker-15
2025-10-10 14:57:34,892 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 14:57:34,893 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 14:57:35,515 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 14:57:35,516 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 14:58:58,265 - NRV INFO: FEN4NRV: solved in 246.48128128051758 s
 from process SpawnPoolWorker-14
2025-10-10 14:58:58,897 - NRV INFO: FEN4NRV: solved in 247.63477063179016 s
 from process SpawnPoolWorker-13
2025-10-10 14:58:59,404 - NRV INFO: FEN4NRV: solved in 248.1827712059021 s
 from process SpawnPoolWorker-15
2025-10-10 14:59:03,291 - NRV DEBUG: Starting nerve simulation
2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 14:59:05,365 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 14:59:05,911 - NRV DEBUG: ...Done!
2025-10-10 14:59:05,920 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 14:59:05,921 - NRV DEBUG: ... start meshing
2025-10-10 14:59:24,167 - NRV DEBUG: ... meshing done
2025-10-10 14:59:24,228 - NRV DEBUG: Mesh properties:
2025-10-10 14:59:24,228 - NRV DEBUG: Number of processes : 1
2025-10-10 14:59:24,228 - NRV DEBUG: Number of entities : 525
2025-10-10 14:59:24,228 - NRV DEBUG: Number of nodes : 128407
2025-10-10 14:59:24,228 - NRV DEBUG: Number of elements : 816552
2025-10-10 14:59:26,196 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 14:59:29,649 - NRV DEBUG: FEN4NRV: setup the bilinear form
2025-10-10 14:59:29,651 - NRV DEBUG: FEN4NRV: setup the linear form
2025-10-10 14:59:29,730 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 14:59:29,730 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 14:59:53,530 - NRV DEBUG: FEN4NRV: solved in 27.255796909332275 s
2025-10-10 14:59:53,612 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 14:59:53,612 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:00:16,112 - NRV DEBUG: FEN4NRV: solved in 49.75597286224365 s
2025-10-10 15:00:16,144 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:00:16,144 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:00:38,606 - NRV DEBUG: FEN4NRV: solved in 72.21753215789795 s
2025-10-10 15:00:38,638 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:00:38,638 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:01:01,083 - NRV DEBUG: FEN4NRV: solved in 94.66298508644104 s
2025-10-10 15:01:01,116 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:01:01,116 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:01:23,555 - NRV DEBUG: FEN4NRV: solved in 117.1018648147583 s
2025-10-10 15:01:23,588 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:01:23,588 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:01:46,363 - NRV DEBUG: FEN4NRV: solved in 139.87680745124817 s
2025-10-10 15:01:46,399 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:01:46,399 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:02:09,508 - NRV DEBUG: FEN4NRV: solved in 162.98593544960022 s
2025-10-10 15:02:09,543 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:02:09,543 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:02:32,271 - NRV DEBUG: FEN4NRV: solved in 185.7134222984314 s
2025-10-10 15:02:32,305 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:02:32,305 - NRV DEBUG: FEN4NRV: solving electrical potential
2025-10-10 15:02:54,924 - NRV DEBUG: FEN4NRV: solved in 208.33260345458984 s
2025-10-10 15:02:57,714 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:02:59,919 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:00,528 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:00,529 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:00,529 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:00,529 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:00,529 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:00,543 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:00,543 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:00,543 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:00,543 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:00,543 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:00,544 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:00,544 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:00,544 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:00,544 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:00,544 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:01,109 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:01,109 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:01,109 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:01,109 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:01,109 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:01,136 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:01,136 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:01,136 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:01,136 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:01,136 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:01,180 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:01,180 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:01,180 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:01,180 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:01,180 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:02,100 - NRV DEBUG: ...Done!
2025-10-10 15:03:02,105 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:03:02,105 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:03:02,182 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:02,182 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:02,182 - NRV DEBUG: Number of entities : 213
2025-10-10 15:03:02,182 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:03:02,182 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:03:09,926 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:12,062 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,062 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,062 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,062 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,062 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:12,064 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,065 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,065 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,065 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,065 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:12,678 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,678 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,678 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,678 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,678 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:12,682 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,683 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,683 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,683 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,683 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:12,684 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:12,684 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:12,684 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:12,684 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:12,684 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:13,250 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:13,250 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:13,250 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:13,250 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:13,250 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:13,276 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:13,276 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:13,276 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:13,276 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:13,276 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:13,294 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:13,294 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:13,294 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:13,294 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:13,294 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:14,192 - NRV DEBUG: ...Done!
2025-10-10 15:03:14,198 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:03:14,198 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:03:14,274 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:14,274 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:14,274 - NRV DEBUG: Number of entities : 213
2025-10-10 15:03:14,274 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:03:14,274 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:03:16,501 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:18,546 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:18,547 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:18,547 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:18,547 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:18,547 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:19,384 - NRV DEBUG: ...Done!
2025-10-10 15:03:19,440 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:19,440 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:19,440 - NRV DEBUG: Number of entities : 189
2025-10-10 15:03:19,440 - NRV DEBUG: Number of nodes : 690
2025-10-10 15:03:19,440 - NRV DEBUG: Number of elements : 1404
2025-10-10 15:03:24,589 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:26,629 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:26,629 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:26,629 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:26,629 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:26,629 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:27,502 - NRV DEBUG: ...Done!
2025-10-10 15:03:27,556 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:27,556 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:27,556 - NRV DEBUG: Number of entities : 189
2025-10-10 15:03:27,556 - NRV DEBUG: Number of nodes : 690
2025-10-10 15:03:27,556 - NRV DEBUG: Number of elements : 1404
2025-10-10 15:03:32,570 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:34,537 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:34,537 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:34,538 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:34,538 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:34,538 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:35,332 - NRV DEBUG: ...Done!
2025-10-10 15:03:35,387 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:35,387 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:35,387 - NRV DEBUG: Number of entities : 189
2025-10-10 15:03:35,387 - NRV DEBUG: Number of nodes : 690
2025-10-10 15:03:35,387 - NRV DEBUG: Number of elements : 1404
2025-10-10 15:03:40,249 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:42,283 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:42,284 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:42,284 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:42,284 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:42,284 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:43,090 - NRV DEBUG: ...Done!
2025-10-10 15:03:43,143 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:43,144 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:43,144 - NRV DEBUG: Number of entities : 189
2025-10-10 15:03:43,144 - NRV DEBUG: Number of nodes : 690
2025-10-10 15:03:43,144 - NRV DEBUG: Number of elements : 1404
2025-10-10 15:03:50,501 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:03:52,564 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:03:53,107 - NRV DEBUG: ...Done!
2025-10-10 15:03:53,113 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:03:53,114 - NRV DEBUG: ... start meshing
2025-10-10 15:03:58,883 - NRV DEBUG: ... meshing done
2025-10-10 15:03:58,914 - NRV DEBUG: Mesh properties:
2025-10-10 15:03:58,915 - NRV DEBUG: Number of processes : 3
2025-10-10 15:03:58,915 - NRV DEBUG: Number of entities : 501
2025-10-10 15:03:58,915 - NRV DEBUG: Number of nodes : 120782
2025-10-10 15:03:58,915 - NRV DEBUG: Number of elements : 760961
2025-10-10 15:04:03,086 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 15:04:03,087 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 15:04:03,117 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 15:04:06,085 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-3
2025-10-10 15:04:06,088 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-3
2025-10-10 15:04:06,131 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-4
2025-10-10 15:04:06,133 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-4
2025-10-10 15:04:06,145 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-5
2025-10-10 15:04:06,146 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-5
2025-10-10 15:04:06,176 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 15:04:06,177 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 15:04:06,213 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 15:04:06,213 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 15:04:06,230 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 15:04:06,230 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 15:04:30,795 - NRV INFO: FEN4NRV: solved in 27.59043860435486 s
 from process SpawnPoolWorker-3
2025-10-10 15:04:30,898 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 15:04:30,898 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 15:04:31,285 - NRV INFO: FEN4NRV: solved in 28.11917281150818 s
 from process SpawnPoolWorker-4
2025-10-10 15:04:31,307 - NRV INFO: FEN4NRV: solved in 28.13699197769165 s
 from process SpawnPoolWorker-5
2025-10-10 15:04:31,375 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 15:04:31,376 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 15:04:31,397 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 15:04:31,397 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 15:04:51,063 - NRV INFO: FEN4NRV: solved in 47.75521731376648 s
 from process SpawnPoolWorker-3
2025-10-10 15:04:51,099 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-3
2025-10-10 15:04:51,100 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-3
2025-10-10 15:04:51,506 - NRV INFO: FEN4NRV: solved in 48.24939680099487 s
 from process SpawnPoolWorker-4
2025-10-10 15:04:51,546 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-4
2025-10-10 15:04:51,546 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-4
2025-10-10 15:04:51,636 - NRV INFO: FEN4NRV: solved in 48.37630581855774 s
 from process SpawnPoolWorker-5
2025-10-10 15:04:51,673 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-5
2025-10-10 15:04:51,673 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-5
2025-10-10 15:05:11,282 - NRV INFO: FEN4NRV: solved in 67.93794822692871 s
 from process SpawnPoolWorker-3
2025-10-10 15:05:11,714 - NRV INFO: FEN4NRV: solved in 68.41666388511658 s
 from process SpawnPoolWorker-4
2025-10-10 15:05:11,931 - NRV INFO: FEN4NRV: solved in 68.63391280174255 s
 from process SpawnPoolWorker-5
2025-10-10 15:05:12,580 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:05:15,000 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:05:15,536 - NRV DEBUG: ...Done!
2025-10-10 15:05:15,596 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:05:15,597 - NRV DEBUG: ... start meshing
2025-10-10 15:05:21,648 - NRV DEBUG: ... meshing done
2025-10-10 15:05:21,680 - NRV DEBUG: Mesh properties:
2025-10-10 15:05:21,681 - NRV DEBUG: Number of processes : 3
2025-10-10 15:05:21,681 - NRV DEBUG: Number of entities : 495
2025-10-10 15:05:21,681 - NRV DEBUG: Number of nodes : 119886
2025-10-10 15:05:21,681 - NRV DEBUG: Number of elements : 754862
2025-10-10 15:05:25,888 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 15:05:25,891 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 15:05:25,892 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 15:05:28,948 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-9
2025-10-10 15:05:28,950 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-9
2025-10-10 15:05:29,040 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 15:05:29,040 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 15:05:29,069 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-10
2025-10-10 15:05:29,071 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-10
2025-10-10 15:05:29,156 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 15:05:29,157 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 15:05:29,158 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-8
2025-10-10 15:05:29,160 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-8
2025-10-10 15:05:29,246 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 15:05:29,246 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 15:05:51,514 - NRV INFO: FEN4NRV: solved in 25.53689408302307 s
 from process SpawnPoolWorker-9
2025-10-10 15:05:51,591 - NRV INFO: FEN4NRV: solved in 25.61539077758789 s
 from process SpawnPoolWorker-10
2025-10-10 15:05:51,615 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 15:05:51,615 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 15:05:51,672 - NRV INFO: FEN4NRV: solved in 25.69521689414978 s
 from process SpawnPoolWorker-8
2025-10-10 15:05:51,673 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 15:05:51,673 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 15:05:51,756 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 15:05:51,756 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 15:06:13,015 - NRV INFO: FEN4NRV: solved in 46.95681619644165 s
 from process SpawnPoolWorker-10
2025-10-10 15:06:13,044 - NRV INFO: FEN4NRV: solved in 46.96643805503845 s
 from process SpawnPoolWorker-9
2025-10-10 15:06:13,047 - NRV INFO: FEN4NRV: solved in 46.98639678955078 s
 from process SpawnPoolWorker-8
2025-10-10 15:06:13,055 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-10
2025-10-10 15:06:13,055 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-10
2025-10-10 15:06:13,086 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-9
2025-10-10 15:06:13,086 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-9
2025-10-10 15:06:13,090 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-8
2025-10-10 15:06:13,090 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-8
2025-10-10 15:06:33,708 - NRV INFO: FEN4NRV: solved in 67.60999941825867 s
 from process SpawnPoolWorker-10
2025-10-10 15:06:33,730 - NRV INFO: FEN4NRV: solved in 67.62663197517395 s
 from process SpawnPoolWorker-8
2025-10-10 15:06:33,816 - NRV INFO: FEN4NRV: solved in 67.6965160369873 s
 from process SpawnPoolWorker-9
2025-10-10 15:06:34,456 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:06:36,830 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:06:37,353 - NRV DEBUG: ...Done!
2025-10-10 15:06:37,412 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:06:37,413 - NRV DEBUG: ... start meshing
2025-10-10 15:06:43,317 - NRV DEBUG: ... meshing done
2025-10-10 15:06:43,348 - NRV DEBUG: Mesh properties:
2025-10-10 15:06:43,348 - NRV DEBUG: Number of processes : 3
2025-10-10 15:06:43,348 - NRV DEBUG: Number of entities : 495
2025-10-10 15:06:43,348 - NRV DEBUG: Number of nodes : 118379
2025-10-10 15:06:43,348 - NRV DEBUG: Number of elements : 744685
2025-10-10 15:06:47,525 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 15:06:47,530 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 15:06:47,536 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 15:06:50,263 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-14
2025-10-10 15:06:50,266 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-14
2025-10-10 15:06:50,356 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 15:06:50,356 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 15:06:50,407 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-13
2025-10-10 15:06:50,409 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-13
2025-10-10 15:06:50,438 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-15
2025-10-10 15:06:50,440 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-15
2025-10-10 15:06:50,491 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 15:06:50,492 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 15:06:50,524 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 15:06:50,524 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 15:07:11,248 - NRV INFO: FEN4NRV: solved in 23.6340491771698 s
 from process SpawnPoolWorker-14
2025-10-10 15:07:11,309 - NRV INFO: FEN4NRV: solved in 23.69528317451477 s
 from process SpawnPoolWorker-15
2025-10-10 15:07:11,344 - NRV INFO: FEN4NRV: solved in 23.72641658782959 s
 from process SpawnPoolWorker-13
2025-10-10 15:07:11,351 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 15:07:11,351 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 15:07:11,393 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 15:07:11,393 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 15:07:11,429 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 15:07:11,429 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 15:07:31,014 - NRV INFO: FEN4NRV: solved in 43.29701113700867 s
 from process SpawnPoolWorker-14
2025-10-10 15:07:31,036 - NRV INFO: FEN4NRV: solved in 43.333622455596924 s
 from process SpawnPoolWorker-13
2025-10-10 15:07:31,054 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-14
2025-10-10 15:07:31,054 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-14
2025-10-10 15:07:31,071 - NRV INFO: FEN4NRV: solved in 43.37325191497803 s
 from process SpawnPoolWorker-15
2025-10-10 15:07:31,075 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-13
2025-10-10 15:07:31,075 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-13
2025-10-10 15:07:31,107 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-15
2025-10-10 15:07:31,107 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-15
2025-10-10 15:07:50,210 - NRV INFO: FEN4NRV: solved in 62.453306913375854 s
 from process SpawnPoolWorker-14
2025-10-10 15:07:50,220 - NRV INFO: FEN4NRV: solved in 62.479230642318726 s
 from process SpawnPoolWorker-13
2025-10-10 15:07:50,260 - NRV INFO: FEN4NRV: solved in 62.52633213996887 s
 from process SpawnPoolWorker-15
2025-10-10 15:07:50,878 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:07:53,334 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:07:53,864 - NRV DEBUG: ...Done!
2025-10-10 15:07:53,921 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:07:53,922 - NRV DEBUG: ... start meshing
2025-10-10 15:07:59,667 - NRV DEBUG: ... meshing done
2025-10-10 15:07:59,699 - NRV DEBUG: Mesh properties:
2025-10-10 15:07:59,700 - NRV DEBUG: Number of processes : 3
2025-10-10 15:07:59,700 - NRV DEBUG: Number of entities : 495
2025-10-10 15:07:59,700 - NRV DEBUG: Number of nodes : 118981
2025-10-10 15:07:59,700 - NRV DEBUG: Number of elements : 748470
2025-10-10 15:08:04,057 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-19
2025-10-10 15:08:04,058 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-20
2025-10-10 15:08:04,061 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-18
2025-10-10 15:08:06,815 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-18
2025-10-10 15:08:06,817 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-18
2025-10-10 15:08:06,896 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-18
2025-10-10 15:08:06,896 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-18
2025-10-10 15:08:06,930 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-20
2025-10-10 15:08:06,931 - NRV INFO: FEN4NRV: setup the bilinear form
 from process SpawnPoolWorker-19
2025-10-10 15:08:06,932 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-20
2025-10-10 15:08:06,933 - NRV INFO: FEN4NRV: setup the linear form
 from process SpawnPoolWorker-19
2025-10-10 15:08:07,011 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-19
2025-10-10 15:08:07,011 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-19
2025-10-10 15:08:07,013 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-20
2025-10-10 15:08:07,013 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-20
2025-10-10 15:08:28,301 - NRV INFO: FEN4NRV: solved in 24.161094903945923 s
 from process SpawnPoolWorker-18
2025-10-10 15:08:28,402 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-18
2025-10-10 15:08:28,403 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-18
2025-10-10 15:08:28,410 - NRV INFO: FEN4NRV: solved in 24.271687030792236 s
 from process SpawnPoolWorker-20
2025-10-10 15:08:28,481 - NRV INFO: FEN4NRV: solved in 24.345920085906982 s
 from process SpawnPoolWorker-19
2025-10-10 15:08:28,504 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-20
2025-10-10 15:08:28,504 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-20
2025-10-10 15:08:28,565 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-19
2025-10-10 15:08:28,565 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-19
2025-10-10 15:08:48,889 - NRV INFO: FEN4NRV: solved in 44.647902965545654 s
 from process SpawnPoolWorker-18
2025-10-10 15:08:48,925 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-18
2025-10-10 15:08:48,925 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-18
2025-10-10 15:08:49,016 - NRV INFO: FEN4NRV: solved in 44.783544063568115 s
 from process SpawnPoolWorker-20
2025-10-10 15:08:49,053 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-20
2025-10-10 15:08:49,053 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-20
2025-10-10 15:08:49,168 - NRV INFO: FEN4NRV: solved in 44.94829821586609 s
 from process SpawnPoolWorker-19
2025-10-10 15:08:49,201 - NRV INFO: Static/Quasi-Static electrical current problem
 from process SpawnPoolWorker-19
2025-10-10 15:08:49,201 - NRV INFO: FEN4NRV: solving electrical potential
 from process SpawnPoolWorker-19
2025-10-10 15:09:08,814 - NRV INFO: FEN4NRV: solved in 64.53627395629883 s
 from process SpawnPoolWorker-18
2025-10-10 15:09:09,010 - NRV INFO: FEN4NRV: solved in 64.741051197052 s
 from process SpawnPoolWorker-20
2025-10-10 15:09:09,217 - NRV INFO: FEN4NRV: solved in 64.96449661254883 s
 from process SpawnPoolWorker-19
2025-10-10 15:09:12,590 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:09:14,723 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:14,723 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:14,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:14,726 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:14,726 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:14,726 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:14,727 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:14,727 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:15,382 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:15,382 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:15,382 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:15,383 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:15,383 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:15,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:15,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:15,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:15,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:15,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:15,395 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:15,395 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:15,395 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:15,395 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:15,395 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:15,952 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:15,952 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:15,952 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:15,952 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:15,952 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:15,998 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:15,998 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:15,998 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:15,998 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:15,998 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:16,025 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:16,025 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:16,025 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:16,025 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:16,025 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:16,939 - NRV DEBUG: ...Done!
2025-10-10 15:09:16,942 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:09:16,942 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:09:17,024 - NRV DEBUG: Mesh properties:
2025-10-10 15:09:17,024 - NRV DEBUG: Number of processes : 3
2025-10-10 15:09:17,024 - NRV DEBUG: Number of entities : 213
2025-10-10 15:09:17,024 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:09:17,024 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:09:24,691 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:09:26,816 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:26,817 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:26,817 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:26,817 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:26,817 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:26,817 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:26,818 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:27,421 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:27,421 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:27,421 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:27,421 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:27,421 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:27,441 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:27,442 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:27,442 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:27,442 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:27,442 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:27,449 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:27,449 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:27,449 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:27,449 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:27,449 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:27,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:27,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:27,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:27,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:27,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:28,039 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:28,039 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:28,039 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:28,039 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:28,039 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:28,041 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:28,041 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:28,041 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:28,041 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:28,041 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:28,953 - NRV DEBUG: ...Done!
2025-10-10 15:09:28,955 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:09:28,956 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:09:29,034 - NRV DEBUG: Mesh properties:
2025-10-10 15:09:29,034 - NRV DEBUG: Number of processes : 3
2025-10-10 15:09:29,034 - NRV DEBUG: Number of entities : 213
2025-10-10 15:09:29,034 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:09:29,034 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:09:36,593 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:38,574 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:39,093 - NRV DEBUG: ...Done!
2025-10-10 15:09:39,147 - NRV DEBUG: Mesh properties:
2025-10-10 15:09:39,147 - NRV DEBUG: Number of processes : 3
2025-10-10 15:09:39,147 - NRV DEBUG: Number of entities : 189
2025-10-10 15:09:39,147 - NRV DEBUG: Number of nodes : 588
2025-10-10 15:09:39,147 - NRV DEBUG: Number of elements : 1196
2025-10-10 15:09:56,600 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:09:58,728 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:01,831 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:01,831 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:01,831 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:01,831 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:01,831 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:02,047 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:02,047 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:02,048 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:02,048 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:02,048 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:02,067 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:02,067 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:02,067 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:02,067 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:02,067 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:04,924 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:04,924 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:04,924 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:04,924 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:04,924 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:05,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:05,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:05,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:05,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:05,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:05,450 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:05,450 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:05,450 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:05,450 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:05,450 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:09,426 - NRV DEBUG: ...Done!
2025-10-10 15:10:09,431 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:10:09,431 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:10:09,507 - NRV DEBUG: Mesh properties:
2025-10-10 15:10:09,507 - NRV DEBUG: Number of processes : 3
2025-10-10 15:10:09,507 - NRV DEBUG: Number of entities : 213
2025-10-10 15:10:09,507 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:10:09,507 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:10:15,356 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:17,526 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:20,706 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:20,707 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:20,707 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:20,707 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:20,707 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:20,771 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:20,771 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:20,771 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:20,771 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:20,771 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:20,852 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:20,852 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:20,852 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:20,852 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:20,852 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:23,767 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:23,767 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:23,767 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:23,767 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:23,767 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:24,029 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:24,030 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:24,030 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:24,030 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:24,030 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:24,264 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:24,264 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:24,264 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:24,264 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:24,265 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:27,905 - NRV DEBUG: ...Done!
2025-10-10 15:10:27,909 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:10:27,910 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:10:27,982 - NRV DEBUG: Mesh properties:
2025-10-10 15:10:27,982 - NRV DEBUG: Number of processes : 3
2025-10-10 15:10:27,982 - NRV DEBUG: Number of entities : 213
2025-10-10 15:10:27,982 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:10:27,983 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:10:33,730 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:35,864 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:35,867 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:35,867 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:35,867 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:35,867 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:35,867 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:39,274 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:39,274 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:39,274 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:39,274 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:39,274 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:39,298 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:39,298 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:39,298 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:39,299 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:39,299 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:39,372 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:39,372 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:39,372 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:39,372 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:39,372 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:42,580 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:42,580 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:42,581 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:42,581 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:42,581 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:42,695 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:42,695 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:42,695 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:42,695 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:42,695 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:42,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:42,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:42,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:42,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:42,724 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:46,726 - NRV DEBUG: ...Done!
2025-10-10 15:10:46,730 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:10:46,730 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:10:46,803 - NRV DEBUG: Mesh properties:
2025-10-10 15:10:46,803 - NRV DEBUG: Number of processes : 3
2025-10-10 15:10:46,803 - NRV DEBUG: Number of entities : 213
2025-10-10 15:10:46,804 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:10:46,804 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:10:54,836 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:56,959 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:56,960 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:56,961 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:56,961 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:56,961 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:58,196 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:59,457 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:10:59,586 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:00,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:00,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:00,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:11:00,409 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:00,410 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:00,410 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:00,787 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:00,787 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:00,787 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:11:00,788 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:00,788 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:00,788 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:00,984 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:00,984 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:00,984 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:11:00,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:00,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:00,985 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:766: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.myelinated_param["node_shift"] = self.axons["node_shift"][k]

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:768: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:769: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:02,097 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:770: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:05,284 - NRV DEBUG: ...Done!
2025-10-10 15:11:05,372 - NRV DEBUG: Mesh properties:
2025-10-10 15:11:05,372 - NRV DEBUG: Number of processes : 3
2025-10-10 15:11:05,372 - NRV DEBUG: Number of entities : 216
2025-10-10 15:11:05,372 - NRV DEBUG: Number of nodes : 1349
2025-10-10 15:11:05,372 - NRV DEBUG: Number of elements : 2790
2025-10-10 15:11:18,857 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:11:21,076 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:21,077 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:21,078 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:21,083 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:21,083 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:21,083 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:21,083 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:21,084 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:22,487 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:22,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:22,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:22,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:22,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:22,496 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:22,496 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:22,496 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:22,496 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:22,496 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:22,499 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:22,499 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:22,499 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:22,499 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:22,499 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:23,758 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:23,759 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:23,759 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:23,759 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:23,759 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:23,859 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:23,859 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:23,859 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:23,859 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:23,859 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:23,868 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:23,868 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:23,868 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:23,869 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:23,869 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:25,517 - NRV DEBUG: ...Done!
2025-10-10 15:11:25,522 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:11:25,522 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:11:25,597 - NRV DEBUG: Mesh properties:
2025-10-10 15:11:25,598 - NRV DEBUG: Number of processes : 3
2025-10-10 15:11:25,598 - NRV DEBUG: Number of entities : 213
2025-10-10 15:11:25,598 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:11:25,598 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:11:30,945 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:33,090 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:33,091 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:33,091 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:33,098 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:33,098 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:33,098 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:33,098 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:33,098 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:35,794 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:35,794 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:35,794 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:35,794 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:35,794 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:36,202 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:36,202 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:36,202 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:36,202 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:36,202 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:36,230 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:36,230 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:36,230 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:36,230 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:36,230 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:38,468 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:38,468 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:38,469 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:38,469 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:38,469 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:39,264 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:39,265 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:39,265 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:39,265 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:39,265 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:39,338 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:39,339 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:39,339 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:39,339 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:39,339 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:42,717 - NRV DEBUG: ...Done!
2025-10-10 15:11:42,720 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:11:42,720 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:11:42,793 - NRV DEBUG: Mesh properties:
2025-10-10 15:11:42,793 - NRV DEBUG: Number of processes : 3
2025-10-10 15:11:42,793 - NRV DEBUG: Number of entities : 213
2025-10-10 15:11:42,793 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:11:42,793 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:11:48,363 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:50,509 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:57,582 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:57,582 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:57,583 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:57,583 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:57,583 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:59,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:59,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:59,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:59,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:59,387 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:11:59,552 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:11:59,552 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:11:59,552 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:11:59,552 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:11:59,552 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:12:06,323 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:12:06,323 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:12:06,323 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:12:06,323 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:12:06,323 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:12:06,487 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:12:06,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:12:06,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:12:06,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:12:06,488 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:12:07,692 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:12:07,692 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:12:07,692 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:12:07,692 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:12:07,692 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:12:15,801 - NRV DEBUG: ...Done!
2025-10-10 15:12:15,805 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:155: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["akey"] = [f"axon{k}" for k in range(len(_ax_pop))]

2025-10-10 15:12:15,805 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/results/_nerve_results.py:156: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  _ax_pop["fkey"] = [key for _ in range(len(_ax_pop))]

2025-10-10 15:12:15,879 - NRV DEBUG: Mesh properties:
2025-10-10 15:12:15,879 - NRV DEBUG: Number of processes : 3
2025-10-10 15:12:15,879 - NRV DEBUG: Number of entities : 213
2025-10-10 15:12:15,879 - NRV DEBUG: Number of nodes : 1159
2025-10-10 15:12:15,879 - NRV DEBUG: Number of elements : 2438
2025-10-10 15:12:26,031 - NRV DEBUG: Starting nerve simulation
2025-10-10 15:12:28,047 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:1257: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  assert self.axons["types"][k] in [0, 1]

2025-10-10 15:12:28,047 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:756: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  if self.axons["types"][k] == 0:

2025-10-10 15:12:28,047 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:758: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["y"][k],

2025-10-10 15:12:28,048 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:759: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["z"][k],

2025-10-10 15:12:28,048 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/nmod/_fascicles.py:760: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  self.axons["diameters"][k],

2025-10-10 15:12:28,892 - NRV DEBUG: ...Done!
2025-10-10 15:12:28,898 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:12:28,899 - NRV DEBUG: ... start meshing
2025-10-10 15:12:37,197 - NRV DEBUG: ... meshing done
2025-10-10 15:12:37,260 - NRV DEBUG: Mesh properties:
2025-10-10 15:12:37,260 - NRV DEBUG: Number of processes : 3
2025-10-10 15:12:37,260 - NRV DEBUG: Number of entities : 405
2025-10-10 15:12:37,260 - NRV DEBUG: Number of nodes : 251317
2025-10-10 15:12:37,260 - NRV DEBUG: Number of elements : 1634303
2025-10-10 15:12:37,366 - /Users/thomascouppey/Desktop/Laboratoire_Etis/Codes/Libraries/NRV/nrv/ui/_NRV_Msh.py:118: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  node_shift[i_myel] = __x_l / __deltaxs

2025-10-10 15:12:37,366 - NRV DEBUG: ... start meshing
2025-10-10 15:12:45,439 - NRV DEBUG: ... meshing done
2025-10-10 15:12:45,501 - NRV DEBUG: Mesh properties:
2025-10-10 15:12:45,501 - NRV DEBUG: Number of processes : 3
2025-10-10 15:12:45,501 - NRV DEBUG: Number of entities : 405
2025-10-10 15:12:45,501 - NRV DEBUG: Number of nodes : 251424
2025-10-10 15:12:45,501 - NRV DEBUG: Number of elements : 1635424
2025-10-10 15:12:45,502 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:12:54,520 - NRV DEBUG: FEN4NRV: setup the bilinear form
2025-10-10 15:12:55,046 - NRV DEBUG: FEN4NRV: setup the linear form
2025-10-10 15:12:55,477 - NRV DEBUG: Static/Quasi-Static electrical current problem
2025-10-10 15:12:55,477 - NRV DEBUG: FEN4NRV: solving electrical potential
