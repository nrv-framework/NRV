{
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.__init__": [],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.default": [
    {
      "source": "def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return super().default(o)",
      "names": [
        {
          "import_components": [
            "iter"
          ],
          "code_str": "iter",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "iter"
        },
        {
          "import_components": [
            "TypeError"
          ],
          "code_str": "TypeError",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "TypeError"
        },
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "list"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "super"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.default",
        "ref_id": "nrv-encoder-default",
        "headings": [
          "NRV_Encoder.default"
        ]
      },
      "doc_lineno": 8
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.encode": [
    {
      "source": ">>> from json.encoder import JSONEncoder\n>>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n'{\"foo\": [\"bar\", \"baz\"]}'",
      "names": [],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.encode",
        "ref_id": "nrv-encoder-encode",
        "headings": [
          "NRV_Encoder.encode"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.item_separator": [],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.iterencode": [
    {
      "source": "for chunk in JSONEncoder().iterencode(bigobject):\n    mysocket.write(chunk)",
      "names": [],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.iterencode",
        "ref_id": "nrv-encoder-iterencode",
        "headings": [
          "NRV_Encoder.iterencode"
        ]
      },
      "doc_lineno": 6
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.key_separator": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.__init__": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.get_parameters": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.load": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.save": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_class/nrv.backend.NRV_class.set_parameters",
        "ref_id": "nrv-class-set-parameters",
        "headings": [
          "NRV_class.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.__init__": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.clear": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.copy": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.fromkeys": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.get": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.get_parameters": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.is_dummy": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.is_empty": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.items": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.keys": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.load": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.pop": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.popitem": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.remove_key": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.save": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_results/nrv.backend.NRV_results.set_parameters",
        "ref_id": "nrv-results-set-parameters",
        "headings": [
          "NRV_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.setdefault": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.to_save": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.update": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.values": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.__init__": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.extracel_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.get_parameters": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.has_FEM_extracel": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.intracel_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.load": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.rec_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.save": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.set_parameters",
        "ref_id": "nrv-simulable-set-parameters",
        "headings": [
          "NRV_simulable.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.simulate": [],
  "_nrv/backend/NRV_singleton/nrv.backend.NRV_singleton.__init__": [],
  "_nrv/backend/NRV_singleton/nrv.backend.NRV_singleton.mro": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.BOLD": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.ENDC": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.FAIL": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.HEADER": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKBLUE": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKCYAN": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKGREEN": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.UNDERLINE": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.WARNING": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.__init__": [],
  "_nrv/backend/nrv.backend.NRV_Encoder": [],
  "_nrv/backend/nrv.backend.NRV_class": [],
  "_nrv/backend/nrv.backend.NRV_results": [],
  "_nrv/backend/nrv.backend.NRV_simulable": [],
  "_nrv/backend/nrv.backend.NRV_singleton": [],
  "_nrv/backend/nrv.backend.bcolors": [],
  "_nrv/backend/nrv.backend.check_function_kwargs": [],
  "_nrv/backend/nrv.backend.check_json_fname": [],
  "_nrv/backend/nrv.backend.clear_prompt_line": [],
  "_nrv/backend/nrv.backend.create_folder": [],
  "_nrv/backend/nrv.backend.function_to_str": [],
  "_nrv/backend/nrv.backend.generate_new_fname": [],
  "_nrv/backend/nrv.backend.generate_results": [],
  "_nrv/backend/nrv.backend.init_reporter": [],
  "_nrv/backend/nrv.backend.is_NRV_class": [],
  "_nrv/backend/nrv.backend.is_NRV_class_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_class_list": [],
  "_nrv/backend/nrv.backend.is_NRV_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_dict_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_dict_list": [],
  "_nrv/backend/nrv.backend.is_NRV_object_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_simulable": [],
  "_nrv/backend/nrv.backend.is_empty_iterable": [],
  "_nrv/backend/nrv.backend.is_iterable": [],
  "_nrv/backend/nrv.backend.json_dump": [],
  "_nrv/backend/nrv.backend.json_load": [],
  "_nrv/backend/nrv.backend.load_any": [],
  "_nrv/backend/nrv.backend.load_dxf_file": [],
  "_nrv/backend/nrv.backend.ncore_autoset": [],
  "_nrv/backend/nrv.backend.nrv_config": [],
  "_nrv/backend/nrv.backend.nrv_parameters": [],
  "_nrv/backend/nrv.backend.pass_debug_info": [],
  "_nrv/backend/nrv.backend.pass_info": [],
  "_nrv/backend/nrv.backend.progression_popup": [],
  "_nrv/backend/nrv.backend.prompt_debug": [],
  "_nrv/backend/nrv.backend.rise_error": [],
  "_nrv/backend/nrv.backend.rise_warning": [],
  "_nrv/backend/nrv.backend.rmv_ext": [],
  "_nrv/backend/nrv.backend.set_attributes": [],
  "_nrv/backend/nrv.backend.set_log_level": [],
  "_nrv/backend/nrv.backend.sim_results": [],
  "_nrv/backend/nrv.backend.simulable": [],
  "_nrv/backend/nrv.backend.str_to_function": [],
  "_nrv/backend/nrv_config/nrv.backend.nrv_config.__init__": [],
  "_nrv/backend/nrv_config/nrv.backend.nrv_config.display_machine_config": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.__init__": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_gmsh_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_nmod_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_nrv_verbosity": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_optim_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.gmsh_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.is_alone": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.load": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.nmod_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.optim_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.proc_label": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.save": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_gmsh_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_ncores": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_nmod_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_nrv_verbosity": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_optim_ncore": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.__init__": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.clear": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.copy": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.filter_freq": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.fromkeys": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.get": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.get_parameters": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.is_dummy": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.is_empty": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.items": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.keys": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.load": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.plot_stim": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.pop": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.popitem": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.remove_key": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.save": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/sim_results/nrv.backend.sim_results.set_parameters",
        "ref_id": "sim-results-set-parameters",
        "headings": [
          "sim_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/sim_results/nrv.backend.sim_results.setdefault": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.to_save": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.update": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.values": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.__init__": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.build_mesh": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.clear": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.clear_fem_res": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.dim": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.fem_res_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_info": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_nproc": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_parameters": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.i_drive": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.i_drive_A": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.inj_protocol": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.is_multi_patern": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.load": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_e": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_f": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_p": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_t": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.nerve_mesh_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.nerve_res_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.rerun_failed_steps": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_all_fem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_and_savefem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_fem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_fem_1core": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.save": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_ncore_gmsh": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_parameters",
        "ref_id": "eit2dproblem-set-parameters",
        "headings": [
          "EIT2DProblem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_eit": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_nerve": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_recording": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.timers_dict": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.use_backup": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.v_shape": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.x_bounds_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.__init__": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.build_mesh": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.clear": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.clear_fem_res": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.dim": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.fem_res_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.get_nproc": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.get_parameters": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.i_drive": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.i_drive_A": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.inj_protocol": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.is_multi_patern": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.load": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_e": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_f": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_p": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_t": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.nerve_mesh_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.nerve_res_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.rerun_failed_steps": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_all_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_and_savefem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_fem_1core": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.save": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.set_parameters",
        "ref_id": "eit3dproblem-set-parameters",
        "headings": [
          "EIT3DProblem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_eit": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_nerve": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_recording": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.timers_dict": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.use_backup": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.v_shape": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.x_bounds_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.__init__": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.build_mesh": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.clear": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.clear_fem_res": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.dim": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.fem_res_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.get_nproc": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.get_parameters": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.i_drive": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.i_drive_A": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.inj_protocol": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.is_multi_patern": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.load": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_e": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_f": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_p": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_t": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.nerve_mesh_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.nerve_res_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.rerun_failed_steps": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_all_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_and_savefem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_fem_1core": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.save": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/eit_forward/nrv.eit.eit_forward.set_parameters",
        "ref_id": "eit-forward-set-parameters",
        "headings": [
          "eit_forward.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_eit": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_nerve": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_recording": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.timers_dict": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.use_backup": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.v_shape": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.x_bounds_fem": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.__init__": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.fromat_data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.get_results": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.has_data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.plot": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.solve": [],
  "_nrv/eit/nrv.eit.EIT2DProblem": [],
  "_nrv/eit/nrv.eit.EIT3DProblem": [],
  "_nrv/eit/nrv.eit.eit_forward": [
    {
      "source": ".. seealso::",
      "names": [],
      "example": {
        "document": "_nrv/eit/nrv.eit.eit_forward",
        "ref_id": "eit-forward",
        "headings": [
          "eit_forward"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/eit/nrv.eit.eit_inverse": [
    {
      "source": ".. seealso::",
      "names": [],
      "example": {
        "document": "_nrv/eit/nrv.eit.eit_inverse",
        "ref_id": "eit-inverse",
        "headings": [
          "eit_inverse"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/eit/nrv.eit.pyeit_inverse": [],
  "_nrv/eit/nrv.eit.results": [],
  "_nrv/eit/nrv.eit.utils": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.__init__": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.cbar": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.fromat_data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.get_results": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.has_data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.plot": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.set_inversor": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.solve": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.update_mesh": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.__init__": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.clear": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.copy": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit_normalized": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit_pc": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.e_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.f_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.fail_results": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.fromkeys": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_mask": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_t_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_v_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_cap_i_t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_cap_mask": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_dv_from_df": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_idxs": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_reccap_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_failed_test": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_fem_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_nerve_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.i_t_duration": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.incorporate_nerve_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.is_multi_freqs": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.is_multi_patern": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.items": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.ix_": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.keys": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.load": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_e": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_f": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_p": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.plot": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.pop": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.popitem": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.setdefault": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.shape": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.t_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update_acap_inde_t_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update_failed_results": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_0": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit_idx": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit_interp": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_rec": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_rec_interp": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.values": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.__init__": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.add_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.cap_duration": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.clear": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.copy": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit_normalized": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit_pc": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.e_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.error": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.f_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.fail_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.fromkeys": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_mask": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_t_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_v_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_i_t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_i_t_lim": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_mask": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_dv_from_df": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_idxs": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_reccap_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_failed_test": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_fem_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_nerve_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.i_t_duration": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.incorporate_nerve_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.is_multi_freqs": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.is_multi_patern": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.items": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.ix_": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.keys": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.load": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.mean": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_e": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_f": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_p": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.plot": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.pop": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.popitem": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.r_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.res_argwhere": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.res_where": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.setdefault": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.shape": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.std": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.t_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update_acap_inde_t_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update_failed_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_0": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit_idx": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit_interp": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_rec": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_rec_interp": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.values": [],
  "_nrv/eit/results/nrv.eit.results.eit_forward_results": [
    {
      "source": ">>> res = eit_forward_results(nerve_res=nerve_sim, fem_res=fem_sim) # create results\n>>> dv = res.dv_eit(i_e=0) # Access voltage shift of the first electrode\n>>> cap_mask = res.get_cap_mask(thr=0.1)\n>>> res.plot_recruited_fibers(ax)",
      "names": [],
      "example": {
        "document": "_nrv/eit/results/nrv.eit.results.eit_forward_results",
        "ref_id": "eit-forward-results",
        "headings": [
          "eit_forward_results"
        ]
      },
      "doc_lineno": 25
    }
  ],
  "_nrv/eit/results/nrv.eit.results.eit_results_list": [
    {
      "source": ">>> res_list = eit_results_list(dt=0.001)\n>>> res_list.add_results([res1, res2, res3])\n>>> mean_v = res_list.mean(which=\"v_eit\")\n>>> cap_times = res_list.get_cap_i_t(thr=0.1)\n>>> error = res_list.error(which=\"v_eit\", i_res_ref=0)",
      "names": [],
      "example": {
        "document": "_nrv/eit/results/nrv.eit.results.eit_results_list",
        "ref_id": "eit-results-list",
        "headings": [
          "eit_results_list"
        ]
      },
      "doc_lineno": 28
    }
  ],
  "_nrv/eit/results/nrv.eit.results.load_res": [],
  "_nrv/eit/results/nrv.eit.results.res_list_from_labels": [],
  "_nrv/eit/results/nrv.eit.results.synchronize_times": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.__init__": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.add_nerve_plot": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.axs": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.boxplot": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.color_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.fig": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.fill_between_all_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.plot_all_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.scale_axs": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.snsplot": [],
  "_nrv/eit/utils/nrv.eit.utils.Figure_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.add_nerve_plot": [],
  "_nrv/eit/utils/nrv.eit.utils.color_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.fill_between_all_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.gen_fig_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.gen_idx_arange": [],
  "_nrv/eit/utils/nrv.eit.utils.get_samples_index": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_all_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_array": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_nerve_nor": [],
  "_nrv/eit/utils/nrv.eit.utils.sample_nerve_results": [],
  "_nrv/eit/utils/nrv.eit.utils.scale_axs": [],
  "_nrv/eit/utils/nrv.eit.utils.thr_window": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.__init__": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.clear_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.compute_field": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_ID_number": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_parameters": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.load": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.load_electrode": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.parameter_model": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.plot": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.rotate": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.save": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.save_electrode": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_ID_number": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_parameters",
        "ref_id": "cuff-mp-electrode-set-parameters",
        "headings": [
          "CUFF_MP_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.translate": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.__init__": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.clear_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.compute_field": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_ID_number": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_parameters": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.load": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.load_electrode": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.parameter_model": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.plot": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.rotate": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.save": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.save_electrode": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_ID_number": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_parameters",
        "ref_id": "cuff-electrode-set-parameters",
        "headings": [
          "CUFF_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.translate": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.__init__": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.build_and_mesh": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.clear": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.close": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.export": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_meshes": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_parameter": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_parameters": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_potentials": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_timers": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.load": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.save": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameter": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameters",
        "ref_id": "comsol-model-set-parameters",
        "headings": [
          "COMSOL_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.solve": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.__init__": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.get_parameters": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.get_timers": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.load": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.save": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.set_parameters",
        "ref_id": "fem-model-set-parameters",
        "headings": [
          "FEM_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.N_electrode": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.N_fascicle": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.__init__": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.add_electrode": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.build_and_mesh": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_meshes": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_potentials": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_timers": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.load": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.load_from_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.remove_fascicles": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reset_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_fascicle": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_nerve": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_outerBox": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.save": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.save_results": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_materials": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_n_proc": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_parameters",
        "ref_id": "fenics-model-set-parameters",
        "headings": [
          "FENICS_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.setup_simulations": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.solve": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_boundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_inboundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_space_of_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_spaces_of_ibound": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.load_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.print_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.print_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.save_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_mesh_file": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_parameters",
        "ref_id": "femparameters-set-parameters",
        "headings": [
          "FEMParameters.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.aline_V": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.clone_res": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.eval": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.load_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.save_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_parameters",
        "ref_id": "femresults-set-parameters",
        "headings": [
          "FEMResults.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.vector": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_boundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_inboundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.compute_conductance": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_domain_potential": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_solver_opt": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_space_of_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_spaces_of_ibound": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_surface": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_timers": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.load_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.print_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.print_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.save_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_mesh_file": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_parameters",
        "ref_id": "femsimulation-set-parameters",
        "headings": [
          "FEMSimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_result_merging": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_solver_opt": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.setup_sim": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solve": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solve_and_save_sim": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solver_info": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.visualize_mesh": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.clear_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_func": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_function_defined": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_isotropic": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_permitive": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.load_material": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.save_material": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_anisotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_conductivity_function": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_isotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_name": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_parameters",
        "ref_id": "f-material-set-parameters",
        "headings": [
          "f_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_permitivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_source": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_func": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_xx": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_yy": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_zz": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.get_fenics_sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.set_parameters",
        "ref_id": "fenics-material-set-parameters",
        "headings": [
          "fenics_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.sigma_fen": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.update_fenics_sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.update_mat": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.clear_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_func": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_function_defined": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_isotropic": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_permitive": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.load_material": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.save_material": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_anisotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_conductivity_function": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_isotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_name": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_parameters",
        "ref_id": "layered-material-set-parameters",
        "headings": [
          "layered_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_permitivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_source": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_func": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_xx": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_yy": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_zz": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMParameters": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMResults": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMSimulation": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.V_from_meshfile": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.closest_point_in_mesh": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.domain_from_meshfile": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.f_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.fenics_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.get_sig_ap": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_f_mat": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_lay_mat": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_sim_res": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.layered_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.load_f_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.mat_from_csv": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.mat_from_interp": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.read_gmsh": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.save_sim_res_list": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.__init__": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_box": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_cone": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_cylinder": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_domains": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_from_cshape": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_line": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_point": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_1D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_2D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_3D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.fragment": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.generate": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_faces": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_info": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_mesh_info": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_obj": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_parameters": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_res": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_volumes": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.load": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.n_core": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.n_domains": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_entities": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_min": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_threshold": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refinement_callback": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.rotate": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.save": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.save_geom": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_chara_blen": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_ncore": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_parameters",
        "ref_id": "mshcreator-set-parameters",
        "headings": [
          "MshCreator.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_res": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_verbosity": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.visualize": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.__init__": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF_MEA": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF_MP": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_LIFE": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_axon": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_box": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_cone": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_cylinder": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_electrode": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_from_cshape": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_line": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_point": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_entity_domain": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_geo": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_mesh": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_1D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_2D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_3D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.fragment": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.generate": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_faces": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_info": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_mesh_info": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_obj": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_parameters": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_volumes": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.load": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.n_core": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.n_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_entities": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_min": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_threshold": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refinement_callback": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.remove_fascicles": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_axon": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_fascicle": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_nerve": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_outerBox": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.rotate": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.save": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.save_geom": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_chara_blen": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_gnd_facet": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_ncore": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_parameters",
        "ref_id": "nervemshcreator-set-parameters",
        "headings": [
          "NerveMshCreator.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_verbosity": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.visualize": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.MshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.NerveMshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.clear_gmsh": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.get_mesh_domid": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.get_node_physical_id": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.is_MshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.is_NerveMshCreator": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.COMSOL_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.FEM_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.FENICS_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.check_sim_dom": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.fenics_utils": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.mesh_creator": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.__init__": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.clear_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.compute_field": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_ID_number": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_parameters": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.load": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.load_electrode": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.plot": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.rotate": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.save": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.save_electrode": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_ID_number": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_parameters",
        "ref_id": "fem-electrode-set-parameters",
        "headings": [
          "FEM_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.translate": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.__init__": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.add_electrode": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.change_stimulus_from_electrode": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.clear_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.compute_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.compute_vext": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.get_parameters": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.is_empty": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.load": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.load_extracel_context": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.plot": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.remove_fascicles": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reset_electrodes": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reset_stimuli": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_fascicle": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_nerve": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_outerBox": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.rotate": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.run_model": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.save": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.save_extracel_context": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_n_proc": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_parameters",
        "ref_id": "fem-stimulation-set-parameters",
        "headings": [
          "FEM_stimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.setup_FEM": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.synchronise_stimuli": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.translate": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.__init__": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.clear_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.compute_field": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_ID_number": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_parameters": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.load": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.load_electrode": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.parameter_model": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.plot": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.rotate": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.save": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.save_electrode": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_ID_number": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_parameters",
        "ref_id": "life-electrode-set-parameters",
        "headings": [
          "LIFE_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.translate": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.__init__": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.clear_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.compute_field": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_ID_number": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_parameters": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.load": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.load_electrode": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.plot": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.rotate": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.save": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.save_electrode": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_ID_number": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/electrode/nrv.fmod.electrode.set_parameters",
        "ref_id": "electrode-set-parameters",
        "headings": [
          "electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/electrode/nrv.fmod.electrode.translate": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.__init__": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.add_electrode": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.change_stimulus_from_electrode": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.clear_electrodes_footprints": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.compute_vext": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.get_parameters": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.is_empty": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.load": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.load_extracel_context": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.plot": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.reset_electrodes": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.reset_stimuli": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.rotate": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.save": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.save_extracel_context": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_electrodes_footprints": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_parameters",
        "ref_id": "extracellular-context-set-parameters",
        "headings": [
          "extracellular_context.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.synchronise_stimuli": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.translate": [],
  "_nrv/fmod/material/nrv.fmod.material.__init__": [],
  "_nrv/fmod/material/nrv.fmod.material.clear_frequency": [],
  "_nrv/fmod/material/nrv.fmod.material.get_parameters": [],
  "_nrv/fmod/material/nrv.fmod.material.is_isotropic": [],
  "_nrv/fmod/material/nrv.fmod.material.is_permitive": [],
  "_nrv/fmod/material/nrv.fmod.material.load": [],
  "_nrv/fmod/material/nrv.fmod.material.load_material": [],
  "_nrv/fmod/material/nrv.fmod.material.save": [],
  "_nrv/fmod/material/nrv.fmod.material.save_material": [],
  "_nrv/fmod/material/nrv.fmod.material.set_anisotropic_conductivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_frequency": [],
  "_nrv/fmod/material/nrv.fmod.material.set_isotropic_conductivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_name": [],
  "_nrv/fmod/material/nrv.fmod.material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/material/nrv.fmod.material.set_parameters",
        "ref_id": "material-set-parameters",
        "headings": [
          "material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/material/nrv.fmod.material.set_permitivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_source": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_xx": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_yy": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_zz": [],
  "_nrv/fmod/nrv.fmod.CUFF_MP_electrode": [],
  "_nrv/fmod/nrv.fmod.CUFF_electrode": [],
  "_nrv/fmod/nrv.fmod.FEM": [],
  "_nrv/fmod/nrv.fmod.FEM_electrode": [],
  "_nrv/fmod/nrv.fmod.FEM_stimulation": [],
  "_nrv/fmod/nrv.fmod.LIFE_electrode": [],
  "_nrv/fmod/nrv.fmod.NodeD_interpol": [],
  "_nrv/fmod/nrv.fmod.check_electrodes_overlap": [],
  "_nrv/fmod/nrv.fmod.compute_effective_conductivity": [],
  "_nrv/fmod/nrv.fmod.electrode": [],
  "_nrv/fmod/nrv.fmod.extracellular_context": [],
  "_nrv/fmod/nrv.fmod.get_mat_file_as_dict": [],
  "_nrv/fmod/nrv.fmod.is_CUFF_electrode": [],
  "_nrv/fmod/nrv.fmod.is_FEM_electrode": [],
  "_nrv/fmod/nrv.fmod.is_FEM_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_LIFE_electrode": [],
  "_nrv/fmod/nrv.fmod.is_analytical_electrode": [],
  "_nrv/fmod/nrv.fmod.is_analytical_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_mat": [],
  "_nrv/fmod/nrv.fmod.is_recorder": [],
  "_nrv/fmod/nrv.fmod.is_recording_point": [],
  "_nrv/fmod/nrv.fmod.load_any_electrode": [],
  "_nrv/fmod/nrv.fmod.load_any_extracel_context": [],
  "_nrv/fmod/nrv.fmod.load_material": [],
  "_nrv/fmod/nrv.fmod.material": [],
  "_nrv/fmod/nrv.fmod.point_source_electrode": [],
  "_nrv/fmod/nrv.fmod.recorder": [],
  "_nrv/fmod/nrv.fmod.recording_point": [],
  "_nrv/fmod/nrv.fmod.stimulation": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.__init__": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.clear_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.compute_field": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.compute_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_ID_number": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_parameters": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.load": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.load_electrode": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.plot": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.rotate": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.save": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.save_electrode": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_ID_number": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_parameters",
        "ref_id": "point-source-electrode-set-parameters",
        "headings": [
          "point_source_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.translate": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.__init__": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.add_axon_contribution": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.add_recording_point": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.compute_footprints": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.gather_all_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.get_parameters": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.init_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.is_empty": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.load": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.load_recorder": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.plot": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.reset_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.rotate": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.save": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.save_recorder": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/recorder/nrv.fmod.recorder.set_parameters",
        "ref_id": "recorder-set-parameters",
        "headings": [
          "recorder.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_point": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_volume": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_yplane": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_zplane": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_time": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.translate": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.__init__": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.add_axon_contribution": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_LSA_isotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_PSA_anisotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_PSA_isotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_ID": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_method": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_parameters": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.init_recording": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.load": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.load_recording_point": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.reset_recording": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.rotate": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.save": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.save_recording_point": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_method": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_parameters",
        "ref_id": "recording-point-set-parameters",
        "headings": [
          "recording_point.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.translate": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.__init__": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.add_electrode": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.change_stimulus_from_electrode": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.clear_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.compute_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.compute_vext": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.get_parameters": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.is_empty": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.load": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.load_extracel_context": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.plot": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.reset_electrodes": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.reset_stimuli": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.rotate": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.save": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.save_extracel_context": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_parameters",
        "ref_id": "stimulation-set-parameters",
        "headings": [
          "stimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.synchronise_stimuli": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.translate": [],
  "_nrv/nmod/axon/nrv.nmod.axon.__init__": [],
  "_nrv/nmod/axon/nrv.nmod.axon.attach_extracellular_recorder": [],
  "_nrv/nmod/axon/nrv.nmod.axon.attach_extracellular_stimulation": [],
  "_nrv/nmod/axon/nrv.nmod.axon.change_stimulus_from_electrode": [],
  "_nrv/nmod/axon/nrv.nmod.axon.clear_I_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.clear_V_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.extracel_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_ionic_current": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_capacitance": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_conductance": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_current": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_voltage": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_parameters": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_particules_values": [],
  "_nrv/nmod/axon/nrv.nmod.axon.has_FEM_extracel": [],
  "_nrv/nmod/axon/nrv.nmod.axon.insert_I_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.insert_V_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.intracel_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.load": [],
  "_nrv/nmod/axon/nrv.nmod.axon.load_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.plot": [],
  "_nrv/nmod/axon/nrv.nmod.axon.rec_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.save": [],
  "_nrv/nmod/axon/nrv.nmod.axon.save_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_conductance_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_ionic_current_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_membrane_current_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_membrane_voltage_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/axon/nrv.nmod.axon.set_parameters",
        "ref_id": "axon-set-parameters",
        "headings": [
          "axon.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/axon/nrv.nmod.axon.set_particules_values_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.shut_recorder_down": [],
  "_nrv/nmod/axon/nrv.nmod.axon.simulate": [],
  "_nrv/nmod/axon/nrv.nmod.axon.topology": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.__init__": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.add_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.axon_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.check_placement": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_masks": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_population_placement": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population_from_stat": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.fill_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_NoR_position_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_from_deprected_fascicle": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_ligned_NoR_position": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_random_NoR_position": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_parameters": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_ppop_info": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_sub_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_geom": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_node_shift": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_placed_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.hist": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.iloc": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.load": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.n_ax": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.n_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.place_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.place_population_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.placed_id": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.plot": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.reshape_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.rotate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.save": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_parameters",
        "ref_id": "axon-population-set-parameters",
        "headings": [
          "axon_population.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.translate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.valid_mask_labels": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.A": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.N": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.__init__": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.add_sim_mask": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.attach_extracellular_recorder": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.attach_extracellular_stimulation": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.center": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.change_stimulus_from_electrode": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.clear_I_clamp": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.clear_context": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.compute_electrodes_footprints": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.d": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.define_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.define_length": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.extracel_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fill": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fill_with_population": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fit_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.generate_ligned_NoR_position": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.generate_random_NoR_position": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.geom": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_axons_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_electrodes_footprints_on_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.has_FEM_extracel": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.import_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.insert_I_Clamp": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.intracel_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.load": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.n_ax": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.plot": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.plot_x": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.radius": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rec_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_axons_electrode_overlap": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_axons_size_threshold": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_myelinated_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_sim_masks": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_unmyelinated_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate_fascicle": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.save": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.save_path": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_ID": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_axons_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_geometry": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_parameters",
        "ref_id": "fascicle-set-parameters",
        "headings": [
          "fascicle.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.shut_recorder_down": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.sim_axon": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.simulate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate_fascicle": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.verbose": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.y": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.y_grav_center": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.z": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.z_grav_center": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.__init__": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.attach_extracellular_recorder": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.attach_extracellular_stimulation": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.change_stimulus_from_electrode": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.clear_I_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.clear_V_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.extracel_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_Nav_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_ionic_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_ionic_current": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_capacitance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_current": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_voltage": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_myelin_capacitance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_myelin_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_parameters": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_particles_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_particules_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.has_FEM_extracel": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_I_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_I_Clamp_node": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_V_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_V_Clamp_node": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.intracel_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.load": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.load_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.n_nodes": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.plot": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.rec_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.save": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.save_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_Markov_Nav": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_Nav_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_conductance_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_ionic_current_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_membrane_current_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_membrane_voltage_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_parameters",
        "ref_id": "myelinated-set-parameters",
        "headings": [
          "myelinated.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_particules_values_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.shut_recorder_down": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.simulate": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.topology": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.__init__": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.add_fascicle": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.attach_extracellular_recorder": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.attach_extracellular_stimulation": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.change_stimulus_from_electrode": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.clear_I_clamp": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.clear_context": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.compute_electrodes_footprints": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_ellipsoid_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_length": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.extracel_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.fit_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_axons_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_fascicles": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_n_ax": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.has_FEM_extracel": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.import_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.insert_I_Clamp": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.intracel_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.load": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.n_ax": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.n_fasc": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.plot": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.rec_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.save": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_ID": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_axons_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/nerve/nrv.nmod.nerve.set_parameters",
        "ref_id": "nerve-set-parameters",
        "headings": [
          "nerve.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/nerve/nrv.nmod.nerve.shut_recorder_down": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.simulate": [],
  "_nrv/nmod/nrv.nmod.axon": [],
  "_nrv/nmod/nrv.nmod.axon_population": [],
  "_nrv/nmod/nrv.nmod.fascicle": [],
  "_nrv/nmod/nrv.nmod.myelinated": [],
  "_nrv/nmod/nrv.nmod.nerve": [],
  "_nrv/nmod/nrv.nmod.results": [],
  "_nrv/nmod/nrv.nmod.unmyelinated": [],
  "_nrv/nmod/nrv.nmod.utils": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.APs_in_timeframe": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.APs_reached_end": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.__init__": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.block": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.block_summary": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.check_test_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.clear": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.colormap_plot": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.compute_f_mem": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.copy": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.count_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.detect_AP_collisions": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.detect_start_extrastim": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.extra_stim_properties": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.filter_freq": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.find_central_index": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.fromkeys": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.generate_axon": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.getAPspeed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_AP_downward_len": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_AP_upward_len": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_axon_xrec": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_collision_pts": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_interAPs_collision": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_material": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_parameters": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_start_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_start_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_xmax_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_xmin_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.has_AP_reached_end": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_blocked": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_dummy": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_empty": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_recruited": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.items": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.keys": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.linfit_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.load": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.plot_stim": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.plot_x_t": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.pop": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.popitem": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.raster_plot": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.rasterize": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.remove_key": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.save": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.set_parameters",
        "ref_id": "axon-results-set-parameters",
        "headings": [
          "axon_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.setdefault": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.speed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.split_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.to_save": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.update": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.values": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.__init__": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.clear": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.copy": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.filter_freq": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.fromkeys": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.geom": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_axons_key": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_block_summary": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_block_summary_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_n_ax": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_parameters": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons_greater_than": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons_lesser_than": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.is_dummy": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.is_empty": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.items": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.keys": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.load": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.n_ax": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_block_summary": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_recruited_fibers": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_stim": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.pop": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.popitem": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.remove_key": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.save": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.set_parameters",
        "ref_id": "fascicle-results-set-parameters",
        "headings": [
          "fascicle_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.setdefault": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.to_save": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.update": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.values": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.APs_in_timeframe": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.APs_reached_end": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.__init__": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.block": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.block_summary": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.check_test_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.clear": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.colormap_plot": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.compute_f_mem": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.copy": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.count_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.detect_AP_collisions": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.detect_start_extrastim": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.extra_stim_properties": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.filter_freq": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.find_central_index": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.find_central_node_coordinate": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.fromkeys": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.generate_axon": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.getAPspeed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_AP_downward_len": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_AP_upward_len": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_axon_xrec": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_collision_pts": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_index_myelinated_sequence": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_interAPs_collision": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_material": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_myelin_properties": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_parameters": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_start_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_start_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_xmax_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_xmin_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.has_AP_reached_end": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_blocked": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_dummy": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_empty": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_recruited": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.items": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.keys": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.linfit_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.load": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_Nav_states": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_stim": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_x_t": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_x_t_all_seq": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.pop": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.popitem": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.raster_plot": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.rasterize": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.remove_key": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.save": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.set_parameters",
        "ref_id": "myelinated-results-set-parameters",
        "headings": [
          "myelinated_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.setdefault": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.speed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.split_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.to_save": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.update": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.values": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.__init__": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons_pop_properties": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons_type": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.clear": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.copy": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fasc_geometries": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fasc_properties": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fascicle_keys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.filter_freq": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fromkeys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_axon_results": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_fascicle_key": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_fascicle_results": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_parameters": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_recruited_axons": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.is_dummy": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.is_empty": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.items": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.keys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.load": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.n_ax": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.n_fasc": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.plot_recruited_fibers": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.plot_stim": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.pop": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.popitem": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.remove_key": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.save": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.set_parameters",
        "ref_id": "nerve-results-set-parameters",
        "headings": [
          "nerve_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.setdefault": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.to_save": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.update": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.values": [],
  "_nrv/nmod/results/nrv.nmod.results.axon_results": [],
  "_nrv/nmod/results/nrv.nmod.results.fascicle_results": [],
  "_nrv/nmod/results/nrv.nmod.results.myelinated_results": [],
  "_nrv/nmod/results/nrv.nmod.results.nerve_results": [],
  "_nrv/nmod/results/nrv.nmod.results.unmyelinated_results": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.APs_in_timeframe": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.APs_reached_end": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.__init__": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.block": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.block_summary": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.check_test_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.clear": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.colormap_plot": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.compute_f_mem": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.copy": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.count_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.detect_AP_collisions": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.detect_start_extrastim": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.extra_stim_properties": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.filter_freq": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.find_central_index": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.fromkeys": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.generate_axon": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.getAPspeed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_AP_downward_len": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_AP_upward_len": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_axon_xrec": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_collision_pts": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_interAPs_collision": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_material": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_parameters": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_start_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_start_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_xmax_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_xmin_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.has_AP_reached_end": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_blocked": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_dummy": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_empty": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_recruited": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.items": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.keys": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.linfit_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.load": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.plot_stim": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.plot_x_t": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.pop": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.popitem": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.raster_plot": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.rasterize": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.remove_key": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.save": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.set_parameters",
        "ref_id": "unmyelinated-results-set-parameters",
        "headings": [
          "unmyelinated_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.setdefault": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.speed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.split_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.to_save": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.update": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.__init__": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.attach_extracellular_recorder": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.attach_extracellular_stimulation": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.change_stimulus_from_electrode": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.clear_I_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.clear_V_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.extracel_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_ionic_conductance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_ionic_current": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_capacitance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_conductance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_current": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_voltage": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_parameters": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_particles_values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_particules_values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.has_FEM_extracel": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.insert_I_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.insert_V_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.intracel_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.load": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.load_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.plot": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.rec_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.save": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.save_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_conductance_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_ionic_current_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_membrane_current_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_membrane_voltage_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_parameters",
        "ref_id": "unmyelinated-set-parameters",
        "headings": [
          "unmyelinated.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_particules_values_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.shut_recorder_down": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.simulate": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.topology": [],
  "_nrv/nmod/utils/Placer/nrv.nmod.utils.Placer.__init__": [],
  "_nrv/nmod/utils/Placer/nrv.nmod.utils.Placer.place_all": [],
  "_nrv/nmod/utils/nrv.nmod.utils.Placer": [],
  "_nrv/nmod/utils/nrv.nmod.utils.axon_packer": [],
  "_nrv/nmod/utils/nrv.nmod.utils.create_axon_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.dist_matrix": [],
  "_nrv/nmod/utils/nrv.nmod.utils.expand_pop": [],
  "_nrv/nmod/utils/nrv.nmod.utils.fill_area_with_axons": [],
  "_nrv/nmod/utils/nrv.nmod.utils.get_circular_contour": [],
  "_nrv/nmod/utils/nrv.nmod.utils.get_ppop_info": [],
  "_nrv/nmod/utils/nrv.nmod.utils.load_axon_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.load_stat": [],
  "_nrv/nmod/utils/nrv.nmod.utils.plot_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.remove_collision": [],
  "_nrv/nmod/utils/nrv.nmod.utils.remove_outlier_axons": [],
  "_nrv/nmod/utils/nrv.nmod.utils.save_axon_population": [],
  "_nrv/nrv.backend": [],
  "_nrv/nrv.eit": [],
  "_nrv/nrv.fmod": [],
  "_nrv/nrv.nmod": [],
  "_nrv/nrv.optim": [],
  "_nrv/nrv.ui": [],
  "_nrv/nrv.utils": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.__init__": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.get_parameters": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.load": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.minimize": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.save": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/Optimizer/nrv.optim.Optimizer.set_parameters",
        "ref_id": "optimizer-set-parameters",
        "headings": [
          "Optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.__init__": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.get_parameters": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.load": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.minimize": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.save": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.set_parameters",
        "ref_id": "pso-optimizer-set-parameters",
        "headings": [
          "PSO_optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/Problem/nrv.optim.Problem.__init__": [],
  "_nrv/optim/Problem/nrv.optim.Problem.autoset_optimizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.compute_cost": [],
  "_nrv/optim/Problem/nrv.optim.Problem.context_and_cost": [],
  "_nrv/optim/Problem/nrv.optim.Problem.costfunction": [],
  "_nrv/optim/Problem/nrv.optim.Problem.get_parameters": [],
  "_nrv/optim/Problem/nrv.optim.Problem.load": [],
  "_nrv/optim/Problem/nrv.optim.Problem.optimizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.optmizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.save": [],
  "_nrv/optim/Problem/nrv.optim.Problem.set_multiprocess_type": [],
  "_nrv/optim/Problem/nrv.optim.Problem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/Problem/nrv.optim.Problem.set_parameters",
        "ref_id": "problem-set-parameters",
        "headings": [
          "Problem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.__init__": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.get_parameters": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.get_sim_results": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.is_m_proc_func": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.load": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.save": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_context_modifier": [
    {
      "source": ">>> context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:",
      "names": [],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_context_modifier",
        "ref_id": "cost-function-set-context-modifier",
        "headings": [
          "cost_function.set_context_modifier"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_cost_evaluation": [
    {
      "source": ">>> cost_evaluation(results: sim_results, **kwargs) -> float:",
      "names": [],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_cost_evaluation",
        "ref_id": "cost-function-set-cost-evaluation",
        "headings": [
          "cost_function.set_cost_evaluation"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_parameters",
        "ref_id": "cost-function-set-parameters",
        "headings": [
          "cost_function.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_static_context": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.simulate_context": [],
  "_nrv/optim/nrv.optim.Optimizer": [],
  "_nrv/optim/nrv.optim.PSO_optimizer": [],
  "_nrv/optim/nrv.optim.Problem": [],
  "_nrv/optim/nrv.optim.cost_function": [
    {
      "source": ">>> context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:",
      "names": [],
      "example": {
        "document": "_nrv/optim/nrv.optim.cost_function",
        "ref_id": "cost-function",
        "headings": [
          "cost_function"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ">>> cost_evaluation(results: sim_results, **kwargs) -> float:",
      "names": [],
      "example": {
        "document": "_nrv/optim/nrv.optim.cost_function",
        "ref_id": "cost-function",
        "headings": [
          "cost_function"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/nrv.optim.optim_utils": [],
  "_nrv/optim/nrv.optim.scipy_optimizer": [
    {
      "source": ">>> import nrv\n>>> my_cost1 = nrv.sphere()\n>>> my_opt = nrv.scipy_optimizer(dimension=2, x0= [100, 10], maxiter=10)\n>>> res = my_opt.minimize(my_cost1)\n>>> print(\"best position\",res.x, \"best cost\", res.best_cost)",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "sphere"
          ],
          "code_str": "nrv.sphere",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "sphere",
            "()"
          ],
          "code_str": "my_cost1",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer"
          ],
          "code_str": "nrv.scipy_optimizer",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.scipy_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer",
            "()"
          ],
          "code_str": "my_opt",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.scipy_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "sphere",
            "()"
          ],
          "code_str": "my_cost1",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer",
            "()",
            "minimize",
            "()"
          ],
          "code_str": "res",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/nrv.optim.scipy_optimizer",
        "ref_id": "scipy-optimizer",
        "headings": [
          "scipy_optimizer"
        ]
      },
      "doc_lineno": 59
    }
  ],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.load": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.save": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.set_parameters",
        "ref_id": "biphasic-stimulus-cm-set-parameters",
        "headings": [
          "biphasic_stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.__init__": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.call_method": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.compute_stimulus_cost": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.get_parameters": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.load": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.save": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.set_parameters",
        "ref_id": "charge-quantity-ce-set-parameters",
        "headings": [
          "charge_quantity_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.__init__": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.get_parameters": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.load": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.save": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.set_parameters",
        "ref_id": "context-modifier-set-parameters",
        "headings": [
          "context_modifier.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.load": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.save": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.set_parameters",
        "ref_id": "harmonic-stimulus-cm-set-parameters",
        "headings": [
          "harmonic_stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.__init__": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.get_parameters": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.interpolate": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.load": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.save": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.set_parameters",
        "ref_id": "harmonic-stimulus-with-pw-cm-set-parameters",
        "headings": [
          "harmonic_stimulus_with_pw_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.biphasic_stimulus_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.charge_quantity_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.context_modifier": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.cost_position_saver": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.harmonic_stimulus_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate_Npts": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate_amp": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.optim_results": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.raster_count_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.recrutement_count_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.stim_energy_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.stimulus_CM": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.__init__": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.add_filter": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.clear": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.compute_best_pos": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.copy": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.findbestpart": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.fromkeys": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.get": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.get_parameters": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_dummy": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_empty": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_stabilized": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.items": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.keys": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.load": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.plot_cost_history": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.pop": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.popitem": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.remove_key": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.save": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.set_parameters",
        "ref_id": "optim-results-set-parameters",
        "headings": [
          "optim_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.setdefault": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.stabilization_it": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.to_save": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.update": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.values": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.__init__": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.call_method": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.get_parameters": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.load": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.save": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.set_parameters",
        "ref_id": "raster-count-ce-set-parameters",
        "headings": [
          "raster_count_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.__init__": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.call_method": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.count_axon_activation": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.count_fascicle_activation": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.get_parameters": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.load": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.save": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.set_parameters",
        "ref_id": "recrutement-count-ce-set-parameters",
        "headings": [
          "recrutement_count_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.__init__": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.call_method": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.compute_stimulus_cost": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.get_parameters": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.load": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.save": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.set_parameters",
        "ref_id": "stim-energy-ce-set-parameters",
        "headings": [
          "stim_energy_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.load": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.save": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.set_parameters",
        "ref_id": "stimulus-cm-set-parameters",
        "headings": [
          "stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.stimulus_generator": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.__init__": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.get_parameters": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.load": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.minimize": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.save": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.set_parameters",
        "ref_id": "scipy-optimizer-set-parameters",
        "headings": [
          "scipy_optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/ui/nrv.ui.AP_detection": [],
  "_nrv/ui/nrv.ui.CAP_time_detection": [],
  "_nrv/ui/nrv.ui.axon_AP_threshold": [],
  "_nrv/ui/nrv.ui.axon_block_threshold": [],
  "_nrv/ui/nrv.ui.axon_state": [],
  "_nrv/ui/nrv.ui.block": [],
  "_nrv/ui/nrv.ui.blocking_threshold_from_axon": [],
  "_nrv/ui/nrv.ui.blocking_threshold_point_source": [],
  "_nrv/ui/nrv.ui.check_test_AP": [],
  "_nrv/ui/nrv.ui.compute_f_mem": [],
  "_nrv/ui/nrv.ui.count_spike": [],
  "_nrv/ui/nrv.ui.default_PP": [],
  "_nrv/ui/nrv.ui.detect_start_extrastim": [],
  "_nrv/ui/nrv.ui.extra_stim_properties": [],
  "_nrv/ui/nrv.ui.fascicular_state": [],
  "_nrv/ui/nrv.ui.filter_freq": [],
  "_nrv/ui/nrv.ui.find_central_node_index": [],
  "_nrv/ui/nrv.ui.firing_threshold_from_axon": [],
  "_nrv/ui/nrv.ui.firing_threshold_point_source": [],
  "_nrv/ui/nrv.ui.generate_axon_from_results": [],
  "_nrv/ui/nrv.ui.get_index_myelinated_sequence": [],
  "_nrv/ui/nrv.ui.get_myelin_properties": [],
  "_nrv/ui/nrv.ui.is_blocked": [],
  "_nrv/ui/nrv.ui.is_recruited": [],
  "_nrv/ui/nrv.ui.load_axon": [],
  "_nrv/ui/nrv.ui.load_fascicle": [],
  "_nrv/ui/nrv.ui.load_nerve": [],
  "_nrv/ui/nrv.ui.ls_axons_results": [],
  "_nrv/ui/nrv.ui.ls_csv": [],
  "_nrv/ui/nrv.ui.max_spike_position": [],
  "_nrv/ui/nrv.ui.mesh_from_electrode": [],
  "_nrv/ui/nrv.ui.mesh_from_extracellular_context": [],
  "_nrv/ui/nrv.ui.mesh_from_fascicle": [],
  "_nrv/ui/nrv.ui.mesh_from_nerve": [],
  "_nrv/ui/nrv.ui.plot_Nav_states": [],
  "_nrv/ui/nrv.ui.plot_fasc_state": [],
  "_nrv/ui/nrv.ui.raster_plot": [],
  "_nrv/ui/nrv.ui.rasterize": [],
  "_nrv/ui/nrv.ui.remove_key": [],
  "_nrv/ui/nrv.ui.remove_non_NoR_zones": [],
  "_nrv/ui/nrv.ui.rm_file": [],
  "_nrv/ui/nrv.ui.rm_sim_dir": [],
  "_nrv/ui/nrv.ui.rm_sim_dir_from_results": [],
  "_nrv/ui/nrv.ui.rmv_keys": [],
  "_nrv/ui/nrv.ui.sample_g_mem": [],
  "_nrv/ui/nrv.ui.sample_keys": [],
  "_nrv/ui/nrv.ui.search_threshold_dispatcher": [],
  "_nrv/ui/nrv.ui.speed": [],
  "_nrv/ui/nrv.ui.update_fascicle_file": [],
  "_nrv/ui/nrv.ui.vmem_plot": [],
  "_nrv/utils/Id/nrv.utils.Id.__init__": [],
  "_nrv/utils/Id/nrv.utils.Id.call_method": [],
  "_nrv/utils/Id/nrv.utils.Id.get_parameters": [],
  "_nrv/utils/Id/nrv.utils.Id.load": [],
  "_nrv/utils/Id/nrv.utils.Id.save": [],
  "_nrv/utils/Id/nrv.utils.Id.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/Id/nrv.utils.Id.set_parameters",
        "ref_id": "id-set-parameters",
        "headings": [
          "Id.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.__init__": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.call_method": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.get_parameters": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.load": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.save": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_function": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_parameters",
        "ref_id": "meshcallback-set-parameters",
        "headings": [
          "MeshCallBack.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/ackley/nrv.utils.ackley.__init__": [],
  "_nrv/utils/ackley/nrv.utils.ackley.call_method": [],
  "_nrv/utils/ackley/nrv.utils.ackley.get_parameters": [],
  "_nrv/utils/ackley/nrv.utils.ackley.load": [],
  "_nrv/utils/ackley/nrv.utils.ackley.save": [],
  "_nrv/utils/ackley/nrv.utils.ackley.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/ackley/nrv.utils.ackley.set_parameters",
        "ref_id": "ackley-set-parameters",
        "headings": [
          "ackley.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/beale/nrv.utils.beale.__init__": [],
  "_nrv/utils/beale/nrv.utils.beale.call_method": [],
  "_nrv/utils/beale/nrv.utils.beale.get_parameters": [],
  "_nrv/utils/beale/nrv.utils.beale.load": [],
  "_nrv/utils/beale/nrv.utils.beale.save": [],
  "_nrv/utils/beale/nrv.utils.beale.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/beale/nrv.utils.beale.set_parameters",
        "ref_id": "beale-set-parameters",
        "headings": [
          "beale.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/booth/nrv.utils.booth.__init__": [],
  "_nrv/utils/booth/nrv.utils.booth.call_method": [],
  "_nrv/utils/booth/nrv.utils.booth.get_parameters": [],
  "_nrv/utils/booth/nrv.utils.booth.load": [],
  "_nrv/utils/booth/nrv.utils.booth.save": [],
  "_nrv/utils/booth/nrv.utils.booth.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/booth/nrv.utils.booth.set_parameters",
        "ref_id": "booth-set-parameters",
        "headings": [
          "booth.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/bukin6/nrv.utils.bukin6.__init__": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.call_method": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.get_parameters": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.load": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.save": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/bukin6/nrv.utils.bukin6.set_parameters",
        "ref_id": "bukin6-set-parameters",
        "headings": [
          "bukin6.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.__init__": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.call_method": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.get_parameters": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.load": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.save": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.set_parameters",
        "ref_id": "cost-evaluation-set-parameters",
        "headings": [
          "cost_evaluation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_1D/nrv.utils.function_1D.__init__": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.call_method": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.get_parameters": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.load": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.save": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_1D/nrv.utils.function_1D.set_parameters",
        "ref_id": "function-1d-set-parameters",
        "headings": [
          "function_1D.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_2D/nrv.utils.function_2D.__init__": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.call_method": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.get_parameters": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.load": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.save": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_2D/nrv.utils.function_2D.set_parameters",
        "ref_id": "function-2d-set-parameters",
        "headings": [
          "function_2D.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_ND/nrv.utils.function_ND.__init__": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.call_method": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.get_parameters": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.load": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.save": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_ND/nrv.utils.function_ND.set_parameters",
        "ref_id": "function-nd-set-parameters",
        "headings": [
          "function_ND.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/gate/nrv.utils.gate.__init__": [],
  "_nrv/utils/gate/nrv.utils.gate.call_method": [],
  "_nrv/utils/gate/nrv.utils.gate.get_parameters": [],
  "_nrv/utils/gate/nrv.utils.gate.load": [],
  "_nrv/utils/gate/nrv.utils.gate.save": [],
  "_nrv/utils/gate/nrv.utils.gate.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/gate/nrv.utils.gate.set_parameters",
        "ref_id": "gate-set-parameters",
        "headings": [
          "gate.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/gaussian/nrv.utils.gaussian.__init__": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.call_method": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.get_parameters": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.load": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.save": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/gaussian/nrv.utils.gaussian.set_parameters",
        "ref_id": "gaussian-set-parameters",
        "headings": [
          "gaussian.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.__init__": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.area": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.bbox": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.bbox_size": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_parameters": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_point_inside": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_trace": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.is_inside": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.load": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.perimeter": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.plot": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.plot_bbox": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.rotate": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.save": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.set_parameters",
        "ref_id": "cshape-set-parameters",
        "headings": [
          "CShape.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.translate": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.x": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.y": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.z": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.__init__": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.area": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.bbox": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.bbox_size": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.c": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_parameters": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_point_inside": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_trace": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.is_inside": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.is_rot": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.load": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.perimeter": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.plot": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.plot_bbox": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.r": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rot_mat": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rot_mat_inverse": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rotate": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.save": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.set_parameters",
        "ref_id": "circle-set-parameters",
        "headings": [
          "Circle.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.translate": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.x": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.y": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.z": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.__init__": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.area": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.bbox": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.bbox_size": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.c": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_parameters": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_point_inside": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_trace": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.is_inside": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.is_rot": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.load": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.perimeter": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.plot": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.plot_bbox": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.r": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rot_mat": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rot_mat_inverse": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rotate": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.save": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.set_parameters",
        "ref_id": "ellipse-set-parameters",
        "headings": [
          "Ellipse.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.translate": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.x": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.y": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.z": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.__init__": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.area": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.bbox": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.bbox_size": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.c": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_parameters": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_point_inside": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_trace": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.is_inside": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.load": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.n_gon": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.perimeter": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.plot": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.plot_bbox": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.rotate": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.save": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.set_parameters",
        "ref_id": "polygon-set-parameters",
        "headings": [
          "Polygon.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.shp_poly": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.translate": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.x": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.y": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.z": [],
  "_nrv/utils/geom/nrv.utils.geom.CShape": [],
  "_nrv/utils/geom/nrv.utils.geom.Circle": [],
  "_nrv/utils/geom/nrv.utils.geom.Ellipse": [],
  "_nrv/utils/geom/nrv.utils.geom.Polygon": [],
  "_nrv/utils/geom/nrv.utils.geom.circle_overlap_checker": [],
  "_nrv/utils/geom/nrv.utils.geom.create_cshape": [],
  "_nrv/utils/geom/nrv.utils.geom.cshape_overlap_checker": [],
  "_nrv/utils/geom/nrv.utils.geom.get_cshape_bbox": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.__init__": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.call_method": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.get_parameters": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.load": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.save": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.set_parameters",
        "ref_id": "goldstein-price-set-parameters",
        "headings": [
          "goldstein_price.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv.utils.Id": [],
  "_nrv/utils/nrv.utils.MeshCallBack": [],
  "_nrv/utils/nrv.utils.ackley": [],
  "_nrv/utils/nrv.utils.beale": [],
  "_nrv/utils/nrv.utils.booth": [],
  "_nrv/utils/nrv.utils.bukin6": [],
  "_nrv/utils/nrv.utils.compute_complex_admitance": [],
  "_nrv/utils/nrv.utils.convert": [
    {
      "source": ">>> import nrv\n>>> val_S_m = 0.2 # S/m**2\n>>> nrv.convert(val_S_m, nrv.S/nrv.m**2, nrv.S/nrv.cm**2)\n2e-05\n>>> nrv.convert(val_S_m, \"S/m**2\", \"S/cm**2\")\n2e-05",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.convert",
        "ref_id": "convert",
        "headings": [
          "convert"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.cost_evaluation": [],
  "_nrv/utils/nrv.utils.datfile_2_stim": [],
  "_nrv/utils/nrv.utils.distance_point2line": [],
  "_nrv/utils/nrv.utils.distance_point2point": [],
  "_nrv/utils/nrv.utils.from_nrv_unit": [
    {
      "source": ">>> import nrv\n>>> val_default = 4530 # um\n>>> val_default / nrv.mm\n4.53\n>>> nrv.from_nrv_unit(val_default, nrv.mm)\n4.53\n>>> nrv.from_nrv_unit(val_default, \"mm\")\n4.53",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.from_nrv_unit",
        "ref_id": "from-nrv-unit",
        "headings": [
          "from_nrv_unit"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.function_1D": [],
  "_nrv/utils/nrv.utils.function_2D": [],
  "_nrv/utils/nrv.utils.function_ND": [],
  "_nrv/utils/nrv.utils.gate": [],
  "_nrv/utils/nrv.utils.gaussian": [],
  "_nrv/utils/nrv.utils.geom": [],
  "_nrv/utils/nrv.utils.get_MRG_parameters": [
    {
      "source": ">>> print(nrv.MRG_data)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.get_MRG_parameters",
        "ref_id": "get-mrg-parameters",
        "headings": [
          "get_MRG_parameters"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.get_equal_timing_copies": [],
  "_nrv/utils/nrv.utils.get_length_from_nodes": [],
  "_nrv/utils/nrv.utils.get_perineurial_thickness": [],
  "_nrv/utils/nrv.utils.goldstein_price": [],
  "_nrv/utils/nrv.utils.in_tol": [],
  "_nrv/utils/nrv.utils.is_stim": [],
  "_nrv/utils/nrv.utils.membrane_capacitance_from_model": [],
  "_nrv/utils/nrv.utils.nearest_greater_idx": [],
  "_nrv/utils/nrv.utils.nearest_idx": [],
  "_nrv/utils/nrv.utils.nrv_function": [],
  "_nrv/utils/nrv.utils.nrv_interp": [],
  "_nrv/utils/nrv.utils.print_default_nrv_unit": [],
  "_nrv/utils/nrv.utils.rastrigin": [],
  "_nrv/utils/nrv.utils.rosenbock": [],
  "_nrv/utils/nrv.utils.sci_round": [],
  "_nrv/utils/nrv.utils.set_common_time_series": [],
  "_nrv/utils/nrv.utils.sphere": [],
  "_nrv/utils/nrv.utils.stimulus": [],
  "_nrv/utils/nrv.utils.to_nrv_unit": [
    {
      "source": ">>> import nrv\n>>> val_MHz = 0.12 # MHz\n>>> val_MHz * nrv.MHz\n120.0\n>>> nrv.to_nrv_unit(val_MHz, nrv.MHz)\n120.0\n>>> nrv.to_nrv_unit(val_MHz, \"MHz\")\n120.0",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.to_nrv_unit",
        "ref_id": "to-nrv-unit",
        "headings": [
          "to_nrv_unit"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ">>> import numpy as np\n>>> vals_s = [[1, 2, 3], [4, 5, 6]]  # s\n>>> nrv.to_nrv_unit(vals_s, nrv.s)  # ms\n[[1000.0, 2000.0, 3000.0], [4000.0, 5000.0, 6000.0]]\n>>> nrv.to_nrv_unit(np.array(vals_s), nrv.s)  # ms\narray([[1000., 2000., 3000.],\n    [4000., 5000., 6000.]])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.to_nrv_unit",
        "ref_id": "to-nrv-unit",
        "headings": [
          "to_nrv_unit"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.__init__": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.call_method": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.get_parameters": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.load": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.save": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv_function/nrv.utils.nrv_function.set_parameters",
        "ref_id": "nrv-function-set-parameters",
        "headings": [
          "nrv_function.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.__init__": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.call_method": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.get_parameters": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.load": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.save": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.set_parameters",
        "ref_id": "nrv-interp-set-parameters",
        "headings": [
          "nrv_interp.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.update_interpolator": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.__init__": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.call_method": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.get_parameters": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.load": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.save": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/rastrigin/nrv.utils.rastrigin.set_parameters",
        "ref_id": "rastrigin-set-parameters",
        "headings": [
          "rastrigin.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.__init__": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.call_method": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.get_parameters": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.load": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.save": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/rosenbock/nrv.utils.rosenbock.set_parameters",
        "ref_id": "rosenbock-set-parameters",
        "headings": [
          "rosenbock.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/sphere/nrv.utils.sphere.__init__": [],
  "_nrv/utils/sphere/nrv.utils.sphere.call_method": [],
  "_nrv/utils/sphere/nrv.utils.sphere.get_parameters": [],
  "_nrv/utils/sphere/nrv.utils.sphere.load": [],
  "_nrv/utils/sphere/nrv.utils.sphere.save": [],
  "_nrv/utils/sphere/nrv.utils.sphere.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/sphere/nrv.utils.sphere.set_parameters",
        "ref_id": "sphere-set-parameters",
        "headings": [
          "sphere.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/stimulus/nrv.utils.stimulus.__init__": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.append": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.biphasic_pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.concatenate": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.constant": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.get_parameters": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.harmonic_pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.insert_samples": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.integrate": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.len": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.load": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.load_stimulus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.plot": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.ramp": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.ramp_lim": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.save": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.save_stimulus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/stimulus/nrv.utils.stimulus.set_parameters",
        "ref_id": "stimulus-set-parameters",
        "headings": [
          "stimulus.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/stimulus/nrv.utils.stimulus.sinus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.snap_time": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.sort": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.square": [],
  "changelog": [],
  "devcorner": [],
  "examples/00_dummy_example": [
    {
      "source": "import nrv\n\nprint(nrv.__version__)",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "examples/00_dummy_example",
        "ref_id": "dummy-example",
        "headings": [
          "Dummy example"
        ]
      },
      "doc_lineno": 44
    }
  ],
  "examples/generic/01_propagation_Vmem": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n\n    # axon def\n    y = 0                                           # axon y position, in [um]\n    z = 0                                           # axon z position, in [um]\n    d = 6                                           # axon diameter, in [um]\n    L = 5000                                        # axon length, along x axis, in [um]\n    axon1 = nrv.myelinated(y,z,d,L,rec='all')\n\n    t_start = 0.1\n    duration = 0.5\n    amplitude = 0.35\n\n    amplitude = 0.195\n    axon2 = nrv.unmyelinated(y,z,d,L,dt=0.001,Nrec=2000)\n    axon1.insert_I_Clamp(0, t_start, duration, amplitude)\n\n    amplitude = 10\n    axon2.insert_I_Clamp(0, t_start, duration, amplitude)\n\n\n    results = axon1.simulate(t_sim=4.5)\n    del axon1\n\n    fig, ax = plt.subplots(1)\n    cbar = results.colormap_plot(ax, \"V_mem\")\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('propagation along myelinated fiber')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n\n    results = axon2.simulate(t_sim=4.5)\n    #nrv.rasterize(results,'V_mem')\n    del axon2\n\n    fig, ax = plt.subplots(1)\n    cbar = results.colormap_plot(ax, \"V_mem\")\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('propagation along unmyelinated fiber')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/01_propagation_Vmem",
        "ref_id": "propagation-of-spike-along-the-axon",
        "headings": [
          "Propagation of spike along the axon"
        ]
      },
      "doc_lineno": 51
    }
  ],
  "examples/generic/02_activation_function": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom scipy import signal\nimport numpy as np\n\nwindow_length_filter = 501\npolyorder_filter = 3\ndef get_first_derivative(ftp):\n    ftp = signal.savgol_filter(ftp, window_length=window_length_filter, polyorder=polyorder_filter, mode=\"nearest\")\n    ftp = np.gradient(ftp)\n    ftp = signal.savgol_filter(ftp, window_length=window_length_filter, polyorder=polyorder_filter, mode=\"nearest\")\n    return(ftp)\n\ndef get_second_derivative(ftp):\n    ftp=get_first_derivative(ftp)\n    ftp = np.gradient(ftp)\n    ftp = signal.savgol_filter(ftp, window_length=window_length_filter, polyorder=polyorder_filter, mode=\"nearest\")\n    return(ftp)\n\nif __name__ == '__main__':\n\n    nseg = 1500\n    tsim = 4\n    # axon def\n    y = 0                                           # axon y position, in [um]\n    z = 0                                           # axon z position, in [um]\n    d = 1                                           # axon diameter, in [um]\n    L = 5000                                        # axon length, along x axis, in [um]\n    axon1 = nrv.unmyelinated(y,z,d,L,Nsec = nseg,model ='Sundt')\n\n    # electrode def\n    x_elec = L/2                            # electrode x position, in [um]\n    y_elec = 100                            # electrode y position, in [um]\n    z_elec = 0                                      # electrode y position, in [um]\n    E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n\n    # load material properties\n    epineurium = nrv.load_material('endoneurium_bhadra')\n\n    # stimulus def\n    start = 0.2\n    I_cathod = 70\n    T_cathod = 100e-3\n\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, 0, 0)\n\n    # extracellular stimulation setup\n    extra_stim = nrv.stimulation(epineurium)\n    extra_stim.add_electrode(E1, stim1)\n    axon1.attach_extracellular_stimulation(extra_stim)\n\n    axon1.get_electrodes_footprints_on_axon()\n\n    ftp = axon1.footprints[0]\n    acti_function = get_second_derivative(-ftp)\n    acti_function = acti_function/np.max(acti_function)\n\n    acti_function_ano = get_second_derivative(ftp)\n    acti_function_ano = -acti_function_ano/np.min(acti_function_ano)\n\n\n    x_vect= np.linspace(0,5000,nseg)\n    color = 'teal'\n\n    plt.figure()\n    plt.plot(x_vect,acti_function_ano,color = color)\n    plt.ylabel(r'Activation Function ($\\Delta^2V_e$)')\n    plt.xlabel('x-axis (\u00b5m)')\n    plt.xlim(np.min(x_vect),np.max(x_vect))\n    plt.title('Activation function for anodic stimulation')\n    plt.grid()\n\n    plt.figure()\n    plt.plot(x_vect,acti_function,color = color)\n    plt.ylabel(r'Activation Function ($\\Delta^2V_e$)')\n    plt.xlabel('x-axis (\u00b5m)')\n    plt.xlim(np.min(x_vect),np.max(x_vect))\n    plt.title('Activation function for cathodic stimulation')\n    plt.grid()\n\n    # simulate the axon\n    results = axon1.simulate(t_sim=tsim)\n    del axon1\n\n    fig, ax = plt.subplots(1)\n    norm = mpl.colors.Normalize(vmin=-80, vmax=30)\n    cbar = results.colormap_plot(ax, \"V_mem\",norm=norm)\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('Example of supra threshold stimulation (AP)')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n\n\n    axon1 = nrv.unmyelinated(y,z,d,L,Nsec = nseg,model ='Sundt')\n\n    E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n    I_cathod =-70\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, 0, 0)\n    # extracellular stimulation setup\n    extra_stim = nrv.stimulation(epineurium)\n    extra_stim.add_electrode(E1, stim1)\n    axon1.attach_extracellular_stimulation(extra_stim)\n\n    # simulate the axon\n    results = axon1.simulate(t_sim=tsim)\n    del axon1\n\n    fig, ax = plt.subplots(1)\n    #norm = mpl.colors.Normalize(vmin=-80, vmax=30)\n    cbar = results.colormap_plot(ax, \"V_mem\",norm=norm)\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('Example of sub threshold stimulation (no AP)')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "gradient"
          ],
          "code_str": "np.gradient",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.gradient"
        },
        {
          "import_components": [
            "numpy",
            "gradient"
          ],
          "code_str": "np.gradient",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.gradient"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "min"
          ],
          "code_str": "np.min",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "numpy.min"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 64,
          "end_lineno": 64,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 69,
          "end_lineno": 69,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 70,
          "end_lineno": 70,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlim"
          ],
          "code_str": "plt.xlim",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlim"
        },
        {
          "import_components": [
            "numpy",
            "min"
          ],
          "code_str": "np.min",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "numpy.min"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "grid"
          ],
          "code_str": "plt.grid",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.grid"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 77,
          "end_lineno": 77,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 78,
          "end_lineno": 78,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlim"
          ],
          "code_str": "plt.xlim",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlim"
        },
        {
          "import_components": [
            "numpy",
            "min"
          ],
          "code_str": "np.min",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "numpy.min"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "grid"
          ],
          "code_str": "plt.grid",
          "lineno": 81,
          "end_lineno": 81,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.grid"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 85,
          "end_lineno": 85,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 87,
          "end_lineno": 87,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "colors",
            "Normalize"
          ],
          "code_str": "mpl.colors.Normalize",
          "lineno": 88,
          "end_lineno": 88,
          "context": "none",
          "resolved_location": "matplotlib.colors.Normalize"
        },
        {
          "import_components": [
            "matplotlib",
            "colors",
            "Normalize",
            "()"
          ],
          "code_str": "norm",
          "lineno": 88,
          "end_lineno": 88,
          "context": "none",
          "resolved_location": "matplotlib.colors.Normalize"
        },
        {
          "import_components": [
            "matplotlib",
            "colors",
            "Normalize",
            "()"
          ],
          "code_str": "norm",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "matplotlib.colors.Normalize"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 96,
          "end_lineno": 96,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 96,
          "end_lineno": 96,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 98,
          "end_lineno": 98,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 98,
          "end_lineno": 98,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 103,
          "end_lineno": 103,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 103,
          "end_lineno": 103,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 104,
          "end_lineno": 104,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 104,
          "end_lineno": 104,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 105,
          "end_lineno": 105,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 108,
          "end_lineno": 108,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 109,
          "end_lineno": 109,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 111,
          "end_lineno": 111,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "colors",
            "Normalize",
            "()"
          ],
          "code_str": "norm",
          "lineno": 113,
          "end_lineno": 113,
          "context": "none",
          "resolved_location": "matplotlib.colors.Normalize"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 119,
          "end_lineno": 119,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/02_activation_function",
        "ref_id": "activation-function",
        "headings": [
          "Activation function"
        ]
      },
      "doc_lineno": 65
    }
  ],
  "examples/generic/03_LIFE_activation_function": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import signal\nimport nrv\n\nnrv.parameters.set_nrv_verbosity(2)\n\nd_elect_list = [100,200]\nLIFE_length_list = [100,1000]\n\ndef move_mean(A, N):\n    A = signal.savgol_filter(A, N, 3)\n    #A = np.convolve(A, np.ones(N)/N, mode='valid')\n    return A\n\ndef derivate(A, n_order, N=99):\n    for _ in range(n_order):\n        A = np.diff(A)\n        A = move_mean(A, N)\n    return A\n\nif __name__ == '__main__':\n    #dummy stimulus def\n    start = 1\n    I_cathod = 500\n    I_anod = I_cathod/5\n    T_cathod = 60e-3\n    T_inter = 40e-3\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, I_anod, T_inter)\n\n    #nerve\n    L = 10000\n    Nerve_D = 1500\n    Fascicle_D = 1000\n    Outer_D = 6\n\n    ##### electrodes\n    D_1 = 25\n    y_c_1 = 0\n    z_c_1 = 0\n\n    ##### compute footprints\n    x_ftp = np.linspace(0,L,num=1000)\n\n    plt.figure()\n\n    for d_elect in d_elect_list:\n        for length_1 in LIFE_length_list:\n\n            ##### extracellular context\n            test_stim = nrv.FEM_stimulation()\n            test_stim.reshape_outerBox(Outer_D)\n            test_stim.reshape_nerve(Nerve_D, L)\n            test_stim.reshape_fascicle(Fascicle_D)\n            x_1_offset = L/2 - (length_1/2)\n            elec_1 = nrv.LIFE_electrode('LIFE', D_1, length_1, x_1_offset, d_elect, z_c_1)\n            test_stim.add_electrode(elec_1, stim1)\n\n            test_stim.compute_electrodes_footprints(x_ftp, y=0, z=0, ID=0)\n            ftp = elec_1.footprint\n            acti_function = derivate(ftp, 2)\n            acti_function = acti_function/np.max(acti_function)\n\n            x_plot = np.linspace(0,L, len(acti_function))\n            plt.plot(x_plot, acti_function, label=f'd={d_elect}\u00b5m - l={length_1}\u00b5m')\n\n\n            del elec_1,test_stim\n\n    plt.ylabel(r'Activation Function ($\\Delta^2V_e$)')\n    plt.xlabel('x-axis (\u00b5m)')\n    plt.legend()\n    plt.title('Activation function of LIFE for different geometries')\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "numpy",
            "diff"
          ],
          "code_str": "np.diff",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.diff"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "test_stim",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode"
          ],
          "code_str": "nrv.LIFE_electrode",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 69,
          "end_lineno": 69,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "test_stim",
          "lineno": 69,
          "end_lineno": 69,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/03_LIFE_activation_function",
        "ref_id": "activation-function-for-a-life",
        "headings": [
          "Activation function for a LIFE"
        ]
      },
      "doc_lineno": 52
    }
  ],
  "examples/generic/04_AP_particles": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n\n    # nrvon def\n    y = 0                                                                   # nrvon y position, in [um]\n    z = 0                                                                   # nrvon z position, in [um]\n    d = 1                                                                   # nrvon diameter, in [um]\n\n    plot_node = 50\n\n    dt = 0.005\n    t_sim = 8\n\n    # first test pulse\n    L = 5000\n    t_start = 1\n    duration = 0.5\n    amplitude = 0.35\n\n    axon1 = nrv.unmyelinated(y,z,d,L,T = 21,model='HH',dt=0.001,Nrec=100)\n    axon1.insert_I_Clamp(0.5, t_start, duration, amplitude)\n    results = axon1.simulate(t_sim=t_sim,record_I_ions=True, record_particles=True)\n\n    del axon1\n\n    color_1 = \"#1B148A\"\n    color_2 = \"#C60A00\"\n    color_3 = \"#009913\"\n    color_4 = \"#E2AD00\"\n\n    V_rest= results['V_mem'][plot_node][0]\n\n    fig, axs = plt.subplots(2)\n    fig.set_size_inches(5, 7)\n    axs[0].plot(results['t'],results['V_mem'][plot_node],color = color_1,alpha = 1)\n    axs[0].axhline(y = V_rest, color = 'gray', linestyle = '--')\n    #axs[0].set_xlabel('time (ms)')\n    axs[0].set_ylabel('$V_m$ (mV)')\n    axs[0].set_xlim(0,t_sim)\n    axs[0].set_ylim(-100,40)\n    axs[0].grid(True)\n    axs[0].text(0.6,-38.0,'(1)')\n    axs[0].text(1.9,-13.0,'(2)')\n    axs[0].text(2.5,-85.0,'(3)')\n\n\n    axs[1].plot(results['t'],results['m'][plot_node],label='m',color = color_2,alpha = 1)\n    axs[1].plot(results['t'],results['n'][plot_node],label='n',color = color_3)\n    axs[1].plot(results['t'],results['h'][plot_node],label='h',color = color_4)\n    axs[1].set_xlabel('Time (ms)')\n    axs[1].set_ylabel('Gating Variables')\n    axs[1].set_xlim(0,t_sim)\n    axs[1].set_ylim(0,1.1)\n    axs[1].grid(True)\n    axs[1].text(7,0.70,'h',color = color_4)\n    axs[1].text(7,0.30,'n',color = color_3)\n    axs[1].text(7,0.07,'m',color = color_2)\n    axs[0].set_title('Dynamics for suprathreshold stimulation')\n\n\n    amplitude = 0.195\n    axon1 = nrv.unmyelinated(y,z,d,L,model='HH',dt=0.001,Nrec=100,T=21)\n    axon1.insert_I_Clamp(0.5, t_start, duration, amplitude)\n    results = axon1.simulate(t_sim=t_sim,record_I_ions=True, record_particles=True)\n\n    del axon1\n\n    V_rest= results['V_mem'][plot_node][0]\n    fig, axs = plt.subplots(2)\n    fig.set_size_inches(5, 7)\n    axs[0].plot(results['t'],results['V_mem'][plot_node],color = color_1,alpha = 1)\n    axs[0].axhline(y = V_rest, color = 'gray', linestyle = '--')\n    #axs[0].set_xlabel('time (ms)')\n    axs[0].set_ylabel(r'$V_m$ (mV)')\n    axs[0].set_xlim(0,t_sim)\n    axs[0].set_ylim(-100,40)\n    axs[0].grid(True)\n\n\n    axs[1].plot(results['t'],results['m'][plot_node],label='m',color = color_2,alpha = 1)\n    axs[1].plot(results['t'],results['n'][plot_node],label='n',color = color_3)\n    axs[1].plot(results['t'],results['h'][plot_node],label='h',color = color_4)\n    axs[1].set_xlabel('Time (ms)')\n    axs[1].set_ylabel('Gating Variables')\n    axs[1].set_xlim(0,t_sim)\n    axs[1].set_ylim(0,1.1)\n    axs[1].grid(True)\n    axs[1].text(7,0.70,'h',color = color_4)\n    axs[1].text(7,0.30,'n',color = color_3)\n    axs[1].text(7,0.07,'m',color = color_2)\n    axs[0].set_title('Dynamics for subthreshold stimulation')\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 64,
          "end_lineno": 64,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 64,
          "end_lineno": 64,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 70,
          "end_lineno": 70,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 83,
          "end_lineno": 83,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 83,
          "end_lineno": 83,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 94,
          "end_lineno": 94,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/04_AP_particles",
        "ref_id": "conductance-model-dynamic-with-stimulation",
        "headings": [
          "Conductance model dynamic with stimulation"
        ]
      },
      "doc_lineno": 51
    }
  ],
  "examples/generic/05_KES_conduction_block": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    ########################\n    ## PROBLEM DESCRITION ##\n    ########################\n\n    # Axon def\n    y = 0                                                       # Axon y position, in [um]\n    z = 0                                                       # Axon z position, in [um]\n    d = 10                                                      # Axon diameter, in [um]\n    L = nrv.get_length_from_nodes(d,51)                         # get length to have exactly 51 nodes\n\n    dt = 0.001                                                  #time step in ms\n    t_sim = 25                                                  #simulation  duration\n    axon1 = nrv.myelinated(y,z,d,L,T=37,rec='nodes',dt=dt)      #Creation of an myelinated axon object\n\n    # first test pulse\n    t_start = 0.5                                               #test pulse start in ms\n    duration = 0.1                                              #test pulse duration in ms\n    amplitude = 10                                              #test pulse amplitude in nA\n    axon1.insert_I_Clamp(0, t_start, duration, amplitude)       #attach the test pulse to the axon\n\n    # Block electrode\n    x_elec = axon1.x_nodes[25]                                  #x-elect PSA is aligned with the 25th axon's NoR\n    y_elec = 1000                                               #axon-to-PSA distance is 1000um\n    z_elec = 0                                                  #z-elec position in um\n    E = nrv.point_source_electrode(x_elec,y_elec,z_elec)        #creation of a PSA object\n\n    #creation of a sinus stimulus object\n    stim = nrv.stimulus()\n    #stimulus Block\n    block_start=3                                               #KES block start in ms\n    block_amp=700                                               #KES block amplitude in uA\n    block_freq=20                                               #KES block frequency in kHz\n    block_duration=20                                           #KES duration\n    stim.sinus(block_start, block_duration, block_amp, block_freq,dt=dt)\n\n    ### define nrv extra-cellular stimulation\n    epineurium = nrv.load_material('endoneurium_bhadra')        #set the epineurium conductivity\n    extra_stim = nrv.stimulation(epineurium)\n    extra_stim.add_electrode(E, stim)\n\n    axon1.attach_extracellular_stimulation(extra_stim) #the extracellular context is attached the axon\n\n    ################\n    ## SIMULATION ##\n    ################\n    results = axon1.simulate(t_sim=t_sim, record_particles=True,record_I_ions=True)  #axon is simulated accordingly - results are saved as a dict\n\n    #####################\n    ## POST PROCESSING ##\n    #####################\n\n    # filter the result to remove 10kHz artefacts\n    results.filter_freq('V_mem',block_freq)\n\n    color_1 = \"#1B148A\"\n    color_2 = \"#C60A00\"\n    color_3 = \"#009913\"\n    color_4 = \"#E2AD00\"\n\n    fig, axs = plt.subplots(3)\n    fig.set_size_inches(8.8, 5)\n    axs[0].plot(results['t'],results['V_mem'][25],label='Node 25',color = color_1,alpha = 0.7)\n    axs[0].plot(results['t'],results['V_mem'][23],label='Node 23',color = color_2)\n    axs[0].plot(results['t'],results['V_mem'][21],label='Node 21',color = color_3)\n    axs[0].set_ylabel('Vm (mV)')\n    axs[0].legend(loc='lower center',ncol = 3,frameon=False)\n    axs[0].set_xlim(0,25)\n    axs[0].set_ylim(-200,100)\n\n    axs[1].plot(results['t'],results['V_mem_filtered'][25],label='Node 25',color = color_1,alpha = 0.7)\n    axs[1].plot(results['t'],results['V_mem_filtered'][23],label='Node 23',color = color_2)\n    axs[1].plot(results['t'],results['V_mem_filtered'][21],label='Node 21',color = color_3)\n    axs[1].set_ylabel('Vm filtered(mV)')\n    axs[1].legend(loc='lower center',ncol = 3,frameon=False)\n    axs[1].set_xlim(0,25)\n    axs[1].set_ylim(-200,100)\n\n    axs[2].plot(results['t'],results['m'][25],label='m',color = color_1,alpha = 0.7)\n    axs[2].plot(results['t'],results['s'][25],label='s',color = color_2)\n    axs[2].plot(results['t'],results['h'][25],label='h',color = color_3)\n    axs[2].plot(results['t'],results['mp'][25],label='mp',color = color_4)\n    axs[2].set_xlabel('Time (ms)')\n    axs[2].set_ylabel('State \\n (Node 25)')\n    axs[2].legend(loc='lower center',ncol = 4,frameon=False)\n    axs[2].set_xlim(0,25)\n    axs[2].set_ylim(0,1.1)\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 64,
          "end_lineno": 64,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 83,
          "end_lineno": 83,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 83,
          "end_lineno": 83,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 85,
          "end_lineno": 85,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 85,
          "end_lineno": 85,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 92,
          "end_lineno": 92,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/05_KES_conduction_block",
        "ref_id": "conduction-block-with-khz-stimulation",
        "headings": [
          "Conduction block with kHz stimulation"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/06_fascicle_with_contexts": [
    {
      "source": "import nrv\n\nimport matplotlib.pyplot as plt\nimport os\n\n\n# Fascicle declaration\n# --------------------\n\n# The first step before generating a fascicle is to create a population of\n# axons using the ``create_axon_population`` function.\n\n# Then the fascicle can be generated and filled with the population.\n\n# *Note that the population can be saved in a* ``.pop`` *or a* ``.ppop`` *file. This allows\n# different fascicles to be generated with the same proportions of axons\n# but with different locations.*\n\nif __name__ == '__main__':\n    n_ax = 60\n    L = 10000                       # length, in um\n    d_f = 45\n\n    fascicle_1 = nrv.fascicle(diameter=d_f, ID=1)\n    fascicle_1.define_length(L)\n    fascicle_1.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", delta=5, delta_trace=0.1, with_node_shift=True)\n\n\n    # Once the fascicle geometry is generated all the contexts can be added:\n\n    # **- The intracellular context**\n\n    position = 0.\n    t_start = 1\n    duration = 0.5\n    amplitude = 4\n    fascicle_1.insert_I_Clamp(position, t_start, duration, amplitude)\n\n\n    testrec = nrv.recorder(\"endoneurium_bhadra\")\n    testrec.set_recording_point(L/4, 0, 100)\n    testrec.set_recording_point(L/2, 0, 100)\n    testrec.set_recording_point(3*L/4, 0, 100)\n    fascicle_1.attach_extracellular_recorder(testrec)\n\n\n    # **\\- The extracellular context**\n\n    # *Note that the extracellular can have an impact one the final axon population. For instance all axons overlapping with a LIFE electrode are automatically removed.*\n\n    LIFE_stim = nrv.FEM_stimulation()\n    # Simulation box size\n    Outer_D = 5\n    LIFE_stim.reshape_outerBox(Outer_D)\n    # Nerve and fascicle geometry\n    Nerve_D = d_f * 1.5\n    LIFE_stim.reshape_nerve(Nerve_D, L)\n    LIFE_stim.reshape_fascicle(geometry=fascicle_1.geom)\n    # electrode and stimulus definition\n    D_1 = 25\n    length_1 = 1000\n    y_c_1 = 0\n    z_c_1 = 0\n    x_1_offset = (L-length_1)/2\n    elec_1 = nrv.LIFE_electrode(\"LIFE_1\", D_1, length_1, x_1_offset, y_c_1, z_c_1)\n    # stimulus def\n    start = 1\n    I_cathod = 40\n    I_anod = I_cathod/5\n    T_cathod = 60e-3\n    T_inter = 40e-3\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, I_anod, T_inter)\n    LIFE_stim.add_electrode(elec_1, stim1)\n    fascicle_1.attach_extracellular_stimulation(LIFE_stim)\n\n    # Save/Load Fascicle\n    # ------------------\n\n    # As the ``fascicle``-class inherits from ``NRVClass``, the save and load methods can be used to generate a python dictionary or save the properties of the fascicle (see `usersguide`).\n\n    # As for all ``simulable``-class instances, contexts are not saved and loaded by default. One need specifies which context to save and load using boolean arguments ``extracel_context``,``intracel_context``, ``rec_context``.\n\n\n    # ;\n    # - *Because fascicles can take a long time to generate, the `fascicle` class is one of the few classes in NRV for which save saves automatically (without specifying `save=True` in the argument). If note is specified, the fascicle will be saved in the current directory in `fascicle.json`*.\n    # - *The footprint of the electrodes on the axon can be generated before saving using `compute_electrodes_footprints`. This can increase the file size but also significantly reduce the computation time of the loaded fascicle simulation*.\n    # </div>\n\n    # .. Warning::\n    # - *Some fascicle parameters (length, diameter, ...) cannot be modified if footprints are calculated*.\n\n    fas_dict = fascicle_1.save(save=False,extracel_context=True,intracel_context=True, rec_context=True)\n    #fascicle_2 = nrv.fascicle()\n    fascicle_2 = nrv.load_any(fas_dict,extracel_context=True,intracel_context=True, rec_context=True)\n\n    fig, ax = plt.subplots(1, 2, figsize=(14,6))\n    fascicle_1.plot(ax[0], num=True)\n    ax[0].set_title(\"Fascicle saved\")\n    fascicle_2.plot(ax[1], num=True)\n    ax[1].set_title(\"Fascicle loaded\")\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "os"
          ],
          "code_str": "os",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "os"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "recorder"
          ],
          "code_str": "nrv.recorder",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._recording.recorder"
        },
        {
          "import_components": [
            "nrv",
            "recorder",
            "()"
          ],
          "code_str": "testrec",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._recording.recorder"
        },
        {
          "import_components": [
            "nrv",
            "recorder",
            "()"
          ],
          "code_str": "testrec",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "nrv.fmod._recording.recorder"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode"
          ],
          "code_str": "nrv.LIFE_electrode",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "fascicle_2",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 97,
          "end_lineno": 97,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 103,
          "end_lineno": 103,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/06_fascicle_with_contexts",
        "ref_id": "generate-a-fascicle-with-all-contexts",
        "headings": [
          "Generate a fascicle with all contexts"
        ]
      },
      "doc_lineno": 59
    }
  ],
  "examples/generic/07_DC_block": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    model = 'MRG'\n    diam = 10\n    y = 0\n    z = 0\n    n_node = 50\n\n\n    t_sim = 50\n    t_position=0.05\n    t_start=20\n    t_duration=1\n    t_amplitude=1\n\n    b_start = 3\n    b_duration = t_sim\n    block_amp = 100\n    nseg = 3\n    material = nrv.load_material('endoneurium_bhadra')\n\n\n    L=nrv.get_length_from_nodes(diam,n_node)\n\n    axon = nrv.myelinated(y,z,diam,L,rec='nodes',dt=0.005,Nseg_per_sec=nseg,model=model)\n\n    y_elec = 100\n    z_elec = 0\n    x_elec = axon.x_nodes[np.int32(n_node/2)]       # electrode y position, in [um]\n    E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n\n    # insert test spike\n    axon.insert_I_Clamp(t_position, t_start, t_duration, t_amplitude)\n    # extra-cellular stimulation\n    stim_1 = nrv.stimulus()\n    stim_1.biphasic_pulse(b_start, block_amp, b_duration, 0, 0,anod_first=False)\n\n    stim_extra = nrv.stimulation(material)\n    stim_extra.add_electrode(E1,stim_1)\n    axon.attach_extracellular_stimulation(stim_extra)\n\n    # simulate axon activity\n    results = axon.simulate(t_sim=t_sim)#,footprints = footprints)\n    results.rasterize()\n\n    fig, axs = plt.subplots(2)\n    results.plot_x_t(axs[0],'V_mem')\n    axs[0].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[0].set_xlabel(\"Time (ms)\")\n    axs[0].set_xlim(0,30)\n    axs[0].set_ylim(0,np.max(results.x_rec))\n\n    results.raster_plot(axs[1],'V_mem')\n    axs[1].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[1].set_xlabel(\"Time (ms)\")\n    axs[1].set_xlim(0,30)\n    axs[1].set_ylim(0,np.max(results.x_rec))\n\n    fig.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "numpy",
            "int32"
          ],
          "code_str": "np.int32",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/07_DC_block",
        "ref_id": "dc-propagation-block",
        "headings": [
          "DC Propagation block"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/08_KES_block_unmyelinated": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    model = 'Tigerholm'\n    diam = 1\n    y = 0\n    z = 0\n    print(diam)\n\n    L = 10000\n\n    t_sim = 50\n    t_position=0.05\n    t_start=20\n    t_duration=1\n    t_amplitude=1\n\n    b_start = 3\n    b_duration = t_sim\n    block_amp = 20000\n    block_freq = 10\n    dt = 1/(20*block_freq)\n    nseg_per_l = 50\n    n_seg = np.int32(nseg_per_l*L/1000)\n    print(n_seg)\n    material = nrv.load_material('endoneurium_bhadra')\n\n    y_elec = 500\n    z_elec = 0\n    x_elec = L/2\n\n    axon1 = nrv.unmyelinated(y,z,diam,L,model=model,Nseg_per_sec=n_seg,dt=dt)\n\n\n    E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n    stim_1=nrv.stimulus()\n    stim_1.sinus(b_start, b_duration, block_amp, block_freq ,dt=1/(block_freq*20))\n    stim_extra = nrv.stimulation(material)\n    stim_extra.add_electrode(E1,stim_1)\n    axon1.attach_extracellular_stimulation(stim_extra)\n\n    axon1.insert_I_Clamp(t_position, t_start, t_duration, t_amplitude)\n\n\n    # simulate axon activity\n    results = axon1.simulate(t_sim=t_sim)\n    results.filter_freq('V_mem',block_freq)\n    results.rasterize('V_mem_filtered')\n\n    print(results.count_APs(\"V_mem_filtered\"))\n\n    fig, ax = plt.subplots(1)\n    cbar = results.colormap_plot(ax, \"V_mem_filtered\")\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('KES Block')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n\n    fig, axs = plt.subplots(2)\n    results.plot_x_t(axs[0],'V_mem_filtered')\n    axs[0].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[0].set_xlabel(\"Time (ms)\")\n    axs[0].set_xlim(0,30)\n    axs[0].set_ylim(0,np.max(results.x_rec))\n\n    results.raster_plot(axs[1],'V_mem_filtered')\n    axs[1].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[1].set_xlabel(\"Time (ms)\")\n    axs[1].set_xlim(0,30)\n    axs[1].set_ylim(0,np.max(results.x_rec))\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "int32"
          ],
          "code_str": "np.int32",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/08_KES_block_unmyelinated",
        "ref_id": "kes-propagation-block-of-unmyelinated-fiber",
        "headings": [
          "KES propagation Block of unmyelinated fiber"
        ]
      },
      "doc_lineno": 63
    }
  ],
  "examples/generic/09_Prepulse_waveform": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmodel = 'MRG'\ndiam = 10\ny = 0\nz = 0\nn_node = 20\n\nt_sim = 20\nt_start = 1\nprep_d = 5\nprep_a = 15\ncoeffs = [0, 1]\nlabels = ['no prepulse', 'width prepulse']\nVm = []\ninterp_delay = 0\npw = 100e-3\namp = 48\n\nif __name__ == '__main__':\n    nseg = 1\n    material = nrv.load_material('endoneurium_bhadra')\n    L=nrv.get_length_from_nodes(diam,n_node)\n\n\n    for coeff in coeffs:\n        prepulse = nrv.stimulus()\n        prepulse.biphasic_pulse(t_start,prep_a,prep_d,0,0)\n        pulse = nrv.stimulus()\n        pulse.biphasic_pulse(t_start+interp_delay+prep_d,amp,pw,0,0)\n        stim_1 = coeff*prepulse + pulse\n\n        axon = nrv.myelinated(y,z,diam,L,rec='nodes',dt=0.005,Nseg_per_sec=nseg,model=model)\n\n        y_elec = 500\n        z_elec = 0\n        x_elec = axon.x_nodes[np.int32(n_node/2)]   # electrode y position, in [um]\n        E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n\n        stim_extra = nrv.stimulation(material)\n        stim_extra.add_electrode(E1,stim_1)\n        axon.attach_extracellular_stimulation(stim_extra)\n\n        # simulate axon activity\n        results = axon.simulate(t_sim=t_sim)\n        Vm.append(results['V_mem'][10])\n        del axon\n\n    plt.figure(figsize=(8,5))\n    for i in range(len(Vm)):\n        plt.plot(results['t'], Vm[i],label=labels[i])\n    plt.ylabel(r\"$V_m (mV)$\")\n    plt.xlabel(\"Time (ms)\")\n    plt.legend()\n\n    plt.xlim(np.min(results['t']),np.max(results['t']))\n    plt.ylim(-85,27)\n    plt.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "prepulse",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "pulse",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "prepulse",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "pulse",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "numpy",
            "int32"
          ],
          "code_str": "np.int32",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlim"
          ],
          "code_str": "plt.xlim",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlim"
        },
        {
          "import_components": [
            "numpy",
            "min"
          ],
          "code_str": "np.min",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "numpy.min"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylim"
          ],
          "code_str": "plt.ylim",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylim"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "tight_layout"
          ],
          "code_str": "plt.tight_layout",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.tight_layout"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/09_Prepulse_waveform",
        "ref_id": "prepulse-waveform-stimulation",
        "headings": [
          "Prepulse waveform stimulation"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/10_Slowly_rising": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmodel = 'MRG'\ndiams = [4, 7,  10, 13, 16]\nVm = []\ny = 0\nz = 0\nn_node = 20\n\nt_sim = 20\nt_start = 1\nprep_d = 5\nprep_a = 35\ninterp_delay = 0\npw = 100e-3\namp = 48\n\nif __name__ == '__main__':\n    prepulse = nrv.stimulus()\n\n    slope = prep_a/prep_d\n    prepulse.ramp(slope, t_start, prep_d+t_start, 0.05)\n    pulse = nrv.stimulus()\n    pulse.biphasic_pulse(t_start+prep_d,amp,pw,0,0)\n    stim_1 = -prepulse+pulse\n    stim_1.s[-2] = -amp\n    stim_1.s[-1] = 0\n\n    nseg = 1\n    material = nrv.load_material('endoneurium_bhadra')\n\n\n    for diam in diams:\n        L=nrv.get_length_from_nodes(diam,n_node)\n        axon = nrv.myelinated(y,z,diam,L,rec='nodes',dt=0.005,Nseg_per_sec=nseg,model=model)\n\n        y_elec = 500\n        z_elec = 0\n        x_elec = axon.x_nodes[np.int32(n_node/2)]   # electrode y position, in [um]\n        E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n\n        #stim_1 = pulse\n        stim_extra = nrv.stimulation(material)\n        stim_extra.add_electrode(E1,stim_1)\n        axon.attach_extracellular_stimulation(stim_extra)\n\n        #axon1.insert_I_Clamp(t_position, t_start, t_duration, t_amplitude)\n\n        # extra-cellular stimulation\n\n        # simulate axon activity\n        results = axon.simulate(t_sim=t_sim)#,footprints = footprints)\n        Vm.append(results['V_mem'][10])\n\n\n    plt.figure(figsize=(8,5))\n    for i in range(len(diams)):\n        plt.plot(results['t'],Vm[i], label=f\"{diams[i]}\u00b5m\")\n    plt.ylabel(r\"$V_m (mV)$\")\n    plt.xlabel(\"Time (ms)\")\n    plt.legend()\n\n    plt.xlim(np.min(results['t']),np.max(results['t']))\n    plt.ylim(-85,40)\n    plt.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "prepulse",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "pulse",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "prepulse",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "pulse",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "numpy",
            "int32"
          ],
          "code_str": "np.int32",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 62,
          "end_lineno": 62,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlim"
          ],
          "code_str": "plt.xlim",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlim"
        },
        {
          "import_components": [
            "numpy",
            "min"
          ],
          "code_str": "np.min",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "numpy.min"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylim"
          ],
          "code_str": "plt.ylim",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylim"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "tight_layout"
          ],
          "code_str": "plt.tight_layout",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.tight_layout"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 68,
          "end_lineno": 68,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/10_Slowly_rising",
        "ref_id": "slowly-rising-pulse-stimulation",
        "headings": [
          "Slowly Rising Pulse Stimulation"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/11_combining_stimulus": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    model = 'Tigerholm'\n    diam = 1\n    y = 0\n    z = 0\n    print(diam)\n\n    L = 10000\n\n    t_sim = 50\n    t_position=0.05\n    t_start=20\n    t_duration=1\n    t_amplitude=1\n\n    b_start = 3\n    b_duration = t_sim\n    block_amp = 20000\n    block_freq = 10\n    dt = 1/(20*block_freq)\n    nseg_per_l = 50\n    n_seg = np.int32(nseg_per_l*L/1000)\n    print(n_seg)\n    material = nrv.load_material('endoneurium_bhadra')\n\n    y_elec = 500\n    z_elec = 0\n    x_elec = L/2\n\n    axon1 = nrv.unmyelinated(y,z,diam,L,model=model,Nseg_per_sec=n_seg,dt=dt)\n\n\n    E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n    stim_1=nrv.stimulus()\n    stim_1.sinus(b_start, b_duration, block_amp, block_freq ,dt=1/(block_freq*20))\n    stim_extra = nrv.stimulation(material)\n    stim_extra.add_electrode(E1,stim_1)\n    axon1.attach_extracellular_stimulation(stim_extra)\n\n    axon1.insert_I_Clamp(t_position, t_start, t_duration, t_amplitude)\n\n\n    # simulate axon activity\n    results = axon1.simulate(t_sim=t_sim)\n    results.filter_freq('V_mem',block_freq)\n    results.rasterize('V_mem_filtered')\n\n    print(results.count_APs(\"V_mem_filtered\"))\n\n    fig, ax = plt.subplots(1)\n    cbar = results.colormap_plot(ax, \"V_mem_filtered\")\n    ax.set_xlabel('Time (ms)')\n    ax.set_ylabel('x-position (\u00b5m)')\n    ax.set_title('KES Block')\n    cbar.set_label(r'Membrane Voltage $V_m$ (mV)')\n\n    fig, axs = plt.subplots(2)\n    results.plot_x_t(axs[0],'V_mem_filtered')\n    axs[0].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[0].set_xlabel(\"Time (ms)\")\n    axs[0].set_xlim(0,30)\n    axs[0].set_ylim(0,np.max(results.x_rec))\n\n    results.raster_plot(axs[1],'V_mem_filtered')\n    axs[1].set_ylabel(\"Axon x-axis (\u00b5m)\")\n    axs[1].set_xlabel(\"Time (ms)\")\n    axs[1].set_xlim(0,30)\n    axs[1].set_ylim(0,np.max(results.x_rec))\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "int32"
          ],
          "code_str": "np.int32",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "numpy",
            "int32",
            "()"
          ],
          "code_str": "n_seg",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "numpy.int32"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "stim_extra",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "nrv.nmod.results._unmyelinated_results.unmyelinated_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/11_combining_stimulus",
        "ref_id": "combining-stimuli-in-nrv",
        "headings": [
          "Combining Stimuli in NRV"
        ]
      },
      "doc_lineno": 63
    }
  ],
  "examples/generic/12_MRG_structural_parameters": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nif __name__ == '__main__':\n    fiberD  = np.asarray([5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.0])\n    fiberP  = np.asarray([1, 2])\n\n    MRG_g = np.asarray([0.605, 0.630, 0.661, 0.690, 0.700, 0.719, 0.739, 0.767, 0.791])\n    MRG_axonD = np.asarray([3.4, 4.6, 5.8, 6.9, 8.1, 9.2, 10.4, 11.5, 12.7])\n    MRG_nodeD = np.asarray([1.9, 2.4, 2.8, 3.3, 3.7, 4.2, 4.7, 5.0, 5.5])\n    MRG_paraD1 = np.asarray([ 1.9, 2.4, 2.8, 3.3, 3.7, 4.2, 4.7, 5.0, 5.5])\n    MRG_paraD2 = np.asarray([ 3.4, 4.6, 5.8, 6.9, 8.1, 9.2, 10.4, 11.5, 12.7])\n    MRG_deltax = np.asarray([ 500, 750, 1000, 1150, 1250, 1350, 1400, 1450, 1500])\n    MRG_paralength2 = np.asarray([35, 38, 40, 46, 50, 54, 56, 58, 60])\n    MRG_nl = np.asarray([ 80, 100, 110, 120, 130, 135, 140, 145, 150])\n\n    P_g = np.asarray([0.565, 0.585])\n    P_axonD = np.asarray([0.8, 1.6])\n    P_nodeD = np.asarray([0.7, 1.4])\n    P_paraD1 = np.asarray([0.7, 1.4])\n    P_paraD2 = np.asarray([0.8, 1.6])\n    P_deltax = np.asarray([100, 200])\n    P_paralength2 = np.asarray([5, 10])\n    P_nl = np.asarray([15, 20])\n\n    paralength1 = 3\n    nodelength = 1\n\n    interlength_MRG = ((MRG_deltax-nodelength-(2*paralength1)-(2*MRG_paralength2))/6)\n    interlength_P = ((P_deltax-nodelength-(2*paralength1)-(2*P_paralength2))/6)\n\n\n    #interpolation\n    diameters = np.linspace(1,20)\n    g_interp = []\n    axonD_interp = []\n    nodeD_interp = []\n    paraD1_interp = []\n    paraD2_interp = []\n    deltax_interp = []\n    paralength2_interp = []\n    nl_interp = []\n    interlength_interp = []\n\n    for diam in diameters:\n        g, axonD, nodeD, paraD1, paraD2, deltax, paralength2, nl = nrv.get_MRG_parameters(diam)\n        interlength_interp.append((deltax-nodelength-(2*paralength1)-(2*paralength2))/6)\n        g_interp.append(g)\n        axonD_interp.append(axonD)\n        nodeD_interp.append(nodeD)\n        paraD1_interp.append(paraD1)\n        paraD2_interp.append(paraD2)\n        deltax_interp.append(deltax)\n        paralength2_interp.append(paralength2)\n        nl_interp.append(nl)\n\n    fig3, axs3 = plt.subplots(3, 2, figsize=(5, 5*1.33))\n    axs3[0,0].scatter(fiberD,MRG_nodeD,color='darkblue')\n    axs3[0,0].scatter(fiberP,P_nodeD,color='deepskyblue')\n    axs3[0,0].plot(diameters,nodeD_interp,color='r')\n    axs3[0,0].set_ylabel('Node diameter \u00b5m')\n    axs3[0,0].text(2.5,0.6,\"Pelot 2017\",color='deepskyblue')\n    axs3[0,0].text(9.5,2.5,\"MRG 2002\",color='darkblue')\n\n    axs3[0,1].scatter(fiberD,MRG_paraD2,color='darkblue')\n    axs3[0,1].scatter(fiberP,P_paraD2,color='deepskyblue')\n    axs3[0,1].plot(diameters,paraD2_interp,color='r')\n    axs3[0,1].set_ylabel('Paranodal diameter (\u00b5m)')\n\n    axs3[1,0].scatter(fiberD,MRG_paralength2,color='darkblue')\n    axs3[1,0].scatter(fiberP,P_paralength2,color='deepskyblue')\n    axs3[1,0].plot(diameters,paralength2_interp,color='r')\n    axs3[1,0].set_ylabel('FLUT Length (\u00b5m)')\n\n    axs3[1,1].scatter(fiberD,interlength_MRG,color='darkblue')\n    axs3[1,1].scatter(fiberP,interlength_P,color='deepskyblue')\n    axs3[1,1].plot(diameters,interlength_interp,color='r')\n    axs3[1,1].set_ylabel('STIN Length (\u00b5m)')\n\n    axs3[2,0].scatter(fiberD,MRG_nl,color='darkblue')\n    axs3[2,0].scatter(fiberP,P_nl,color='deepskyblue')\n    axs3[2,0].plot(diameters,nl_interp,color='r')\n    axs3[2,0].set_xlabel('Axon diameter (\u00b5m)')\n    axs3[2,0].set_ylabel('Number of lamella')\n\n    axs3[2,1].scatter(fiberD,MRG_deltax/1000,color='darkblue')\n    axs3[2,1].scatter(fiberP,P_deltax/1000,color='deepskyblue')\n    axs3[2,1].plot(diameters,np.array(deltax_interp)/1000,color='r')\n    axs3[2,1].set_xlabel('Axon diameter (\u00b5m)')\n    axs3[2,1].set_ylabel('Internodal Length (mm)')\n\n    fig3.tight_layout()\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/12_MRG_structural_parameters",
        "ref_id": "plotting-myelinated-fibers-structural-parameters",
        "headings": [
          "Plotting myelinated fibers structural parameters"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/13_axon_distributions": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nmyelinated_stats = [\n    \"Schellens_1\",\n    \"Schellens_2\",\n    \"Ochoa_M\",\n    \"Jacobs_9_A\",\n    \"Jacobs_9_B\",\n    \"Fugleholm\",\n]\n\nunmyelinated_stats = [\n    \"Ochoa_U\",\n    \"Jacobs_11_A\",\n    \"Jacobs_11_B\",\n    \"Jacobs_11_C\",\n    \"Jacobs_11_D\",\n    \"Jacobs_11_D\",\n]\n\nif __name__ == '__main__':\n    N = 10000\n    fig_idxs= [(0,0),(0,1),(1,0),(1,1),(2,0),(2,1)]\n    xspace1 = np.linspace(1,20,num=500)\n\n    fig1, axs1 = plt.subplots(3, 2, figsize=(5, 5*1.33))\n    for k in range(len(myelinated_stats)):\n\n        m_stat = myelinated_stats[k]\n        u_stat = unmyelinated_stats[0]\n        axons_diameters, axons_type, M_diam_list, U_diam_list = nrv.create_axon_population(N,M_stat=m_stat,U_stat=u_stat)\n\n        y_M, x, _ = axs1[fig_idxs[k]].hist(M_diam_list,bins = 50,color = 'blue',alpha = 0.2)\n\n\n        gen, popt1, pcov1 = nrv.create_generator_from_stat(m_stat)\n        diam, pres = nrv.load_stat(m_stat)\n\n        if (len(popt1)>4):\n            data = (nrv.two_Gamma(xspace1, *popt1))\n        else:\n            data = (nrv.one_Gamma(xspace1, *popt1))\n        scale_factor= np.max(y_M)\n        data = data*scale_factor/np.max(data)\n        pres = pres*scale_factor/np.max(pres)\n        axs1[fig_idxs[k]].plot(xspace1,data,linewidth = 2,color =\"darkslateblue\")\n        axs1[fig_idxs[k]].step(diam,pres,linewidth = 2,color =\"seagreen\",where=\"mid\")\n\n        axs1[fig_idxs[k]].set_title(m_stat)\n        axs1[fig_idxs[k]].set_ylabel(\"Axons\")\n\n    axs1[fig_idxs[-1]].set_xlabel(\"Axon diameter (\u00b5m)\")\n    axs1[fig_idxs[-2]].set_xlabel(\"Axon diameter (\u00b5m)\")\n    fig1.tight_layout()\n\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/13_axon_distributions",
        "ref_id": "plotting-available-axon-diameter-distributions-in-nrv",
        "headings": [
          "Plotting available axon diameter distributions in NRV"
        ]
      },
      "doc_lineno": 39
    }
  ],
  "examples/generic/14_activation_function_cuff": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import signal\n\ndef move_mean(A, N):\n    A = signal.savgol_filter(A, N, 3)\n    #A = np.convolve(A, np.ones(N)/N, mode='valid')\n    return A\n\ndef derivate(A, n_order, N=99):\n    for _ in range(n_order):\n        A = np.diff(A)\n        A = move_mean(A, N)\n    return A\n\nif __name__ == '__main__':\n    my_model = \"Nerve_1_Fascicle_1_CUFF\" #Optional, only if comsol is used\n\n    ##### extracellular context\n    fem_mod = nrv.FEM_stimulation()                         #if fenicsx\n    #fem_mod = nrv.FEM_stimulation(model_fname=my_model)     #if comsol\n\n    ### Simulation box size\n    Outer_D = 6 #in mm\n\n    #### Nerve and fascicle geometry\n    L = 10000               #in um\n    Nerve_D = 1000          #in um\n    Fascicle_D = 800        #in um\n\n    fem_mod.reshape_outerBox(Outer_D)\n    fem_mod.reshape_nerve(Nerve_D, L)\n    fem_mod.reshape_fascicle(Fascicle_D)\n\n    ##### electrodes and stimuli definition\n    contact_length=500          #in um\n    contact_thickness=100       #in um\n    insulator_length=1000       #in um\n    insulator_thickness=500     #in um\n    x_center = L/2\n\n    cuff = nrv.CUFF_electrode('CUFF_1', contact_length=contact_length,\\\n        contact_thickness=contact_thickness, insulator_length=insulator_length,\\\n        insulator_thickness=insulator_thickness, x_center=x_center)\n\n    # stimulus def\n    start = 1\n    I_cathod = 500\n    I_anod = I_cathod/5\n    T_cathod = 60e-3\n    T_inter = 40e-3\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, I_anod, T_inter)\n\n    #attach stim and electrode to the FEM model\n    fem_mod.add_electrode(cuff, stim1)\n\n    ##### compute footprints\n    x = np.linspace(0,L,num=1000)\n    y = 0\n    z = 0\n\n    fem_mod.compute_electrodes_footprints(x, y, z, ID=0)\n    ftp = cuff.footprint\n    acti_function = derivate(ftp, 2)\n    acti_function = acti_function/np.max(acti_function)\n\n    fig,ax = plt.subplots(1)\n    x_plot = np.linspace(0,L, len(acti_function))\n    ax.plot(x_plot, acti_function)\n    ax.set_ylabel(r'Activation Function ($\\Delta^2V_e$)')\n    ax.set_xlabel('x-axis (\u00b5m)')\n    fig.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "numpy",
            "diff"
          ],
          "code_str": "np.diff",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.diff"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "fem_mod",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode"
          ],
          "code_str": "nrv.CUFF_electrode",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode",
            "()"
          ],
          "code_str": "cuff",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode",
            "()"
          ],
          "code_str": "cuff",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 69,
          "end_lineno": 69,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 70,
          "end_lineno": 70,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 70,
          "end_lineno": 70,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/14_activation_function_cuff",
        "ref_id": "activation-function-with-a-cuff-like-electrode",
        "headings": [
          "Activation function with a cuff-like electrode"
        ]
      },
      "doc_lineno": 49
    }
  ],
  "examples/generic/15_activation_thresholds": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport nrv\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnrv.parameters.set_nrv_verbosity(2)\n\n#Update function for the binary search\ndef cathodic_pulse_update(axon,amp, pw, elec_id = 0, start_p = 1):\n    stim = nrv.stimulus()\n    stim.pulse(start_p,-amp,pw)\n    axon.change_stimulus_from_electrode(elec_id, stim)\n\n\nif __name__ == '__main__':\n\n    #Stimulus definition\n    t_inter = 0\n    cath_an_ratio = 0\n    anod_first = False\n    pw = 50e-3          #stimulation PW is 50\u00b5s\n\n    #binary search parameters\n    amp_max = 600                   #maximum stimulation amplitude, in \u00b5s\n    amp_tol = 5                     #binary search tolerance, in %\n\n    #Axon ranges from 1\u00b5m to 20\u00b5m\n    d_min = 2\n    d_max = 20\n    n_diam = 10\n    diam_list = np.round(np.linspace(d_min,d_max,num=n_diam))\n    model= 'MRG'\n    n_node = 20     #20 Node of Ranvier for each axon\n\n    # axon location\n    z_axon = 0        # axon z position, in [um]\n    y_axon = 100  # axon z position, in [um]\n\n    ##### electrodes definition\n    contact_width=500\n    contact_thickness=100\n    insulator_width=1000\n    insulator_thickness=500\n\n    ### Simulation box size\n    Outer_D = 6     # in in [mm]\n\n    #### Nerve and fascicle geometry\n    Nerve_D = 1000      # in [um]\n    fasc_geom = nrv.create_cshape(diameter=800)    # in [um]\n    perineurium_thickeness = 25 # in [um]\n\n\n    #dummy useless stimulus\n    start = 1\n    I_cathod = 10\n    I_anod = 0\n    T_cathod = pw\n    T_inter = t_inter\n    stim1 = nrv.stimulus()\n    stim1.biphasic_pulse(start, I_cathod, T_cathod, I_anod, T_inter)\n\n    thr_cuff =  []\n    for diam in diam_list:\n\n        L=nrv.get_length_from_nodes(diam,n_node)\n\n        print(f\"CUFF - PW = {int(pw*1e3)}us - D_axon {diam}um\")\n\n        #set the FEM parameters\n        extra_stim = nrv.FEM_stimulation()\n        extra_stim.reshape_outerBox(Outer_D)\n        extra_stim.reshape_nerve(Nerve_D, L)\n        extra_stim.reshape_fascicle(fasc_geom)\n\n        #axon creation\n        axon1 = nrv.myelinated(y_axon,z_axon,diam,L,rec='nodes',model=model)\n        n_node = len(axon1.x_nodes)\n        x_elec = axon1.x_nodes[(n_node//2)] # electrode x position, in [um]\n\n        elec_1 = nrv.CUFF_electrode('CUFF_1', contact_length=contact_width,\\\n            contact_thickness=contact_thickness, insulator_length=insulator_width,\\\n            insulator_thickness=insulator_thickness, x_center=x_elec)\n\n        # extracellular stimulation setup\n        extra_stim.add_electrode(elec_1, stim1)\n        axon1.attach_extracellular_stimulation(extra_stim)\n\n        axon1.get_electrodes_footprints_on_axon()\n\n        start_p = 1\n        arg_stim = {'pw':pw, 'elec_id':0, 'start_p':start_p} #parameters for the waveforms\n        new_thr = nrv.axon_AP_threshold(axon = axon1,amp_max = amp_max,\n                                            update_func = cathodic_pulse_update, args_update=arg_stim)\n\n        print(f\"Threshold: {np.round(new_thr,1)}\u00b5A\")\n        thr_cuff.append(new_thr)\n        del extra_stim,axon1 #to prevent meshing error (known bug)\n\n\n    #binary search parameters\n    amp_max = 150                   #maximum stimulation amplitude, in \u00b5s\n\n    #LIFE\n    LIFE_length = 1000             #electrode active site length\n    y_elect = 0\n    z_elect = 0\n    D_1 = 25                    #electrode diam\n\n    thr_LIFE =  []\n    for diam in diam_list:\n        L=nrv.get_length_from_nodes(diam,n_node)\n        print(f\"LIFE - PW = {int(pw*1e3)}us - D_axon {diam}um\")\n\n        #set the FEM parameters\n        extra_stim = nrv.FEM_stimulation()\n        extra_stim.reshape_outerBox(Outer_D)\n        extra_stim.reshape_nerve(Nerve_D, L)\n        extra_stim.reshape_fascicle(fasc_geom)\n\n        #axon creation\n        axon1 = nrv.myelinated(y_axon,z_axon,diam,L,rec='nodes',model=model)\n        n_node = len(axon1.x_nodes)\n        x_elec = axon1.x_nodes[n_node//2]   # electrode y position, in [um]\n        y_c = 0\n        x_1_offset = x_elec - (LIFE_length/2)\n        LIFE = nrv.LIFE_electrode('LIFE_1', D_1, LIFE_length, x_1_offset, y_elect, z_elect)\n\n        # extracellular stimulation setup\n        extra_stim.add_electrode(LIFE, stim1)\n        axon1.attach_extracellular_stimulation(extra_stim)\n        axon1.get_electrodes_footprints_on_axon()\n\n        start_p = 1\n        arg_stim = {'pw':pw, 'elec_id':0, 'start_p':start_p} #parameters for the waveforms\n        new_thr = nrv.axon_AP_threshold(axon = axon1,amp_max = amp_max,\n                                            update_func = cathodic_pulse_update, args_update=arg_stim)\n\n        print(f\"Threshold: {np.round(new_thr,1)}\u00b5A\")\n        thr_LIFE.append(new_thr)\n        del extra_stim,axon1 #to prevent meshing error (known bug)\n\n    fig,ax = plt.subplots(1)\n    ax.semilogy(diam_list,thr_LIFE,label ='LIFE')\n    ax.semilogy(diam_list,thr_cuff,label ='cuff')\n    ax.legend()\n    ax.set_xlabel(\"Axon diameter (\u00b5m)\")\n    ax.set_ylabel(\"Activation threshold (\u00b5A)\")\n    fig.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "numpy",
            "round"
          ],
          "code_str": "np.round",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "numpy.round"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "nrv",
            "create_cshape",
            "()"
          ],
          "code_str": "fasc_geom",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "create_cshape",
            "()"
          ],
          "code_str": "fasc_geom",
          "lineno": 77,
          "end_lineno": 77,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 81,
          "end_lineno": 81,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode"
          ],
          "code_str": "nrv.CUFF_electrode",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "CUFF_electrode",
            "()"
          ],
          "code_str": "elec_1",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.CUFF_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 90,
          "end_lineno": 90,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 96,
          "end_lineno": 96,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 96,
          "end_lineno": 96,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "round"
          ],
          "code_str": "np.round",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "numpy.round"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 101,
          "end_lineno": 101,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 101,
          "end_lineno": 101,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 116,
          "end_lineno": 116,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 116,
          "end_lineno": 116,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 119,
          "end_lineno": 119,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 119,
          "end_lineno": 119,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "create_cshape",
            "()"
          ],
          "code_str": "fasc_geom",
          "lineno": 122,
          "end_lineno": 122,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 125,
          "end_lineno": 125,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 125,
          "end_lineno": 125,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 126,
          "end_lineno": 126,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode"
          ],
          "code_str": "nrv.LIFE_electrode",
          "lineno": 130,
          "end_lineno": 130,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "LIFE",
          "lineno": 130,
          "end_lineno": 130,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "LIFE",
          "lineno": 133,
          "end_lineno": 133,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 133,
          "end_lineno": 133,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 134,
          "end_lineno": 134,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 139,
          "end_lineno": 139,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 139,
          "end_lineno": 139,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 142,
          "end_lineno": 142,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "numpy",
            "round"
          ],
          "code_str": "np.round",
          "lineno": 142,
          "end_lineno": 142,
          "context": "none",
          "resolved_location": "numpy.round"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 142,
          "end_lineno": 142,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "new_thr",
          "lineno": 143,
          "end_lineno": 143,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 144,
          "end_lineno": 144,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 144,
          "end_lineno": 144,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 146,
          "end_lineno": 146,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 153,
          "end_lineno": 153,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/15_activation_thresholds",
        "ref_id": "activation-thresholds-with-life-and-cuff-like-electrodes",
        "headings": [
          "Activation thresholds with LIFE and cuff-like electrodes"
        ]
      },
      "doc_lineno": 91
    }
  ],
  "examples/generic/16_activation_thresholds_arbitrary": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\n\n#Update function for cathodic (monopolar) pulse\ndef cath_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0):\n    stim_1 = nrv.stimulus()\n    stim_1.pulse(start=start_p, duration=pw, value = -amp)\n    axon.change_stimulus_from_electrode(elec_id, stim_1)\n\n#Update function for biphasic pulse\ndef biphasic_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0,t_inter=50e-3):\n    stim_1 = nrv.stimulus()\n    stim_1.biphasic_pulse(start = start_p, s_anod=amp,t_stim=pw,s_cathod=amp,t_inter=t_inter)\n    axon.change_stimulus_from_electrode(elec_id, stim_1)\n\n#Update function for cathodic sine pulse\ndef cath_sine_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0):\n    stim_1 = nrv.stimulus()\n    freq = 1/(2*pw)\n    stim_1.sinus(start_p, pw, amp, freq, offset=0, phase=180, dt=0)\n    axon.change_stimulus_from_electrode(elec_id, stim_1)\n\nif __name__ == '__main__':\n    # axon def\n    y = 0       # axon y position, in [um]\n    z = 0       # axon z position, in [um]\n    d = 10      # axon diameter, in [um]\n    L = 50_000  # axon length, along x axis, in [um]\n    axon1 = nrv.myelinated(y,z,d,L,T=37,rec='nodes',dt=0.001)\n\n    #electrode\n    n_node = len(axon1.x_nodes)\n    x_elec = axon1.x_nodes[n_node//2]\n    y_elec = 1000\n    z_elec = 0\n    PSA = nrv.point_source_electrode(x_elec,y_elec,z_elec)\n    stim1 = nrv.stimulus() #dummy stim\n\n    ### define extra cellular stimulation\n    extra_stim = nrv.stimulation('endoneurium_bhadra')\n    extra_stim.add_electrode(PSA, stim1)\n    axon1.attach_extracellular_stimulation(extra_stim)\n\n    #parameters for the waveforms\n    arg_stim = {'pw':50e-3, 'elec_id':0, 'start_p':1}\n    max_amp = 300 #maximum search boundary\n\n    threshold_pulse = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = cath_pulse_update, args_update=arg_stim)\n    threshold_biphasic = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = biphasic_pulse_update, args_update=arg_stim)\n    threshold_sine = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = cath_sine_pulse_update, args_update=arg_stim)\n\n    plt.plot([0.25], [threshold_pulse], \"s\", markersize=10, label=\"pulse\", color=\"c\")\n    plt.plot([1.25], [threshold_biphasic], \"s\", markersize=10, label=\"biphasic\", color=\"orange\")\n    plt.plot([2.25], [threshold_sine], \"s\", markersize=10, label=\"sine\", color=\"limegreen\")\n    plt.fill_between([0, 0.5], [threshold_pulse, threshold_pulse], 0, color=\"c\")\n    plt.fill_between([1,1.5], [threshold_biphasic, threshold_biphasic], 0, color=\"orange\")\n    plt.fill_between([2, 2.5], [threshold_sine, threshold_sine], 0, color=\"limegreen\")\n    plt.xticks([])\n    plt.xlabel(\"stimulus type\")\n    plt.ylabel(\"amplitude $\\mu m$\")\n    plt.legend()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim_1",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "PSA",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "PSA",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_pulse",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_biphasic",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_sine",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_pulse",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_biphasic",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_sine",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "fill_between"
          ],
          "code_str": "plt.fill_between",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.fill_between"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_pulse",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_pulse",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "fill_between"
          ],
          "code_str": "plt.fill_between",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.fill_between"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_biphasic",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_biphasic",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "fill_between"
          ],
          "code_str": "plt.fill_between",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.fill_between"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_sine",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "nrv",
            "axon_AP_threshold",
            "()"
          ],
          "code_str": "threshold_sine",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "numpy.float64"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xticks"
          ],
          "code_str": "plt.xticks",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xticks"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 62,
          "end_lineno": 62,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/16_activation_thresholds_arbitrary",
        "ref_id": "activation-thresholds-with-arbitrary-settings",
        "headings": [
          "Activation thresholds with arbitrary settings"
        ]
      },
      "doc_lineno": 48
    }
  ],
  "examples/generic/18_Action_Potential_Analysis": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    y = 0\n    z = 0\n    d = 10\n    L = 20000\n    #with AP collision\n    axon2 = nrv.myelinated(y,z,d,L,dt=0.005,rec='all')\n    t_start = 2\n    duration = 0.1\n    amplitude = 2\n\n    axon2.insert_I_Clamp(0.5, 2.01, duration, amplitude)\n    axon2.insert_I_Clamp(0.75, 6.01, duration, amplitude)\n    axon2.insert_I_Clamp(0.25, 6.0, duration, amplitude)\n    axon2.insert_I_Clamp(0.75, 8.01, duration, amplitude)\n    axon2.insert_I_Clamp(0.25, 8.0, duration, amplitude)\n    results = axon2.simulate(t_sim=10)\n\n    results.rasterize()\n    x_APs,_,t_APs,_ = results.split_APs()\n\n    print(f\"Number of APs detected: {results.count_APs()}\")\n    print(f\"APs reached end: {results.APs_reached_end()}\")\n    print(f\"APs reached end within the timeframe: {results.APs_in_timeframe()}\")\n    print(f\"InterAP collision detected: {results.detect_AP_collisions()}\")\n    if (results.count_APs()):\n        print(f\"AP propagation velocity: {results.getAPspeed()[0]}m/s\")\n\n    fig,ax = plt.subplots(1)\n    results.colormap_plot(ax)\n\n    fig,axs = plt.subplots(2)\n\n    results.plot_x_t(axs[0],\"V_mem\")\n    axs[0].set_xlabel('time (ms)')\n    axs[0].set_ylabel(\"x-axis (\u00b5m)\")\n    axs[0].set_xlim(0,results['tstop'])\n\n    results.raster_plot(axs[1],\"V_mem\")\n    for x_AP,t_AP in zip(x_APs,t_APs):\n        axs[1].scatter(t_AP,x_AP)\n        x_start,t_start = results.get_start_AP(x_AP,t_AP)\n        x_max,t_xmax = results.get_xmax_AP(x_AP,t_AP)\n        x_min,t_xmin = results.get_xmin_AP(x_AP,t_AP)\n        axs[1].scatter(t_start,x_start,s=10,c = 'k')\n        axs[1].scatter(t_xmax,x_max,s=10,c = 'g')\n        axs[1].scatter(t_xmin,x_min,s=10,c = 'b')\n\n    if results.detect_AP_collisions():\n        x_coll,t_coll,_ = results.get_collision_pts()\n        axs[1].scatter(t_coll,x_coll,s=50,c = 'r')\n\n    axs[1].set_xlabel('time (ms)')\n    axs[1].set_ylabel(\"x-axis (\u00b5m)\")\n    axs[1].set_xlim(0,results['tstop'])\n\n    fig.tight_layout()\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "zip"
          ],
          "code_str": "zip",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "zip"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.nmod.results._myelinated_results.myelinated_results"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/generic/18_Action_Potential_Analysis",
        "ref_id": "analyzing-action-potentials-in-axons",
        "headings": [
          "Analyzing Action Potentials in Axons"
        ]
      },
      "doc_lineno": 65
    }
  ],
  "examples/generic/19_build_geometry": [
    {
      "source": "import nrv.utils.geom as geom\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_cshape(axes:plt.Axes, csh:geom.CShape, label:str):\n    \"\"\"\n    Plot a CShape with its bounding box\n    \"\"\"\n    # Plot the shape\n    csh.plot(axes, label=\"Trace\")\n\n    # Plot its bounding box\n    csh.plot_bbox(axes, \"-+\",color=(\"k\",.2),label=\"bbox\")\n\n    # plt.axes parameters\n    axes.set_aspect('equal', adjustable='box')\n    axes.set_xlabel('Y-axis')\n    axes.set_ylabel('Z-axis')\n    axes.set_title(label)\n    axes.grid(visible=True)",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "nrv.utils.geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes"
          ],
          "code_str": "plt.Axes",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes",
            "()"
          ],
          "code_str": "axes",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape"
          ],
          "code_str": "geom.CShape",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape",
            "()"
          ],
          "code_str": "csh",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes",
            "()"
          ],
          "code_str": "axes",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "Axes",
            "()"
          ],
          "code_str": "axes",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.axes._axes.Axes"
        }
      ],
      "example": {
        "document": "examples/generic/19_build_geometry",
        "ref_id": "create-a-cshape-geometry",
        "headings": [
          "Create a CShape geometry"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": "if __name__ == '__main__':\n\n    fig, axs = plt.subplots(2, 2, layout=\"constrained\")\n\n    center = (1, 1)\n    radius = 2\n    circle = geom.Circle(center, radius)\n    plot_cshape(axes=axs[0,0], csh=circle, label=\"Circle 1\")\n\n\n    center = 1, 1\n    r = 3, 2\n    angle = -np.pi/3 # Rotation angle in degrees\n    ellipse = geom.Ellipse(center, r, angle)\n    plot_cshape(axes=axs[1,0], csh=ellipse, label=\"Ellipse 1\")\n\n\n    points = [[-6,1.5],[3,-2], [-2,1.5],[3,5]]\n    poly = geom.Polygon(vertices=points)\n    plot_cshape(axes=axs[0,1], csh=poly, label=\"Polygon 1\")\n\n\n    points = [[0, 2],[-.6,1.8], [-.8, 1.4], [-.8, 1], [-.6, .6], [0, .4], [.4, .6], [.4, .8], [.2, 1], [0, 1.2], [0, 1.4], [.2, 1.6], [.6, 1.8], [.6, 2], [.6, 2.2]]\n    poly = geom.Polygon(vertices=points)\n    plot_cshape(axes=axs[1,1], csh=poly, label=\"Polygon 2\")\n    axs[1,1].legend()",
      "names": [],
      "example": {
        "document": "examples/generic/19_build_geometry",
        "ref_id": "first-method-from-the-classes",
        "headings": [
          "Create a CShape geometry",
          "First method: from the classes"
        ]
      },
      "doc_lineno": 71
    },
    {
      "source": "if __name__ == '__main__':\n\n    fig, axs = plt.subplots(2, 2, layout=\"constrained\")\n\n    center = (1, 1)\n    radius = 2\n    circle = geom.create_cshape(center=center, radius=radius)\n    plot_cshape(axes=axs[0,0], csh=circle, label=\"Circle\")\n\n\n    center = 1, 1\n    r = 3, 2\n    angle = -np.pi/3 # Rotation angle in degrees\n    ellipse = geom.create_cshape(center=center, radius=r,rot=angle)\n    plot_cshape(axes=axs[1,0], csh=ellipse, label=\"Ellipse\")\n\n\n    points = [[-6,1.5],[3,-2], [-2,1.5],[3,5]]\n    poly1 = geom.create_cshape(vertices=points)\n    plot_cshape(axes=axs[0,1], csh=poly1, label=\"Polygon 1\")\n\n\n    points = [[0, 2],[-.6,1.8], [-.8, 1.4], [-.8, 1], [-.6, .6], [0, .4], [.4, .6], [.4, .8], [.2, 1], [0, 1.2], [0, 1.4], [.2, 1.6], [.6, 1.8], [.6, 2], [.6, 2.2]]\n    poly2 = geom.create_cshape(vertices=points)\n    plot_cshape(axes=axs[1,1], csh=poly2, label=\"Polygon 2\")\n    axs[1,1].legend()",
      "names": [],
      "example": {
        "document": "examples/generic/19_build_geometry",
        "ref_id": "second-method-from-create-cshape",
        "headings": [
          "Create a CShape geometry",
          "Second method: from create_cshape()"
        ]
      },
      "doc_lineno": 121
    },
    {
      "source": "if __name__ == '__main__':\n\n    fig, axs = plt.subplots(2, 2, layout=\"constrained\")\n\n    plot_cshape(axes=axs[0,0], csh=circle, label=\"Circle\")\n    circle.translate(y=3)\n    plot_cshape(axes=axs[0,0], csh=circle, label=\"Circle\")\n    inside_pts = circle.get_point_inside(100, delta=.5)\n    axs[0,0].scatter(*inside_pts.T, color=(.2,.6,.3,.2), label='generated points', zorder=5)\n\n\n    plot_cshape(axes=axs[1,0], csh=ellipse, label=\"Ellipse\")\n    ellipse.translate(z=-4)\n    plot_cshape(axes=axs[1,0], csh=ellipse, label=\"Ellipse\")\n    ellipse.rotate(60, degree=True)\n    plot_cshape(axes=axs[1,0], csh=ellipse, label=\"Ellipse\")\n    inside_pts = ellipse.get_point_inside(100, delta=.5)\n    axs[1,0].scatter(*inside_pts.T, color=(.2,.6,.3,.2), label='generated points', zorder=5)\n\n\n    plot_cshape(axes=axs[0,1], csh=poly1, label=\"Polygon 1\")\n    poly1.translate(y=3)\n    plot_cshape(axes=axs[0,1], csh=poly1, label=\"Polygon 1\")\n    poly1.rotate(60, degree=True)\n    plot_cshape(axes=axs[0,1], csh=poly1, label=\"Polygon 1\")\n    inside_pts = poly1.get_point_inside(100, delta=.2)\n    axs[0,1].scatter(*inside_pts.T, color=(.2,.6,.3,.2), label='generated points', zorder=5)\n\n\n    plot_cshape(axes=axs[1,1], csh=poly2, label=\"Polygon 2\")\n    poly2.translate(y=-1, z=-2)\n    plot_cshape(axes=axs[1,1], csh=poly2, label=\"Polygon 2\")\n    poly2.rotate(60, degree=True)\n    plot_cshape(axes=axs[1,1], csh=poly2, label=\"Polygon 2\")\n    inside_pts = poly2.get_point_inside(100, delta=.1)\n\n    p = axs[1,1].lines[::2]\n    p += [axs[1,1].lines[1]]\n    p += [axs[1,1].scatter(*inside_pts.T, color=(.2,.6,.3,.2), label='generated points', zorder=5)]\n\n    fig.legend(handles=p, labels=[\"trace\", \"translate\", \"rotate\", \"bbox\", \"get_point_inside\"], loc=(.4,.32))",
      "names": [],
      "example": {
        "document": "examples/generic/19_build_geometry",
        "ref_id": "implemented-methods",
        "headings": [
          "Create a CShape geometry",
          "Implemented methods"
        ]
      },
      "doc_lineno": 171
    }
  ],
  "examples/generic/20_create_population": [
    {
      "source": "from nrv.utils import geom\nfrom nrv.nmod._axon_population import axon_population\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pandas import DataFrame",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils"
          ],
          "code_str": "nrv.utils",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "nrv.utils"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "nmod",
            "_axon_population",
            "axon_population"
          ],
          "code_str": "axon_population",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_from",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "DataFrame",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pandas.DataFrame"
        }
      ],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "create-an-unplaced-population",
        "headings": [
          "Create an unplaced population"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "n_ax = 10\n# Randomly generate axon types and diameters\nax_type = np.random.randint(0,2,n_ax)\nax_diameters = np.random.random(n_ax)*20",
      "names": [],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "generate-population-from-data",
        "headings": [
          "Create an unplaced population",
          "Generate population from data"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "pop_tup = axon_population()\npop_tup.create_population_from_data((ax_type, ax_diameters))\npop_tup.axon_pop",
      "names": [],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "when-data-are-in-a-tupple",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "When data are in a tupple"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": "data = np.vstack((ax_type, ax_diameters))\npop_np = axon_population()\npop_np.create_population_from_data(data)\npop_np.axon_pop",
      "names": [],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "when-data-are-in-a-np-ndarray",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "When data are in a np.ndarray"
        ]
      },
      "doc_lineno": 182
    },
    {
      "source": "data = {\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":0}\npop_dict = axon_population()\npop_dict.create_population_from_data(data)\npop_dict.axon_pop",
      "names": [],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "when-data-are-in-a-dict",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "When data are in a dict"
        ]
      },
      "doc_lineno": 286
    },
    {
      "source": "data = DataFrame({\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":np.random.rand(len(ax_type))})\npop_df = axon_population()\npop_df.create_population_from_data(data)\npop_df.axon_pop",
      "names": [
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "when-data-are-in-a-dataframe",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "When data are in a dataframe"
        ]
      },
      "doc_lineno": 390
    },
    {
      "source": "n_ax = 20\n\npop_stat = axon_population()\npop_stat.create_population_from_stat(n_ax=n_ax)\npop_stat.axon_pop",
      "names": [],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "small-20-axons-population",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "Small 20-axons population"
        ]
      },
      "doc_lineno": 495
    },
    {
      "source": "fig, axs = plt.subplots(2, 2,  layout=\"constrained\")\nfor _i, n_ax in enumerate([20, 200, 2000, 20000]):\n    ax = axs[_i%2, _i//2]\n    pop_stat = axon_population()\n    pop_stat.create_population_from_stat(n_ax=n_ax)\n    pop_stat.hist(axes=ax, unmyel_color=(\"r\",.4), myel_color=(\"b\",.4), bins=50)\n    ax.set_title(f\"{n_ax} axons population\")\n    ax.set_xlabel(\"diameter\")\n    ax.set_ylabel(\"axons number\")\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "enumerate"
        }
      ],
      "example": {
        "document": "examples/generic/20_create_population",
        "ref_id": "histograms",
        "headings": [
          "Create an unplaced population",
          "Generate population from data",
          "Histograms"
        ]
      },
      "doc_lineno": 648
    }
  ],
  "examples/generic/21_place_population": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom nrv.utils import geom\nfrom nrv.nmod._axon_population import axon_population",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "utils"
          ],
          "code_str": "nrv.utils",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "nrv.utils"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "geom",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "nmod",
            "_axon_population",
            "axon_population"
          ],
          "code_str": "axon_population",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        }
      ],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "axon-population-placement",
        "headings": [
          "Axon Population Placement"
        ]
      },
      "doc_lineno": 36
    },
    {
      "source": "center = (0, 0)\nradius = 20\nn_ax=10\n\npop_circle = axon_population()\npop_circle.set_geometry(center=center, radius=radius)\n\npop_circle.fill_geometry(n_ax=n_ax)\npop_circle.axon_pop",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "quick-placement",
        "headings": [
          "Axon Population Placement",
          "Quick placement"
        ]
      },
      "doc_lineno": 63
    },
    {
      "source": "center = (0, 0)\nradius = 100\nn_ax = 625\n\npop_circle = axon_population()\npop_circle.set_geometry(center=center, radius=radius)\npop_circle.create_population_from_stat(n_ax=n_ax)\npop_circle.place_population(delta=2)  # default placer\npop_circle.get_ppop_info(verbose=True)",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "placement-in-a-circle-using-the-placer",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Placement in a Circle using the placer"
        ]
      },
      "doc_lineno": 224
    },
    {
      "source": "center_ellipse = (200, 0)\nr_ellipse = (120, 60)\nangle = np.pi/6\n\npop_ellipse = axon_population()\npop_ellipse.set_geometry(center=center_ellipse, radius=r_ellipse, rot=angle)\npop_ellipse.create_population_from_stat(n_ax=n_ax)\npop_ellipse.place_population(delta=2)\npop_ellipse.get_ppop_info(verbose=True)",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "placement-in-an-ellipse-using-the-placer-with-custom-delta",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Placement in an Ellipse using the placer with custom delta"
        ]
      },
      "doc_lineno": 256
    },
    {
      "source": "vertices = [(-100, 100), (0, 200), (100, 100), (60, 0), (0, -100), (-60, 0)]\npop_polygon = axon_population()\npoly = geom.Polygon(vertices=vertices)\npop_polygon.set_geometry(geometry=poly)\npop_polygon.create_population_from_stat(n_ax=n_ax)\npop_polygon.place_population(delta_in=2, delta_trace=20)\npop_polygon.get_ppop_info(verbose=True)",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "placement-in-a-polygon-using-the-placer-and-differen-deltas-in-delta-trace",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Placement in a Polygon using the placer and differen deltas_in/delta_trace"
        ]
      },
      "doc_lineno": 288
    },
    {
      "source": "x = np.linspace(-radius, radius, int(n_ax**0.5))\nxv, yv = np.meshgrid(x, x)\nxv = xv.reshape((n_ax,))\nyv = yv.reshape((n_ax,))\ntypes = np.random.randint(0, 2, n_ax)\nn_mye = types.sum()\ndiameters = np.zeros(n_ax)\ndiameters[types.astype(bool)] = np.random.uniform(2, 11, n_mye)\ndiameters[~types.astype(bool)] = np.random.uniform(.1,4, n_ax-n_mye)\n\npop_data = axon_population()\npop_data.set_geometry(center=center, radius=radius)\npop_data.create_population_from_data((types, diameters, xv, yv))\npop_data.get_ppop_info(verbose=True)",
      "names": [
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "bool"
          ],
          "code_str": "bool",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "bool"
        },
        {
          "import_components": [
            "bool"
          ],
          "code_str": "bool",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "bool"
        }
      ],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "placement-from-data-direct-y-z",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Placement from data (direct y/z)"
        ]
      },
      "doc_lineno": 321
    },
    {
      "source": "pop_packing = axon_population()\npop_packing.set_geometry(center=center, radius=radius)\npop_packing.create_population_from_stat(n_ax=n_ax)\npop_packing.place_population(method=\"packing\", delta=2, fit_to_size=True, n_iter=16000)\npop_packing.get_ppop_info(verbose=True)",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "placement-using-the-packing-method",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Placement using the \u201cpacking\u201d method"
        ]
      },
      "doc_lineno": 353
    },
    {
      "source": "pop_fvf = axon_population()\npop_fvf.generate(center=center, radius=radius, n_ax=n_ax, delta_in=5)\npop_fvf.get_ppop_info(verbose=True)",
      "names": [],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "all-in-one-using-generate",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "All in one using generate()"
        ]
      },
      "doc_lineno": 383
    },
    {
      "source": "def plot_pop(axes:plt.Axes, pop:axon_population, title:str):\n    \"\"\"\n    Plot an axon population in `axes`\n    \"\"\"\n    pop.plot(axes)\n    axes.set_title(title)\n    axes.set_aspect('equal', adjustable='box')\n    axes.set_xlabel('Y-axis')\n    axes.set_ylabel('Z-axis')\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))\nplot_pop(axs[0, 0], pop_circle, \"Circle - placer (delta=2)\")\nplot_pop(axs[0, 1], pop_ellipse, \"Ellipse - placer (delta=2, n_iter=2000)\")\nplot_pop(axs[0, 2], pop_polygon, \"Polygon - placer (delta_in=2, delta_trace=10)\")\nplot_pop(axs[1, 0], pop_data, \"Circle - from data (direct y/z)\")\nplot_pop(axs[1, 1], pop_packing, \"Circle - packing (fit_to_size=True, n_iter=17000)\")\nplot_pop(axs[1, 2], pop_fvf, \"Circle - generate\")\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "str"
        }
      ],
      "example": {
        "document": "examples/generic/21_place_population",
        "ref_id": "plotting",
        "headings": [
          "Axon Population Placement",
          "Tunable parameters",
          "Plotting"
        ]
      },
      "doc_lineno": 410
    }
  ],
  "examples/generic/22_access_subpopulation": [
    {
      "source": "from nrv.nmod._axon_population import axon_population\nimport matplotlib.pyplot as plt\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "nrv",
            "nmod",
            "_axon_population",
            "axon_population"
          ],
          "code_str": "axon_population",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "examples/generic/22_access_subpopulation",
        "ref_id": "access-axon-sub-poplation",
        "headings": [
          "Access axon sub-poplation"
        ]
      },
      "doc_lineno": 36
    },
    {
      "source": "center = (100, 200)\nr = 300, 100\nangle = -np.pi/12\nn_ax = 2000\ndelta=1,\ndelta_trace=10\n\npop_1 = axon_population(center=center, radius=r, rot=angle, n_ax=n_ax, delta=delta, delta_trace=delta_trace)\n\nexpr_1 = \"diameters > 6\"\nexpr_2 = \"types == 0\"\nexpr_3 = \"diameters < 6 & diameters > 0.3\"\nexpr_4 = \"(y-100)**2 + (z-200)**2 < 50**2\"\n\nfig, axs = plt.subplots(2,2)\npop_1.plot(axs[0,0], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[0,0], expr=expr_1, myel_color=\"b\", unmyel_color=\"r\")\naxs[0,0].set_title(expr_1)\n\npop_1.plot(axs[1,0], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[1,0], expr=expr_2, myel_color=\"b\", unmyel_color=\"r\")\naxs[1,0].set_title(expr_2)\n\npop_1.plot(axs[0,1], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[0,1], expr=expr_3, myel_color=\"b\", unmyel_color=\"r\")\naxs[0,1].set_title(expr_3)\n\npop_1.plot(axs[1,1], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[1,1], expr=expr_4, myel_color=\"b\", unmyel_color=\"r\")\naxs[1,1].set_title(expr_4)\n\nfig.text(.5,.9, \"sub-population ($expr$):\", ha=\"center\", va=\"center\", size=15)\n\n\ncenter = (100, 200)\nr = 300, 100\nangle = -np.pi/12\nn_ax = 2000\ndelta=1,\ndelta_trace=10\n\npop_1 = axon_population(center=center, radius=r, rot=angle, n_ax=n_ax, delta=delta, delta_trace=delta_trace)\n\nlab1 = \"d_over_6\"\npop_1.add_mask(pop_1.axon_pop[\"diameters\"]>6, label=lab1)\n\nlab2 = \"unmyelinated\"\npop_1.add_mask(pop_1.axon_pop[\"types\"]==0, label=lab2)\n\nlab31 = \"d_under_6\"\nlab32 = \"d_over_01\"\npop_1.add_mask(~pop_1.axon_pop[\"d_over_6\"], label=lab31)\npop_1.add_mask(pop_1.axon_pop[\"diameters\"]>.1, label=lab32)\n\n\npop_1.add_mask((pop_1.axon_pop[\"y\"]-center[0])**2+(pop_1.axon_pop[\"z\"]-center[1])**2 < 50**2)",
      "names": [],
      "example": {
        "document": "examples/generic/22_access_subpopulation",
        "ref_id": "from-pandas-dataframe-eval-expression",
        "headings": [
          "Access axon sub-poplation",
          "From pandas.DataFrame.eval() expression"
        ]
      },
      "doc_lineno": 57
    },
    {
      "source": "fig, axs = plt.subplots(2,2)\npop_1.plot(axs[0,0], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[0,0], mask_labels=lab1, myel_color=\"b\", unmyel_color=\"r\")\naxs[0,0].set_title(lab1)\n\npop_1.plot(axs[1,0], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[1,0], mask_labels=lab2, myel_color=\"b\", unmyel_color=\"r\")\naxs[1,0].set_title(lab2)\n\npop_1.plot(axs[0,1], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[0,1], mask_labels=[lab31, lab32], myel_color=\"b\", unmyel_color=\"r\")\naxs[0,1].set_title([lab31, lab32])\n\npop_1.plot(axs[1,1], myel_color=(\"b\", .2), unmyel_color=(\"r\",.2))\npop_1.plot(axs[1,1], mask_labels=\"mask_0\", myel_color=\"b\", unmyel_color=\"r\")\naxs[1,1].set_title(\"mask_0 (default label)\")\n\nfig.text(.5,.9, \"sub-population ($mask_labels$):\", ha=\"center\", va=\"center\", size=15)\n\nplt.show()",
      "names": [],
      "example": {
        "document": "examples/generic/22_access_subpopulation",
        "ref_id": "id1",
        "headings": [
          "Access axon sub-poplation",
          "From pandas.DataFrame.eval() expression"
        ]
      },
      "doc_lineno": 148
    }
  ],
  "examples/generic/23_subpop_iclamp": [
    {
      "source": "import nrv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nif __name__ == '__main__':\n    # --- Nerve and Fascicle Setup ---\n    ner = nrv.nerve(length=5000, diameter=500, Outer_D=5)\n\n    # Fascicle 1: Circle\n    fasc1 = nrv.fascicle(diameter=200, ID=1)\n    fasc1_y, fasc1_z = -100, -60\n    ner.add_fascicle(fasc1, y=fasc1_y, z=fasc1_z)\n\n    # Fascicle 2: Ellipse\n    fasc2 = nrv.fascicle(ID=2)\n    fasc2.set_geometry(diameter=(120, 60), rot=30, degree=True)\n    fasc2_y, fasc2_z = 100, -70\n    ner.add_fascicle(fasc2, y=fasc2_y, z=fasc2_z)\n\n    # Fascicle 3: Polygon\n    vertices = [(-80, 130), (0, 180), (80, 130), (50, 30), (0, -30), (-50, 30)]\n    fasc3 = nrv.fascicle(ID=3)\n    fasc3.set_geometry(geometry=nrv.create_cshape(vertices=vertices))\n    fasc3_y, fasc3_z = 0, 100\n    ner.add_fascicle(fasc3, y=fasc3_y, z=fasc3_z, rot=-np.pi/6)\n\n    # --- Fill fascicles with axon populations ---\n    n_ax = 200\n    for fasc in ner.fascicles.values():\n        fasc.fill(n_ax=n_ax, percent_unmyel=0.7, delta=2)\n\n    # --- Plot nerve ---\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ner.plot(ax)\n\n    # --- Select subpopulations and apply IClamp ---\n    # Example: stimulate only large-diameter axons in fascicle 1, and only unmyelinated in fascicle 3\n    i_pos = 0.5\n    i_start = 0.2\n    i_dur = 0.5\n    i_amp = 2.0\n\n    # For fascicle 1: select axons with diameter > 8 um\n    expr_large = \"diameters > 8\"\n    fasc1.insert_I_Clamp(\n        position=i_pos,  # middle of axon\n        t_start=i_start,\n        duration=i_dur,\n        amplitude=i_amp,  # nA\n        expr=expr_large\n    )\n\n    # For fascicle 2: select unmyelinated axons\n    expr_local = f\"(y-{fasc2_y})**2 + (z-{fasc2_z})**2 < 25**2\"\n    mask_local = fasc2.axons.get_mask(expr=expr_local, otype=\"list\")\n    fasc2.insert_I_Clamp(\n        position=i_pos,\n        t_start=i_start,\n        duration=i_dur,\n        amplitude=i_amp,\n        ax_list=mask_local,\n    )\n\n    # For fascicle 3: stimulate only large unmyelinated axons\n    expr_unmyel = \"types == 0\"\n    fasc2.axons.add_mask(data=expr_unmyel, label=\"umyel\")\n    expr_ularge = \"diameters > 1\"\n    mask_u = fasc2.axons.add_mask(data=expr_ularge, label=\"ularge\")\n\n    fasc3.insert_I_Clamp(\n        position=i_pos,\n        t_start=i_start,\n        duration=i_dur,\n        amplitude=i_amp,\n        mask_labels=[\"umyel\", \"ularge\"],\n    )\n\n    # --- Run simulation ---\n    results = ner.simulate(t_sim=2, postproc_script=\"is_recruited\")",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "ner",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc1",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc1",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc2",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc2",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc3",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc3",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "nrv.nmod.results._nerve_results.nerve_results"
        }
      ],
      "example": {
        "document": "examples/generic/23_subpop_iclamp",
        "ref_id": "intracellular-stimulation-of-axon-subpopulations",
        "headings": [
          "Intracellular stimulation of axon subpopulations"
        ]
      },
      "doc_lineno": 40
    },
    {
      "source": "if __name__ == '__main__':\n    fig, ax = plt.subplots(figsize=(7, 7))\n    results.plot_recruited_fibers(ax)\n    ax.set_xlabel(\"z-axis (\u00b5m)\")\n    ax.set_ylabel(\"y-axis (\u00b5m)\")\n    ax.set_title(\"Recruited fibers after IClamp on subpopulations\")\n    plt.show()",
      "names": [],
      "example": {
        "document": "examples/generic/23_subpop_iclamp",
        "ref_id": "plot-recruited-fibers",
        "headings": [
          "Intracellular stimulation of axon subpopulations",
          "Plot recruited fibers"
        ]
      },
      "doc_lineno": 154
    }
  ],
  "examples/generic/24_mp_nerve_sim": [
    {
      "source": "import nrv\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "examples/generic/24_mp_nerve_sim",
        "ref_id": "parallel-nerve-simulation",
        "headings": [
          "Parallel Nerve Simulation"
        ]
      },
      "doc_lineno": 31
    },
    {
      "source": "def create_nerve():\n    ## parameters\n    # nerve parameters\n    outer_d = 5         # in mm\n    nerve_d = 500       # in um\n    nerve_l = 5000      # in um\n    # first fascicle\n    fasc1_d = 200       # in um\n    fasc1_y = -100      # in um\n    fasc1_z = 0         # in um\n    # second fascicle\n    fasc2_d = 100       # in um\n    fasc2_y = 100       # in um\n    fasc2_z = 0         # in um\n    # stimulus\n    t_start = 0.1       #start of the pulse, in ms\n    t_pulse = 0.1       #duration of the pulse, in ms\n    amp_pulse = 60      #amplitude of the pulse, in uA\n\n    # create objects\n    nerve = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d)\n    fascicle_1 = nrv.fascicle(diameter=fasc1_d, ID=1)\n    fascicle_2 = nrv.fascicle(diameter=fasc2_d, ID=2)\n    nerve.add_fascicle(fascicle=fascicle_1, y=fasc1_y, z=fasc1_z)\n    nerve.add_fascicle(fascicle=fascicle_2, y=fasc2_y, z=fasc2_z)\n\n    # create axon population\n    n_ax = 100      #size of the axon population\n    fascicle_1.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", delta=5)\n\n    fascicle_2.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", delta=5)\n\n    ## add electrode and stimulation\n    # electrode\n    extra_stim = nrv.FEM_stimulation(endo_mat=\"endoneurium_ranck\",peri_mat=\"perineurium\", epi_mat=\"epineurium\", ext_mat=\"saline\")\n    life_d = 25                                 # LIFE diamter in um\n    life_length = 1000                          # LIFE active-site length in um\n    life_x_offset = (nerve_l-life_length)/2     # x position of the LIFE (centered)\n    life_y_c_2 = fasc2_y                        # LIFE_2 y-coordinate (in um)\n    life_z_c_2 = fasc2_z                        # LIFE_1 z-coordinate (in um)\n    elec_2 = nrv.LIFE_electrode(\"LIFE_2\", life_d, life_length, life_x_offset, life_y_c_2, life_z_c_2) # LIFE in the fascicle 2\n    # stimulus\n    pulse_stim = nrv.stimulus()\n    pulse_stim.pulse(t_start, -amp_pulse, t_pulse)      #cathodic\n    #Attach electrodes to the extra_stim object\n    extra_stim.add_electrode(elec_2, pulse_stim)\n    nerve.attach_extracellular_stimulation(extra_stim)\n    fig, ax = plt.subplots(1, 1, figsize=(6,6))\n    nerve.plot(ax)\n    ax.set_xlabel(\"z-axis (\u00b5m)\")\n    ax.set_ylabel(\"y-axis (\u00b5m)\")\n    plt.close(fig)\n    return nerve",
      "names": [],
      "example": {
        "document": "examples/generic/24_mp_nerve_sim",
        "ref_id": "step-1-define-nerve-geometry",
        "headings": [
          "Parallel Nerve Simulation",
          "Step 1: Define Nerve Geometry"
        ]
      },
      "doc_lineno": 50
    },
    {
      "source": "def simulate_nerve(nerve, nproc=4):\n    nrv.parameters.set_nmod_ncore(nproc)\n    results = nerve(t_sim=3,postproc_script=\"is_recruited\")\n    return results",
      "names": [],
      "example": {
        "document": "examples/generic/24_mp_nerve_sim",
        "ref_id": "step-2-simulate-the-nerve",
        "headings": [
          "Parallel Nerve Simulation",
          "Step 2: Simulate the Nerve"
        ]
      },
      "doc_lineno": 125
    },
    {
      "source": "def prostprocessing(results):\n    fig, ax = plt.subplots(1, 1, figsize=(6,6))\n    results.plot_recruited_fibers(ax)\n    ax.set_xlabel(\"z-axis (\u00b5m)\")\n    ax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "examples/generic/24_mp_nerve_sim",
        "ref_id": "step-3-post-process-results",
        "headings": [
          "Parallel Nerve Simulation",
          "Step 3: Post-process Results"
        ]
      },
      "doc_lineno": 151
    },
    {
      "source": "if __name__ == \"__main__\":\n\n    sim_nerve = create_nerve()\n    results = simulate_nerve(sim_nerve, nproc=4)\n    prostprocessing(results)",
      "names": [],
      "example": {
        "document": "examples/generic/24_mp_nerve_sim",
        "ref_id": "main-execution-script",
        "headings": [
          "Parallel Nerve Simulation",
          "Main Execution Script"
        ]
      },
      "doc_lineno": 175
    }
  ],
  "examples/generic/25_test_fit_fasc": [
    {
      "source": "import nrv\n\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import splprep, splev\n\nimage_path = nrv.__path__[0] + \"/_misc/geom/smoothed_edges_white.png\"\n\nd_nerve = 1_000 # um\nl_nerve = 10_000 # um",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "simulation-of-realistic-geometry",
        "headings": [
          "Simulation of Realistic Geometry"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": "def load_and_process_image(ax:plt.Axes)->np.ndarray:\n    \"\"\"\n    Load the image and process it to simplify contour detection.\n    \"\"\"\n    im = cv2.imread(image_path)    # Load image\n    imgray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    ret, thresh = cv2.threshold(imgray, 127, 255, 0)\n    ax.imshow(im, label=\"image\")\n    ax.set_title(\"Original image ($nrv/\\\\_misc/geom/$)\")\n    return thresh",
      "names": [],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "step-1-load-and-process-the-image",
        "headings": [
          "Simulation of Realistic Geometry",
          "Step 1: Load and process the image"
        ]
      },
      "doc_lineno": 69
    },
    {
      "source": "def extract_contour_points(ax:plt.Axes, thresh)->list:\n    \"\"\"\n    Detect all contours in the image and keep only the points from fascicle contours. Additionally, rescale the point positions from pixels to micrometers to match the desired nerve diameter.\n    \"\"\"\n\n    # Detect contours on the binary image using cv2.CHAIN_APPROX_SIMPLE\n    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    hc_list = hierarchy.squeeze()\n\n    # ID of the inner nerve contour\n    # As image frame is 0, outer_nerve is 1\n    nerve_id = 2\n\n    # Center nerve at (0,0)\n    points = contours[nerve_id].squeeze()\n    center_pix = np.mean(points, axis=0)\n    nerve_points = points - center_pix\n\n    # Convert pixel index to micrometers\n    radius_pix = np.max(np.abs(nerve_points))\n    rescal_factor = d_nerve / (2 * radius_pix)\n    # Flip ordinate axis (as pixel index increases downward)\n    rescal_factor *= np.array([1, -1])\n\n    nerve_points *= rescal_factor\n\n    ax.plot(*nerve_points.T, \"--\", color=(\"k\", .3))\n\n    theta = np.linspace(0, 2 * np.pi)\n    ax.plot(d_nerve * np.cos(theta) / 2, d_nerve * np.sin(theta) / 2, color=\"k\")\n\n    fascicles_points = []\n    for _i, _c in enumerate(contours):\n        if hc_list[_i, -1] == nerve_id:\n            points = _c.squeeze()\n            fascicles_points += [(points - center_pix) * rescal_factor]\n            ax.plot(*fascicles_points[-1].T)\n    ax.set_aspect(\"equal\")\n    ax.set_title(\"Extracted contours\")\n\n    return fascicles_points",
      "names": [
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "list"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "enumerate"
        }
      ],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "step-2-extract-contour-points-from-the-image",
        "headings": [
          "Simulation of Realistic Geometry",
          "Step 2: Extract contour points from the image"
        ]
      },
      "doc_lineno": 100
    },
    {
      "source": "def generate_nerve(ax:plt.Axes, fascicles_points:list):\n    \"\"\"\n    Generate a nerve from the fascicle contour points, with a LIFE electrode at the center of the first fascicle.\n    \"\"\"\n    ner = nrv.nerve(diameter=d_nerve, length=l_nerve)\n    n_vertices = 50\n    for _i_fasc, _pts in enumerate(fascicles_points):\n        i_pts = np.arange(n_vertices + 1) * _pts.shape[0] // n_vertices\n        i_pts[-1] -= 1\n        _us_pts = _pts[i_pts]  # Undersample the vertices\n        poly_fasc = nrv.create_cshape(vertices=_us_pts)\n        fasc = nrv.fascicle(ID=_i_fasc)\n        fasc.set_geometry(geometry=poly_fasc)\n        ner.add_fascicle(fasc)\n\n    for fasc in ner.fascicles.values():\n        fasc.fill(n_ax=100, delta_trace=10)\n\n    extra_stim = nrv.FEM_stimulation(endo_mat=\"endoneurium_ranck\", peri_mat=\"perineurium\", epi_mat=\"epineurium\", ext_mat=\"saline\")\n\n    life_d = 25                                 # LIFE diameter in um\n    life_length = 1000                          # LIFE active-site length in um\n    life_x_offset = (l_nerve - life_length) / 2 # x position of the LIFE (centered)\n    life_y_c_2, life_z_c_2 = ner.fascicles[0].center  # LIFE_2 y-coordinate (in um)\n\n    elec_2 = nrv.LIFE_electrode(\"LIFE_2\", life_d, life_length, life_x_offset, life_y_c_2, life_z_c_2) # LIFE in fascicle 2\n\n    # Stimulus\n    t_start = 0.1       # Start of the pulse, in ms\n    t_pulse = 0.1       # Duration of the pulse, in ms\n    amp_pulse = 60      # Amplitude of the pulse, in uA\n\n    pulse_stim = nrv.stimulus()\n    pulse_stim.pulse(t_start, -amp_pulse, t_pulse)      # Cathodic\n\n    # Attach electrodes to the extra_stim object\n    extra_stim.add_electrode(elec_2, pulse_stim)\n    ner.attach_extracellular_stimulation(extra_stim)\n\n    ner.plot(ax)\n    ax.set_title(\"NRV geometry\")\n    return ner",
      "names": [
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "list"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "enumerate"
        }
      ],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "step-3-generate-a-nerve-from-fascicle-contour-points",
        "headings": [
          "Simulation of Realistic Geometry",
          "Step 3: Generate a nerve from fascicle contour points"
        ]
      },
      "doc_lineno": 159
    },
    {
      "source": "def simulate_and_plot_res(ax:plt.Axes, ner:nrv.nerve):\n    res = ner.simulate(t_sim=3, postproc_script=\"is_recruited\")\n    res.plot_recruited_fibers(ax)\n    ax.set_title(\"Recruited Fibers\")\n    ax.set_xlabel(\"z-axis (\u00b5m)\")\n    ax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "step-4-simulate-the-nerve-and-plot-recruited-fibers",
        "headings": [
          "Simulation of Realistic Geometry",
          "Step 4: Simulate the nerve and plot recruited fibers"
        ]
      },
      "doc_lineno": 219
    },
    {
      "source": "if __name__ == \"__main__\":\n    plt.ion()\n    fig, axs = plt.subplots(2, 2, figsize=(10, 6), layout=\"constrained\")\n\n    thresh = load_and_process_image(axs[0, 0])\n    fasc_pts = extract_contour_points(axs[0, 1], thresh)\n    ner = generate_nerve(axs[1, 0], fasc_pts)\n    simulate_and_plot_res(axs[1, 1], ner)\n    plt.show()",
      "names": [],
      "example": {
        "document": "examples/generic/25_test_fit_fasc",
        "ref_id": "main-execution-script",
        "headings": [
          "Simulation of Realistic Geometry",
          "Main Execution Script"
        ]
      },
      "doc_lineno": 242
    }
  ],
  "examples/generic/index": [],
  "examples/generic/sg_execution_times": [],
  "examples/index": [],
  "examples/optim/index": [],
  "examples/optim/o01_nerve_optimization": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport nrv\n\nnp.random.seed(4444)\n\nif __name__ == '__main__':\n    # test_name = \"Example_\"\n    # dir_res = f\"./{test_name}/\"\n    # if not os.path.isdir(dir_res):\n    #     os.mkdir(dir_res)\n\n    ## Cost function definition\n    my_cost0 = nrv.cost_function()\n\n    # Static context\n    # nerve_file = dir_res + \"nerve.json\"\n\n    outer_d = 5 # mm\n    nerve_d = 300 # um\n    nerve_l = 5000 # um\n\n    fasc1_d = 250 # um\n    fasc1_y = 0\n    fasc1_z = 0\n    n_ax1 = 20\n\n\n    nerve_1 = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d)\n    nerve_1.verbose = False\n\n    fascicle_1 = nrv.fascicle(diameter=fasc1_d, ID=0)      #we can add diameter here / no need to call define_circular_contour (not tested)\n    fascicle_1.fill(n_ax=n_ax1, percent_unmyel=0, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\",delta=5)\n    nerve_1.add_fascicle(fascicle=fascicle_1, y=fasc1_y, z=fasc1_z)\n\n    # LIFE in neither of the two fascicles\n    LIFE_stim0 = nrv.FEM_stimulation()\n    LIFE_stim0.reshape_nerve(Length=nerve_l)\n    life_d = 25 # um\n    life_length = 1000 # um\n    life_x_0_offset = life_length/2\n    life_y_c_0 = 0\n    life_z_c_0 = 0\n    elec_0 = nrv.LIFE_electrode(\"LIFE\", life_d, life_length, life_x_0_offset, life_y_c_0, life_z_c_0)\n\n    dummy_stim = nrv.stimulus()\n    dummy_stim.pulse(0, 0.1, 10)\n    LIFE_stim0.add_electrode(elec_0, dummy_stim)\n    nerve_1.attach_extracellular_stimulation(LIFE_stim0)\n\n    fig, ax = plt.subplots(1, 1, figsize=(6,6))\n    nerve_1.plot(ax)\n\n    nerve_1.compute_electrodes_footprints()\n    nerve_1.set_parameters(postproc_script=\"is_recruited\")\n    static_context = nerve_1.save(save=False, extracel_context=True)\n    del nerve_1\n\n\n    t_sim = 5\n    dt = 0.005\n    kwarg_sim = {\n        \"dt\":dt,\n        \"t_sim\":t_sim,\n        \"loaded_footprints\":True,\n    }\n\n    my_cost0.set_static_context(static_context, **kwarg_sim)\n\n    # Context modifier\n    t_start = 1\n    I_max_abs = 100\n\n    cm_0 = nrv.biphasic_stimulus_CM(start=t_start, s_cathod=\"0\", t_cathod=\"1\", s_anod=0)\n    my_cost0.set_context_modifier(cm_0)\n\n    # Cost evaluation\n    costR = nrv.recrutement_count_CE(reverse=True)\n    costC = nrv.stim_energy_CE()\n\n    cost_evaluation = costR + 0.01 * costC\n    my_cost0.set_cost_evaluation(cost_evaluation)\n\n\n    ## Optimizer\n    pso_kwargs = {\n        \"maxiter\" : 15,\n        \"n_particles\" : 10,\n        \"opt_type\" : \"local\",\n        \"options\": {'c1': 0.55, 'c2': 0.55, 'w': 0.75, 'k': 2, 'p': 1},\n        \"bh_strategy\": \"reflective\",\n    }\n    pso_opt = nrv.PSO_optimizer(**pso_kwargs)\n\n    ## Problem definition\n    my_prob = nrv.Problem()\n    my_prob.costfunction = my_cost0\n    my_prob.optimizer = pso_opt\n\n\n    # Optimization\n    t_end = 0.5\n    bounds0 = (\n        (0, I_max_abs),\n        (0.01, t_end),\n    )\n    pso_kwargs_pb_0 = {\n        \"dimensions\" : 2,\n        \"bounds\" : bounds0,\n        \"comment\":\"pulse\"}\n\n    res0 = my_prob(**pso_kwargs_pb_0)\n\n    res_sim = res0.compute_best_pos(my_cost0)\n\n    # Plot results on master process\n    fig_costs, axs_costs = plt.subplots(2, 1)\n\n    stim = cm_0(res0.x, static_context).extra_stim.stimuli[0]\n    stim.plot(axs_costs[0])\n    axs_costs[0].set_xlabel(\"best stimulus shape\")\n    axs_costs[0].set_xlabel(\"time (ms)\")\n    axs_costs[0].set_ylabel(\"amplitude (\u00b5A)\")\n\n    res0.plot_cost_history(axs_costs[1])\n    axs_costs[1].set_xlabel(\"optimization iteration\")\n    axs_costs[1].set_ylabel(\"cost\")\n    fig_costs.tight_layout()\n\n    fig_best, ax_best = plt.subplots(figsize=(6,6))\n    ax_best.set_title(\"recruited fibers\")\n    res_sim.plot_recruited_fibers(ax_best)\n\n    plt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "os"
          ],
          "code_str": "os",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "os"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve_1",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim0",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode"
          ],
          "code_str": "nrv.LIFE_electrode",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_0",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_0",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim0",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 52,
          "end_lineno": 52,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve_1",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM"
          ],
          "code_str": "nrv.biphasic_stimulus_CM",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE"
          ],
          "code_str": "nrv.recrutement_count_CE",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE",
            "()"
          ],
          "code_str": "costR",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE"
          ],
          "code_str": "nrv.stim_energy_CE",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE",
            "()"
          ],
          "code_str": "costC",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE",
            "()"
          ],
          "code_str": "costR",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE",
            "()"
          ],
          "code_str": "costC",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer"
          ],
          "code_str": "nrv.PSO_optimizer",
          "lineno": 94,
          "end_lineno": 94,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer",
            "()"
          ],
          "code_str": "pso_opt",
          "lineno": 94,
          "end_lineno": 94,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "Problem"
          ],
          "code_str": "nrv.Problem",
          "lineno": 97,
          "end_lineno": 97,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 97,
          "end_lineno": 97,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 98,
          "end_lineno": 98,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer",
            "()"
          ],
          "code_str": "pso_opt",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 113,
          "end_lineno": 113,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 113,
          "end_lineno": 113,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 115,
          "end_lineno": 115,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 118,
          "end_lineno": 118,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 120,
          "end_lineno": 120,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 131,
          "end_lineno": 131,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 135,
          "end_lineno": 135,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/optim/o01_nerve_optimization",
        "ref_id": "optimization-pulse-stimulus-on-nerve",
        "headings": [
          "Optimization Pulse Stimulus on Nerve"
        ]
      },
      "doc_lineno": 224
    }
  ],
  "examples/optim/o02_stimulus_CM": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\n# Generate a dummy static context\nt_sim=10\nl_ax = 10000\nax = nrv.myelinated(y=0, z=0, L=l_ax)\nE1 = nrv.point_source_electrode(x=l_ax/2,y=0, z=100)\ndummy_stim = nrv.stimulus()\n\nextra_stim = nrv.stimulation(\"epineurium\")\nextra_stim.add_electrode(E1, dummy_stim)\nax.attach_extracellular_stimulation(extra_stim)\nstatic_context = ax.save(extracel_context=True)\n\n# Sets of tunning parameters\nX1 = np.array([1, -80])\nX2 = np.array([4, -60])\nX3 = np.array([1, -50, 4, -40])\nX4 = np.array([1, -40, 2.5, -10, 4, -30])\n\nX = [X1, X2, X3, X4]\n\n# context modifiers parameters\ndt = 0.005\nt_shift = 1\namp_start = 0\namp_stop = 0\nfixed_order = False\nt_end = t_sim-3\n\n## Spline interpolation\n# Generate the context modifiers\nkwrgs_interp = {\n    \"dt\": dt,\n    \"t_shift\": t_shift,\n    \"amp_start\": amp_start,\n    \"amp_stop\": amp_stop,\n    \"intertype\": \"spline\",\n    \"fixed_order\": fixed_order,\n    \"t_end\": t_end,\n    }\ntest_stim_CM = nrv.stimulus_CM(interpolator=nrv.interpolate_Npts, intrep_kwargs=kwrgs_interp, t_sim=t_sim)\n\n# Plot stimuli for every points\nfig1, ax1 = plt.subplots()\nax1.set_title(\"Spline interpolation\")\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n\n    plt.figure(1)\n    stim.plot(ax1, label=f\"x={x}\")\n    ax1.plot(t_shift+x[::2], x[1::2], 'ok')\n\nax1.grid()\nax1.legend()\nax1.set_xlabel('time (ms)')\nax1.set_ylabel('amplitude (\u00b5A)')\nax1.set_xticks(\n    [0, 2, 4, 6, 8, 10, t_shift, t_shift+t_end, t_sim],\n    labels=[\"0\", \"2\", \"4\", \"6\", \"8\", \"10\", \"$t_{shift}$\", \"$t_{shift}$+$t_{end}$\", \"$t_{sim}$\"]\n)\n\n\n## Linear\n# Generate the context modifiers\n\nkwrgs_interp[\"intertype\"] = \"linear\"\n\n# Plot stimuli for every points\nfig2, ax2 = plt.subplots()\nax2.set_title(\"Linear interpolation\")\nfor i, x in enumerate(X):\n    # for this example only the stimulus of the axon\n    # generated from the context modifier is required\n\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n\n    plt.figure(1)\n    stim.plot(ax2, label=f\"x={x}\")\n    ax2.plot(t_shift+x[::2], x[1::2], 'ok')\n\nax2.grid()\nax2.legend()\nax2.set_xlabel('time (ms)')\nax2.set_ylabel('amplitude (\u00b5A)')\nax2.set_xticks([0, 2, 4, 6, 8, 10, t_shift, t_shift+t_end, t_sim], labels=[\"0\", \"2\", \"4\", \"6\", \"8\", \"10\", \"$t_{shift}$\", \"$t_{shift}$+$t_{end}$\", \"$t_{sim}$\"])\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "ax",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM"
          ],
          "code_str": "nrv.stimulus_CM",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.stimulus_CM"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 77,
          "end_lineno": 77,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 81,
          "end_lineno": 81,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 81,
          "end_lineno": 81,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 83,
          "end_lineno": 83,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 85,
          "end_lineno": 85,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/optim/o02_stimulus_CM",
        "ref_id": "understanding-context-modifiers-stimulus-cm",
        "headings": [
          "Understanding context modifiers: stimulus_CM"
        ]
      },
      "doc_lineno": 54
    }
  ],
  "examples/optim/o03_biphasic_stimulus_CM": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\n# Generate a dummy static context\nt_sim=10\nl_ax = 10000\nax = nrv.myelinated(y=0, z=0, L=l_ax)\nE1 = nrv.point_source_electrode(x=l_ax/2,y=0, z=100)\ndummy_stim = nrv.stimulus()\n\nextra_stim = nrv.stimulation(\"epineurium\")\nextra_stim.add_electrode(E1, dummy_stim)\nax.attach_extracellular_stimulation(extra_stim)\nstatic_context = ax.save(extracel_context=True)\n\nlinestyles = [\"-\", \"--\", \":\"]\n\n\n# set t_cathod as a variable\ntest_stim_CM = nrv.biphasic_stimulus_CM(start=1, t_cathod=\"0\", s_cathod=100, s_ratio=0.2, t_inter=0.1)\n\n\n# For each of this points we are going to generate the axon\n# from static context with the context modifier\n# and then plot the stimulus\n\nX = np.array([\n    [.5],\n    [1],\n    [2],\n])\n\nfig1, axs1 = plt.subplots(2,2)\naxs1[0,0].set_title(\"X = [$t_{cathod}$]\")\nfor i, x in enumerate(X):\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[0,0], linestyle=linestyles[i], label=f\"x={x}\")\n\naxs1[0,0].grid()\naxs1[0,0].legend()\naxs1[0,0].set_xlabel('time (ms)')\naxs1[0,0].set_ylabel('amplitude (\u00b5A)')\n\n\n# t_strat\ntest_stim_CM.set_parameters(start=\"0\", t_cathod=1, s_cathod=100, s_ratio=0.2, t_inter=0.1)\n\nX = np.array([\n    [.5],\n    [1],\n    [2],\n])\n\n\naxs1[0, 1].set_title(\"X := [$t_{start}$]\")\nfor i, x in enumerate(X):\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    plt.figure(1)\n    stim.plot(axs1[0, 1], linestyle=linestyles[i], label=f\"x={x}\")\n\naxs1[0, 1].grid()\naxs1[0, 1].legend()\naxs1[0, 1].set_xlabel('time (ms)')\naxs1[0, 1].set_ylabel('amplitude (\u00b5A)')\n\n\n# s_cathod\ntest_stim_CM.set_parameters(start=1, t_cathod=1, s_cathod=\"0\", s_ratio=0.2, t_inter=0.1)\n\nX = np.array([\n    [10],\n    [50],\n    [100],\n])\n\naxs1[1, 0].set_title(\"X := [$s_{cathod}$]\")\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[1, 0], linestyle=linestyles[i], label=f\"x={x}\")\n\naxs1[1, 0].grid()\naxs1[1, 0].legend()\naxs1[1, 0].set_xlabel('time (ms)')\naxs1[1, 0].set_ylabel('amplitude (\u00b5A)')\n\n# s_cathod\ntest_stim_CM.set_parameters(start=1, t_cathod=1, s_cathod=100, s_ratio=\"0\", t_inter=0.1)\n\nX = np.array([\n    [.1],\n    [.2],\n    [.5],\n])\n\n\naxs1[1, 1].set_title(\"X := [$s_{ratio}$]\")\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[1, 1], linestyle=linestyles[i], label=f\"x={x}\")\n\naxs1[1, 1].grid()\naxs1[1, 1].legend()\naxs1[1, 1].set_xlabel('time (ms)')\naxs1[1, 1].set_ylabel('amplitude (\u00b5A)')\nfig1.tight_layout()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "ax",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM"
          ],
          "code_str": "nrv.biphasic_stimulus_CM",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 62,
          "end_lineno": 62,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 86,
          "end_lineno": 86,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 97,
          "end_lineno": 97,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 105,
          "end_lineno": 105,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 107,
          "end_lineno": 107,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 107,
          "end_lineno": 107,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 109,
          "end_lineno": 109,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        }
      ],
      "example": {
        "document": "examples/optim/o03_biphasic_stimulus_CM",
        "ref_id": "understanding-context-modifiers-biphasic-stimulus-cm",
        "headings": [
          "Understanding context modifiers: biphasic_stimulus_CM"
        ]
      },
      "doc_lineno": 31
    },
    {
      "source": "test_stim_CM.set_parameters(start=\"3\", t_cathod=\"2\", s_cathod=\"0\", s_ratio=\"1\", t_inter=\"4\")\n\nX = np.array([\n    [100, .1, .5, 0.5, 0.],\n    [200, .2, 1, 1, 0.2],\n    [500, .5, 2, 2, 0.4],\n])",
      "names": [],
      "example": {
        "document": "examples/optim/o03_biphasic_stimulus_CM",
        "ref_id": "understanding-context-modifiers-biphasic-stimulus-cm",
        "headings": [
          "Understanding context modifiers: biphasic_stimulus_CM"
        ]
      },
      "doc_lineno": 164
    },
    {
      "source": "fig2, ax2 = plt.subplots()\nax2.set_title(\"X = [$s_{cathod}$, $s_{ratio}$, $t_{cathod}$, $t_{cathod}$, $t_{inter}$]\")\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n\n    stim.plot(ax2, linestyle=linestyles[i], label=f\"x={x.tolist()}\")\n    # ax1.plot(t_shift+x[::2], x[1::2], 'ok')\n\nax2.grid()\nax2.legend()\nax2.set_xlabel('time (ms)')\nax2.set_ylabel('amplitude (\u00b5A)')\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "enumerate"
        }
      ],
      "example": {
        "document": "examples/optim/o03_biphasic_stimulus_CM",
        "ref_id": "understanding-context-modifiers-biphasic-stimulus-cm",
        "headings": [
          "Understanding context modifiers: biphasic_stimulus_CM"
        ]
      },
      "doc_lineno": 183
    }
  ],
  "examples/optim/o04_harmonic_stimulus_CM": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\n# Generate a dummy static context\nt_sim=10\nl_ax = 10000\nax = nrv.myelinated(y=0, z=0, L=l_ax)\nE1 = nrv.point_source_electrode(x=l_ax/2,y=0, z=100)\ndummy_stim = nrv.stimulus()\n\nextra_stim = nrv.stimulation(\"epineurium\")\nextra_stim.add_electrode(E1, dummy_stim)\nax.attach_extracellular_stimulation(extra_stim)\nstatic_context = ax.save(extracel_context=True)\n\n\n# set the context modifier\nstart = 0.1\nt_pulse = 1\namplitude = 200\n\ntest_stim_CM = nrv.harmonic_stimulus_CM(start=start,t_pulse=t_pulse)\n\n# For each of this points we are going to generate the axon\n# from static context with the context modifier\n# and then plot the stimulus\n\n\nX = [\n    [100,0.2,0, 0.4,0],\n    [200,0.2,0, 0.4,0],\n    [500,0.2,0, 0.4,0],\n]\n\nfig1, axs1 = plt.subplots(2,2, figsize=(10, 10))\nfor i, x in enumerate(X):\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[0,0], label=f\"x={x}\")\n\naxs1[0,0].grid()\naxs1[0,0].legend()\naxs1[0,0].set_xlabel('time (ms)')\naxs1[0,0].set_ylabel('amplitude (\u00b5A)')\n\n\n# t_strat\n\nX = [\n    [200,0.1,0, 0.4,0],\n    [200,0.5,0, 0.4,0],\n    [200,0.9,0, 0.4,0],\n]\n\n\nfor i, x in enumerate(X):\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    plt.figure(1)\n    stim.plot(axs1[0, 1], label=f\"x={x}\")\n\naxs1[0, 1].grid()\naxs1[0, 1].legend()\naxs1[0, 1].set_xlabel('time (ms)')\naxs1[0, 1].set_ylabel('amplitude (\u00b5A)')\n\n\n# s_cathod\n\nX = [\n    [200,0.2,0, 0.4, 0],\n    [200,0.2,3.14/2, 0.4, 0],\n    [200,0.2,3.14, 0.4, 0],\n]\n\n\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[1, 0], label=f\"x={x}\")\n\naxs1[1, 0].grid()\naxs1[1, 0].legend()\naxs1[1, 0].set_xlabel('time (ms)')\naxs1[1, 0].set_ylabel('amplitude (\u00b5A)')\n\n# s_cathod\nX = [\n    [amplitude,0.2,0],\n    [amplitude,0.2,0,0.4,0],\n    [amplitude,0.2,0,0.4,0,0.6,0],\n    [amplitude,0.8,0,0.4,0,0.6,0,0.8,0]\n]\n\n\n\nfor i, x in enumerate(X):\n    # we get the stimulus of the axon generated from the context modifier\n    ax = test_stim_CM(x, static_context)\n    stim = ax.extra_stim.stimuli[0]\n    del ax\n    stim.plot(axs1[1, 1], label=f\"x={x}\")\n\naxs1[1, 1].grid()\naxs1[1, 1].legend()\naxs1[1, 1].set_xlabel('time (ms)')\naxs1[1, 1].set_ylabel('amplitude (\u00b5A)')\nfig1.tight_layout()\n\nplt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "ax",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode"
          ],
          "code_str": "nrv.point_source_electrode",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation"
          ],
          "code_str": "nrv.stimulation",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "point_source_electrode",
            "()"
          ],
          "code_str": "E1",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.point_source_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulation",
            "()"
          ],
          "code_str": "extra_stim",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.stimulation"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM"
          ],
          "code_str": "nrv.harmonic_stimulus_CM",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 62,
          "end_lineno": 62,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 80,
          "end_lineno": 80,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 84,
          "end_lineno": 84,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 102,
          "end_lineno": 102,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()"
          ],
          "code_str": "test_stim_CM",
          "lineno": 104,
          "end_lineno": 104,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.harmonic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 104,
          "end_lineno": 104,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "nrv",
            "harmonic_stimulus_CM",
            "()",
            "()"
          ],
          "code_str": "ax",
          "lineno": 106,
          "end_lineno": 106,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Simulable.NRV_simulable"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 115,
          "end_lineno": 115,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/optim/o04_harmonic_stimulus_CM",
        "ref_id": "understanding-context-modifiers-harmonic-stimulus-cm",
        "headings": [
          "Understanding context modifiers: harmonic_stimulus_CM"
        ]
      },
      "doc_lineno": 42
    }
  ],
  "examples/optim/o05_plot_CM": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\nfname = \"figures/stimuli_v2\"\nsmall_linewidth = 1\nbig_linewidth = 5\nmarkersize = 15\n\n\ndt = 0.005\nt_sim = 0.5\nt_end = 0.5\nI_max_abs = 100\nt_bound = (0, t_end)\nI_bound = (-I_max_abs, 0)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "ploting-optimization-context-modifiers",
        "headings": [
          "Ploting Optimization - context modifiers"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "# Biphasic pulse\nt_start = 0.1\ncontext_modifier1 = nrv.biphasic_stimulus_CM(start=t_start, s_cathod=\"0\", t_cathod=\"1\", s_anod=0)\ndef generate_waveform0(Xsp2, t_sim=100, **kwargs):\n    stim = context_modifier1.stimulus_generator(Xsp2)\n    stim0 = nrv.stimulus()\n    stim0.s = np.zeros(1000)\n    stim0.t = np.linspace(0, t_sim, 1000)\n    stim0 += stim\n    return stim0.s\n\nXb = [85, 0.25]\n\nwaveform0 = generate_waveform0(Xb, t_sim=t_sim)\nt0 = np.linspace(0, t_sim, len(waveform0))\n# Spline 2pts\nkwrgs_interp = {\n    \"dt\": dt,\n    \"amp_start\": 0,\n    \"amp_stop\": 0,\n    \"intertype\": \"Spline\",\n    \"bounds\": I_bound,\n    \"fixed_order\": False,\n    \"t_end\": t_end,\n    \"t_sim\":t_sim,\n    \"t_shift\":0,\n    \"strict_bounds\":True,\n    }\n\n\nXsp1 = [0.1, 0]\nXsp1 += [0.27, -20]\nXsp1 += [0.35,0]\n\nwaveform1 = nrv.interpolate_Npts(Xsp1,**kwrgs_interp)\nt1 = np.linspace(0, t_sim, len(waveform1))\n\nXsp2 = [0.1, 0]\nXsp2 += [0.22, -70]\nXsp2 += [0.15, -30]\nXsp2 += [0.35,0]\n\nwaveform2 = nrv.interpolate_Npts(Xsp2,**kwrgs_interp)\nt2 = np.linspace(0, t_sim, len(waveform2))\n\n\nfig, ax = plt.subplots(figsize=(5,3))\n#plt.gcf()\n\n#axes\nax.set_axis_off()\nt_bound_plot = [-0.05, t_sim]\nI_bound_plot = [-I_max_abs, 10]\n\nax.set_xlim(t_bound_plot)\nax.set_ylim(I_bound_plot)\nax.set_xticks([])\nax.set_yticks([])\nax.plot(t_bound_plot, [0, 0], linewidth=small_linewidth,color=\"k\")\nax.plot([0, 0], I_bound_plot, linewidth=small_linewidth,color=\"k\")",
      "names": [
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "waveform-figures",
        "headings": [
          "Ploting Optimization - context modifiers",
          "waveform figures"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "# details wf0\n\noffset = 5\nax.plot([t_start, t_start+Xb[1]], [-Xb[0]-offset, -Xb[0]-offset], linewidth=small_linewidth,color=\"darkred\")\nax.plot([t_start], [-Xb[0]-offset], \"4\", markersize=markersize,markeredgewidth=small_linewidth, color=\"darkred\")\nax.plot([t_start+Xb[1]], [-Xb[0]-offset], \"3\", markersize=markersize,markeredgewidth=small_linewidth, color=\"darkred\")\nax.plot([0, t_start], [-Xb[0], -Xb[0]], \":\", linewidth=small_linewidth,color=\"k\")\n\n# wf0\nax.plot(t0, waveform0, linewidth=big_linewidth,color=\"#715D99\")\nfig",
      "names": [],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "waveform-2",
        "headings": [
          "Ploting Optimization - context modifiers",
          "waveform 2"
        ]
      },
      "doc_lineno": 151
    },
    {
      "source": "# details wf1\nfor i in range(len(Xsp1)//2):\n    ax.plot([Xsp1[2*i], Xsp1[2*i]], [0, Xsp1[2*i+1]], \":\", linewidth=small_linewidth,color=\"k\")\n    ax.plot([0, Xsp1[2*i]], [Xsp1[2*i+1], Xsp1[2*i+1]], \":\", linewidth=small_linewidth,color=\"k\")\n\n\n# wf2\nax.plot(t1, waveform1, linewidth=big_linewidth,color=\"#009999\")\nax.plot(Xsp1[::2], Xsp1[1::2], \"+\", markersize=markersize, markeredgewidth=big_linewidth/2,color=\"darkred\")\nfig",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "waveform-1",
        "headings": [
          "Ploting Optimization - context modifiers",
          "waveform 1"
        ]
      },
      "doc_lineno": 186
    },
    {
      "source": "# details wf1\nfor i in range(len(Xsp1)//2):\n    ax.plot([Xsp1[2*i], Xsp1[2*i]], [0, Xsp1[2*i+1]], \":\", linewidth=small_linewidth,color=\"k\")\n    ax.plot([0, Xsp1[2*i]], [Xsp1[2*i+1], Xsp1[2*i+1]], \":\", linewidth=small_linewidth,color=\"k\")\n\n\n# wf2\nax.plot(t1, waveform1, linewidth=big_linewidth,color=\"#009999\")\nax.plot(Xsp1[::2], Xsp1[1::2], \"+\", markersize=markersize, markeredgewidth=big_linewidth/2,color=\"darkred\")\nfig",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "id1",
        "headings": [
          "Ploting Optimization - context modifiers",
          "waveform 1"
        ]
      },
      "doc_lineno": 221
    },
    {
      "source": "# details wf0\n\noffset = 5\nax.plot([t_start, t_start+Xb[1]], [-Xb[0]-offset, -Xb[0]-offset], linewidth=small_linewidth,color=\"darkred\")\nax.plot([t_start], [-Xb[0]-offset], \"4\", markersize=markersize,markeredgewidth=small_linewidth, color=\"darkred\")\nax.plot([t_start+Xb[1]], [-Xb[0]-offset], \"3\", markersize=markersize,markeredgewidth=small_linewidth, color=\"darkred\")\nax.plot([0, t_start], [-Xb[0], -Xb[0]], \":\", linewidth=small_linewidth,color=\"k\")\n\nax.plot(t0, waveform0, linewidth=big_linewidth,color=\"#715D99\")\nfig\n\nplt.show()",
      "names": [],
      "example": {
        "document": "examples/optim/o05_plot_CM",
        "ref_id": "waveform-0",
        "headings": [
          "Ploting Optimization - context modifiers",
          "waveform 0"
        ]
      },
      "doc_lineno": 255
    }
  ],
  "examples/optim/o06_mproc_optimization": [
    {
      "source": "import nrv\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nif __name__ == \"__main__\":\n\n    # -------------------------- #\n    #  Cost function definition  #\n    # -------------------------- #\n    my_cost0 = nrv.cost_function()\n\n\n    # Setting Static Context\n\n    ax_l = 10000 # um\n    ax_d=10\n    ax_y=50\n    ax_z=0\n    axon_1 = nrv.myelinated(L=ax_l, d=ax_d, y=ax_y, z=ax_z)\n\n\n    LIFE_stim0 = nrv.FEM_stimulation()\n    LIFE_stim0.reshape_nerve(Length=ax_l)\n    life_d = 25 # um\n    life_length = 1000 # um\n    life_x_0_offset = life_length/2\n    life_y_c_0 = 0\n    life_z_c_0 = 0\n    elec_0 = nrv.LIFE_electrode(\"LIFE\", life_d, life_length, life_x_0_offset, life_y_c_0, life_z_c_0)\n\n    dummy_stim = nrv.stimulus()\n    dummy_stim.pulse(0, 0.1, 1)\n    LIFE_stim0.add_electrode(elec_0, dummy_stim)\n\n    axon_1.attach_extracellular_stimulation(LIFE_stim0)\n    axon_1.get_electrodes_footprints_on_axon()\n\n    static_context = axon_1.save(save=False, extracel_context=True)\n    del axon_1\n\n    t_sim = 5\n    dt = 0.005\n    kwarg_sim = {\n        \"dt\":dt,\n        \"t_sim\":t_sim,\n    }\n\n    my_cost0.set_static_context(static_context, **kwarg_sim)\n\n    # Setting Context Modifier\n    t_start = 1\n    I_max_abs = 100\n    cm_0 = nrv.biphasic_stimulus_CM(start=t_start, s_cathod=\"0\", t_cathod=\"1\", s_anod=0)\n    my_cost0.set_context_modifier(cm_0)\n\n    # Setting Cost Evaluation\n    costR = nrv.recrutement_count_CE(reverse=True)\n    costC = nrv.stim_energy_CE()\n    cost_evaluation = costR + 0.01 * costC\n    my_cost0.set_cost_evaluation(cost_evaluation)\n\n\n    # -------------------------- #\n    #  PSO Optimizer definition  #\n    # -------------------------- #\n    pso_kwargs = {\n        \"maxiter\" : 10,\n        # \"maxiter\" : 50,\n        \"n_particles\" : 10,\n        # \"n_particles\" : 20,\n        \"opt_type\" : \"local\",\n        \"options\": {'c1': 0.6, 'c2': 0.6, 'w': 0.8, 'k': 3, 'p': 1},\n        \"bh_strategy\": \"reflective\",\n    }\n    pso_opt = nrv.PSO_optimizer(**pso_kwargs)\n\n    t_end = 0.5\n    duration_bound = (0.01, t_end)\n    bounds0 = (\n        (0, I_max_abs),\n        duration_bound\n    )\n    pso_kwargs_pb_0 = {\n        \"dimensions\" : 2,\n        \"bounds\" : bounds0,\n        \"comment\":\"pulse\"}\n\n\n    n_proc_list = [1, 2, 3, 4, None]\n    best_res_list = []\n    duration_list = []\n    # Problem definition\n    fig_costs, axs_costs = plt.subplots(2, 1)\n\n    for n_proc in n_proc_list:\n        np.random.seed(444)\n        my_prob = nrv.Problem(n_proc=n_proc)\n        my_prob.costfunction = my_cost0\n        my_prob.optimizer = pso_opt\n        res0 = my_prob(**pso_kwargs_pb_0)\n        best_res_list += [res0[\"x\"]]\n        duration_list += [res0[\"optimization_time\"]]\n\n\n        print(\"best input vector:\", res0[\"x\"], \"\\nbest cost:\", res0[\"best_cost\"])\n\n\n        stim = cm_0(res0.x, static_context).extra_stim.stimuli[0]\n        stim.plot(axs_costs[0], label=\"rectangle pulse\")\n        axs_costs[0].set_xlabel(\"best stimulus shape\")\n        axs_costs[0].set_xlabel(\"time (ms)\")\n        axs_costs[0].set_ylabel(\"amplitude (\u00b5A)\")\n        axs_costs[0].grid()\n\n        res0.plot_cost_history(axs_costs[1])\n        axs_costs[1].set_xlabel(\"optimization iteration\")\n        axs_costs[1].set_ylabel(\"cost\")\n        axs_costs[1].grid()\n        fig_costs.tight_layout()\n\n        simres = res0.compute_best_pos(my_cost0)\n        simres.rasterize(\"V_mem\")\n        del my_prob\n\n    plt.figure()\n    n_proc_list_int = [1, 2, 3, 4, 5]\n    n_proc_list_labs = [str(i) for i in n_proc_list_int]\n    n_proc_list_labs[-1] = \"default = 3\"\n\n    plt.plot(n_proc_list_int, duration_list, \"-+k\")\n    plt.xticks(n_proc_list_int, labels=n_proc_list_int)\n    plt.xlabel(\"Number of process\")\n    plt.ylabel(\"PSO duration (s)\")\n    plt.show()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon_1",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim0",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode"
          ],
          "code_str": "nrv.LIFE_electrode",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_0",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "LIFE_electrode",
            "()"
          ],
          "code_str": "elec_0",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.fmod._electrodes.LIFE_electrode"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "dummy_stim",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "LIFE_stim0",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "axon_1",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM"
          ],
          "code_str": "nrv.biphasic_stimulus_CM",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE"
          ],
          "code_str": "nrv.recrutement_count_CE",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE",
            "()"
          ],
          "code_str": "costR",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE"
          ],
          "code_str": "nrv.stim_energy_CE",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE",
            "()"
          ],
          "code_str": "costC",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "recrutement_count_CE",
            "()"
          ],
          "code_str": "costR",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.recrutement_count_CE"
        },
        {
          "import_components": [
            "nrv",
            "stim_energy_CE",
            "()"
          ],
          "code_str": "costC",
          "lineno": 61,
          "end_lineno": 61,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._CostEvaluation.stim_energy_CE"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer"
          ],
          "code_str": "nrv.PSO_optimizer",
          "lineno": 77,
          "end_lineno": 77,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer",
            "()"
          ],
          "code_str": "pso_opt",
          "lineno": 77,
          "end_lineno": 77,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 98,
          "end_lineno": 98,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "nrv",
            "Problem"
          ],
          "code_str": "nrv.Problem",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 99,
          "end_lineno": 99,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "PSO_optimizer",
            "()"
          ],
          "code_str": "pso_opt",
          "lineno": 101,
          "end_lineno": 101,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.PSO_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 102,
          "end_lineno": 102,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 102,
          "end_lineno": 102,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 103,
          "end_lineno": 103,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 104,
          "end_lineno": 104,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 107,
          "end_lineno": 107,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 107,
          "end_lineno": 107,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res0",
          "lineno": 107,
          "end_lineno": 107,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "nrv",
            "biphasic_stimulus_CM",
            "()"
          ],
          "code_str": "cm_0",
          "lineno": 110,
          "end_lineno": 110,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._ContextModifiers.biphasic_stimulus_CM"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost0",
          "lineno": 123,
          "end_lineno": 123,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 125,
          "end_lineno": 125,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 127,
          "end_lineno": 127,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 129,
          "end_lineno": 129,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 132,
          "end_lineno": 132,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xticks"
          ],
          "code_str": "plt.xticks",
          "lineno": 133,
          "end_lineno": 133,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xticks"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 134,
          "end_lineno": 134,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 135,
          "end_lineno": 135,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 136,
          "end_lineno": 136,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "examples/optim/o06_mproc_optimization",
        "ref_id": "optimization-change-number-of-processes",
        "headings": [
          "Optimization change number of processes"
        ]
      },
      "doc_lineno": 78
    }
  ],
  "examples/optim/sg_execution_times": [],
  "examples/sg_execution_times": [],
  "index": [],
  "installation": [
    {
      "source": "[COMSOL]\nCOMSOL_STATUS = True\nCOMSOL_SERVER = PATH_TO_COMSOL_SERVER_BINARIES\nCOMSOL_CPU = 1\nCOMSOL_PORT = 2036\nTIME_COMSOL_SERVER_LAUNCH = 10",
      "names": [],
      "example": {
        "document": "installation",
        "ref_id": "comsol-installation",
        "headings": [
          "Installation",
          "Dependencies",
          "COMSOL Installation"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "import nrv",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "installation",
        "ref_id": "using-pip",
        "headings": [
          "Installation",
          "Installing NRV",
          "Using pip"
        ]
      },
      "doc_lineno": 99
    }
  ],
  "introduction": [],
  "modules": [],
  "scientific": [],
  "sg_execution_times": [],
  "tutorials/1_intracellular_stimulation": [
    {
      "source": "import nrv\n\nimport matplotlib.pyplot as plt\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "context",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Context"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": "## Axn def\ny = 0  # axon y position, in [\u00b5m]\nz = 0  # axon z position, in [\u00b5m]\nd = 1  # axon diameter position, in [\u00b5m]\nL = 5000  # axon length along x, in [\u00b5m]\nmodel = \"HH\"  # Rattay_Aberham if not precised\naxon_u = nrv.unmyelinated(y, z, d, L, model=model)",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "intracellular-stimulation-of-an-unmyelinated-axon",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Intracellular stimulation of an unmyelinated axon"
        ]
      },
      "doc_lineno": 60
    },
    {
      "source": "## intracellular current pulse (ICP)\nt_start = 1  # ICP time during the sim, in [ms]\nduration = 0.1  # ICP duration, in [ms]\namplitude = 5  # ICP amplitude, in [nA]\nx_start = 0  # ICP initial postition along the axon, in [\u00b5s]\naxon_u.insert_I_Clamp(x_start, t_start, duration, amplitude)",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "intracellular-stimulation-of-an-unmyelinated-axon",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Intracellular stimulation of an unmyelinated axon"
        ]
      },
      "doc_lineno": 85
    },
    {
      "source": "## Simulation\nt_sim = 20  # sim duration, in [ms]\nresults = axon_u(t_sim=t_sim)",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "intracellular-stimulation-of-an-unmyelinated-axon",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Intracellular stimulation of an unmyelinated axon"
        ]
      },
      "doc_lineno": 109
    },
    {
      "source": "vmem = results[\"V_mem\"]\nvmem_attribute = results.V_mem #equivalent\nprint(np.allclose(vmem, vmem_attribute))",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "intracellular-stimulation-of-an-unmyelinated-axon",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Intracellular stimulation of an unmyelinated axon"
        ]
      },
      "doc_lineno": 129
    },
    {
      "source": "x_idx_mid = len(results[\"V_mem\"]) // 2 #get the mid-fiber x-index position\nfig, ax = plt.subplots()\nax.plot(results[\"t\"], results[\"V_mem\"][x_idx_mid], color=\"darkcyan\")\nax.set_xlabel('Times (ms)')\nax.set_ylabel('Membrane voltage $V_{mem} (mV)$')\nfig.tight_layout()\nplt.show()",
      "names": [
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 158
    },
    {
      "source": "fig, ax = plt.subplots(1)\ncbar = results.colormap_plot(ax, \"V_mem\")\nax.set_xlabel('Time (ms)')\nax.set_ylabel('x-position (\u00b5m)')\ncbar.set_label(r'Membrane Voltage $V_{mem}$ (mV)')\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 189
    },
    {
      "source": "fig, ax = plt.subplots(1)\nresults.plot_x_t(ax,'V_mem')\nax.set_ylabel(\"Axon x-axis (\u00b5m)\")\nax.set_xlabel(\"Time (ms)\")\nax.set_xlim(0,results.tstop)\nax.set_ylim(0,np.max(results.x_rec))",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 217
    },
    {
      "source": "# Raster plot\nresults.rasterize(\"V_mem\")\nfig, ax = plt.subplots(1)\nresults.raster_plot(ax,'V_mem')\nax.set_ylabel(\"Axon x-axis (\u00b5m)\")\nax.set_xlabel(\"Time (ms)\")\nax.set_xlim(0,results.tstop)\nax.set_ylim(0,np.max(results.x_rec))\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 254
    },
    {
      "source": "# In many situations, we want to detect if whether an AP is going through the fiber. For that, the ```rasterize``` method of the ``results`` object. The method detected the presence of AP in the fiber across time and space using a threshold function. The results can be plotted with the ``raster_plot`` method of ``results``.\n\n## Axon def\ny = 0 # axon y position, in [\u00b5m]\nz = 0 # axon z position, in [\u00b5m]\nd = 10 # axon diameter position, in [\u00b5m]\nn_NoR = 20 #number of Node-of-Ranvier\nL = nrv.get_length_from_nodes(d, n_NoR)\nmodel = \"MRG\" #myelinated fiber model, MRG by default\n\naxon_m = nrv.myelinated(y, z, d, L, model=model,rec='all')",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 287
    },
    {
      "source": "## test pulse\nt_start = 1\nduration = 0.1\namplitude = 5\nclamp_node = 0\naxon_m.insert_I_Clamp(clamp_node, t_start, duration, amplitude)\n\n## Simulation\nt_sim = 3\nresults_m = axon_m(t_sim=t_sim)",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 315
    },
    {
      "source": "# Color Map\nfig, ax = plt.subplots(1)\ncbar = results_m.colormap_plot(ax, \"V_mem\")\nax.set_xlabel('Time (ms)')\nax.set_ylabel('x-position (\u00b5m)')\ncbar.set_label(r'Membrane Voltage $V_{mem}$ (mV)')\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 342
    },
    {
      "source": "results_m.rasterize(\"V_mem\")\nfig, axs = plt.subplots(2)\n\nresults_m.plot_x_t(axs[0],'V_mem')\naxs[0].set_ylabel(\"Axon x-axis (\u00b5m)\")\naxs[0].set_xlabel(\"Time (ms)\")\naxs[0].set_xlim(0,results_m.tstop)\naxs[0].set_ylim(0,np.max(results_m.x_rec))\n\nresults_m.raster_plot(axs[1],'V_mem')\naxs[1].set_ylabel(\"Axon x-axis (\u00b5m)\")\naxs[1].set_xlabel(\"Time (ms)\")\naxs[1].set_xlim(0,results_m.tstop)\naxs[1].set_ylim(0,np.max(results_m.x_rec))\n\nfig.tight_layout()\nplt.show()",
      "names": [],
      "example": {
        "document": "tutorials/1_intracellular_stimulation",
        "ref_id": "simulation-results-plots",
        "headings": [
          "Tutorial 1 - First steps into NRV: a simple axon",
          "Simulation results plots"
        ]
      },
      "doc_lineno": 373
    }
  ],
  "tutorials/2_propagation_velocity": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "tutorial-2-evaluation-of-propagation-velocity-with-nrv",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV"
        ]
      },
      "doc_lineno": 37
    },
    {
      "source": "y = 0                               # axon y position, in [um]\nz = 0                               # axon z position, in [um]\nd = 1                               # axon diameter, in [um]\nL = 2000                            # axon length, along x axis, in [um]\nmodel = \"HH\"\naxon = nrv.unmyelinated(y, z, d, L, model=model)",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-an-unmyelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of an unmyelinated fibers"
        ]
      },
      "doc_lineno": 60
    },
    {
      "source": "## Intracellular stimulation definition\nt_start = 1                 # starting time, in [ms]\nduration = 0.1              # duration, in [ms]\namplitude = 5               # amplitude, in [nA]\naxon.insert_I_Clamp(0, t_start, duration, amplitude)",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-an-unmyelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of an unmyelinated fibers"
        ]
      },
      "doc_lineno": 86
    },
    {
      "source": "t_sim = 10                  # simulation time, in [ms]\nresults = axon(t_sim=t_sim)\nresults.rasterize(\"V_mem\")",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-an-unmyelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of an unmyelinated fibers"
        ]
      },
      "doc_lineno": 110
    },
    {
      "source": "results.rasterize(\"V_mem\")\nfig, ax = plt.subplots(1)\nresults.raster_plot(ax,'V_mem')\nax.set_ylabel(\"Axon x-axis (\u00b5m)\")\nax.set_xlabel(\"Time (ms)\")\nax.set_xlim(0,results.tstop)\nax.set_ylim(0,np.max(results.x_rec))\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-an-unmyelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of an unmyelinated fibers"
        ]
      },
      "doc_lineno": 134
    },
    {
      "source": "unmyelinated_speed = results.get_avg_AP_speed()\nprint(unmyelinated_speed)          #in m/s",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-an-unmyelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of an unmyelinated fibers"
        ]
      },
      "doc_lineno": 165
    },
    {
      "source": "## Axon creation\ny = 0                                 # axon y position, in [um]\nz = 0                                 # axon z position, in [um]\nd = 10                                # axon diameter, in [um]\nL = nrv.get_length_from_nodes(d, 21)  #Axon length is 21 node of Ranvier\nmodel = \"MRG\"\naxon = nrv.myelinated(y, z, d, L, model=model)\n\n## test pulse\nt_start = 1\nduration = 0.1\namplitude = 5\naxon.insert_I_Clamp(0, t_start, duration, amplitude)\nt_sim = 5\n\n## Simulation\nresults = axon(t_sim=t_sim)\n\nresults.rasterize(\"V_mem\")\nmyelinated_speed = results.get_avg_AP_speed()\nprint(myelinated_speed)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-a-myelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of a myelinated fibers."
        ]
      },
      "doc_lineno": 196
    },
    {
      "source": "# ## Velocity-diameter relationship\n\n# The velocity of AP propagation in a fiber increases with its diameter.\n# Let\u2019s verify this with NRV and plot the propagation velocity diameter\n# relationship for unmyelinated fibers. This typically takes less than 30s to calculate.\n\nunmyelinated_diameters = np.linspace(0.1, 2, 10)            #10 unmyelinated fibers with diameter ranging from 0.1\u00b5m to 2\u00b5m.\nunmyelinated_speed = []                                     #Empty list to store results\n\n## Axon fixed parameters\ny = 0\nz = 0\nL = 5000\nmodel = \"HH\"\n\n## test pulse fixed parameters\nt_start = 1\nduration = 0.1\namplitude = 5\n\nt_sim = 10\nfor d in unmyelinated_diameters:\n\n    #Axon creation\n    axon1 = nrv.unmyelinated(y, z, d, L, model=model)\n    axon1.insert_I_Clamp(0, t_start, duration, amplitude)\n\n    ## Simulation\n    results = axon1(t_sim=t_sim)\n    del axon1\n\n    results.rasterize(\"V_mem\")\n    unmyelinated_speed += [results.get_avg_AP_speed()]\n\n#Plot the results\nfig, ax  = plt.subplots()\nax.plot(unmyelinated_diameters, unmyelinated_speed, \"o-\", label=\"unmyelinated\")\nax.legend()\nax.grid()\nax.set_xlabel(r\"diameter ($\\mu m$)\")\nax.set_ylabel(r\"speed ($m.s^{-1}$)\")",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-a-myelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of a myelinated fibers."
        ]
      },
      "doc_lineno": 242
    },
    {
      "source": "myelinated_diameters = np.linspace(2, 20, 10)   #10 myelinated fibers with diameter ranging from 2\u00b5m to 20\u00b5m.\nmyelinated_speed = []\n\n## Axon def\ny = 0\nz = 0\nmodel = \"MRG\"\n\n## test pulse\nt_start = 1\nduration = 0.1\namplitude = 5\n\nt_sim = 5\n\nfor d in myelinated_diameters:\n    L = nrv.get_length_from_nodes(d, 21)\n    axon1 = nrv.myelinated(y, z, d, L, model=model)\n    axon1.insert_I_Clamp(0, t_start, duration, amplitude)\n\n    ## Simulation\n    results = axon1(t_sim=t_sim)\n    del axon1\n\n    results.rasterize(\"V_mem\")\n    myelinated_speed += [results.get_avg_AP_speed()]\n\nfig, ax  = plt.subplots()\nax.plot(myelinated_diameters, myelinated_speed, \"o-\", label=\"myelinated\")\nax.legend()\nax.grid()\nax.set_xlabel(r\"diameter ($\\mu m$)\")\nax.set_ylabel(r\"speed ($m.s^{-1}$)\")",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-a-myelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of a myelinated fibers."
        ]
      },
      "doc_lineno": 313
    },
    {
      "source": "fig, ax  = plt.subplots()\nax.loglog(unmyelinated_diameters, unmyelinated_speed, \"o-\", label=\"unmyelinated\")\nax.loglog(myelinated_diameters, myelinated_speed, \"o-\", label=\"myelinated\")\nax.legend()\nax.grid()\nax.set_xlabel(r\"diameter ($\\mu m$)\")\nax.set_ylabel(r\"speed ($m.s^{-1}$)\")",
      "names": [],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "measuring-propagation-velocity-of-a-myelinated-fibers",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Measuring Propagation Velocity of a myelinated fibers."
        ]
      },
      "doc_lineno": 377
    },
    {
      "source": "myelinated_diameters = np.linspace(2, 20, 10)   #10 myelinated fibers with diameter ranging from 2\u00b5m to 20\u00b5m.\n\n## Axon def\ny = 0\nz = 0\n\n## test pulse\nt_start = 1\nduration = 0.1\namplitude = 5\n\nt_sim = 5\n\nfig, ax  = plt.subplots()\n\nmyelinated_models = ['MRG','Gaines_motor','Gaines_sensory']\nfor model in myelinated_models:\n    myelinated_speed = []\n    print(f\"Simulated model: {model}\")\n    for d in myelinated_diameters:\n        L = nrv.get_length_from_nodes(d, 21)\n        axon1 = nrv.myelinated(y, z, d, L, model=model)\n        axon1.insert_I_Clamp(0, t_start, duration, amplitude)\n        ## Simulation\n        results = axon1(t_sim=t_sim)\n        del axon1\n        results.rasterize(\"V_mem\")\n        myelinated_speed += [results.get_avg_AP_speed()]\n    ax.plot(myelinated_diameters, myelinated_speed, \"o-\", label=model)\n\nax.legend()\nax.grid()\nax.set_xlabel(r\"diameter ($\\mu m$)\")\nax.set_ylabel(r\"speed ($m.s^{-1}$)\")",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "effect-of-model-on-velocity-diameter-relationship",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Effect of model on Velocity-diameter relationship"
        ]
      },
      "doc_lineno": 428
    },
    {
      "source": "unyelinated_diameters = np.linspace(0.1, 2, 10)   #10 unmyelinated fibers with diameter ranging from 0.1\u00b5m to 2\u00b5m.\n\n## Axon def\ny = 0\nz = 0\nL = 1000\n\n## test pulse\nt_start = 1\nduration = 0.1\namplitude = 5\n\nt_sim = 10\n\nfig, ax  = plt.subplots()\nunmyelinated_models = [\"HH\",\"Rattay_Aberham\",\"Sundt\",\"Tigerholm\"]\nfor model in unmyelinated_models:\n    unmyelinated_speed = []\n    print(f\"Simulated model: {model}\")\n    for d in unmyelinated_diameters:\n        axon1 = nrv.unmyelinated(y, z, d, L, model=model)\n        axon1.insert_I_Clamp(0, t_start, duration, amplitude)\n        results = axon1(t_sim=t_sim)\n        del axon1\n        results.rasterize(\"V_mem\")\n        unmyelinated_speed += [results.get_avg_AP_speed()]\n    ax.plot(unmyelinated_diameters, unmyelinated_speed, \"o-\", label=model)\n\nax.legend()\nax.grid()\nax.set_xlabel(r\"diameter ($\\mu m$)\")\nax.set_ylabel(r\"speed ($m.s^{-1}$)\")",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/2_propagation_velocity",
        "ref_id": "effect-of-model-on-velocity-diameter-relationship",
        "headings": [
          "Tutorial 2 - Evaluation of propagation velocity with NRV",
          "Effect of model on Velocity-diameter relationship"
        ]
      },
      "doc_lineno": 496
    }
  ],
  "tutorials/3_single_fiber_simulation": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "tutorial-3-stimulating-single-fibers-with-nrv",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV"
        ]
      },
      "doc_lineno": 29
    },
    {
      "source": "y_a = 0                                                                     #axon y position, in [\u00b5m]\nz_a = 0                                                                     #axon z position, in [\u00b5m]\nd_a = 10                                                                    #axon diameter position, in [\u00b5m]\nn_NoR = 20                                                                  #number of Node-of-Ranvier\nL_a = nrv.get_length_from_nodes(d_a, n_NoR)                                 #Get the axon length from number of NoR\naxon_m = nrv.myelinated(y_a, z_a, d_a, L_a, model=\"MRG\", rec=\"all\")        #we recording all (not NoD only)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "tutorial-3-stimulating-single-fibers-with-nrv",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "extra_stim = nrv.FEM_stimulation(endo_mat='endoneurium_ranck')",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 76
    },
    {
      "source": "d_n = 1500   #in um\nextra_stim.reshape_nerve(d_n,L_a*1.2)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 94
    },
    {
      "source": "d_outbox= 5        #in mm\nextra_stim.reshape_outerBox(d_outbox)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 113
    },
    {
      "source": "geom_f = nrv.create_cshape(center=(0,0), diameter=1000)\nextra_stim.reshape_fascicle(geometry=geom_f)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 132
    },
    {
      "source": "LIFE_d = 25                         # LIFE's diameter, in um\nLIFE_l = 1000                       # LIFE's active-site length, in um\nx_LIFE = axon_m.x_nodes[n_NoR//2]   # LIFE x position, in [um]\ny_LIFE = 0                          # LIFE y position, in [um]\nz_LIFE = 100                        # LIFE z position, in [um]\nx_LIFE_offset = x_LIFE - (LIFE_l/2)\nLIFE = nrv.LIFE_electrode('LIFE_1', LIFE_d, LIFE_l, x_LIFE_offset, y_LIFE, z_LIFE)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 151
    },
    {
      "source": "contact_width=500               #width (length) of the cuff active-site, in um\ncontact_thickness=100           #tickness of the cuff active-site, in um\ninsulator_width=1000            #width (length) of the cuff insulator, in um\ninsulator_thickness=500         #tickness of the cuff insulator, in um\n\nx_cuff = axon_m.x_nodes[n_NoR//2] # cuff z position, in [um]\ncuff = nrv.CUFF_electrode('CUFF_1', contact_length=contact_width,\n        contact_thickness=contact_thickness, insulator_length=insulator_width,\n        insulator_thickness=insulator_thickness, x_center=x_cuff)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 176
    },
    {
      "source": "start = 0.5             #start of the pulse, in ms\nI_pulse = 50            #pulse amplitude, in \u00b5A\nT_pulse = 50*1e-3        #pulse duration, in ms\nstim1 = nrv.stimulus()\nstim1.pulse(start,-I_pulse,T_pulse)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 203
    },
    {
      "source": "fig, ax = plt.subplots(1, 1, figsize=(6,6))\nstim1.plot(ax)\nax.set_xlabel(\"time (ms)\")\nax.set_ylabel(\"amplitude (\u00b5A)\")",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 225
    },
    {
      "source": "I_pulse_dum = 0.1           #pulse amplitude, in \u00b5A\nT_pulse_dum = 1\ndummy_stim = nrv.stimulus()\ndummy_stim.pulse(start,-I_pulse_dum,T_pulse_dum)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 258
    },
    {
      "source": "extra_stim.add_electrode(LIFE, stim1)           #ID = 0\nextra_stim.add_electrode(cuff, dummy_stim)      #not stim on the cuff - ID = 1",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 279
    },
    {
      "source": "ID_LIFE = 0\nID_cuff = 1",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "extracellular-context-creation",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Extracellular context Creation"
        ]
      },
      "doc_lineno": 298
    },
    {
      "source": "axon_m.attach_extracellular_stimulation(extra_stim)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 320
    },
    {
      "source": "res_LIFE = axon_m(t_sim=3) #3ms simulation",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 338
    },
    {
      "source": "fig, ax = plt.subplots(1)\ncbar = res_LIFE.colormap_plot(ax, \"V_mem\")\nax.set_xlabel('Time (ms)')\nax.set_ylabel(\"Fiber's x-axis position (\u00b5m)\")\ncbar.set_label(r'Membrane Voltage $V_{mem}$ (mV)')\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 356
    },
    {
      "source": "res_LIFE.is_recruited()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 386
    },
    {
      "source": "axon_m.change_stimulus_from_electrode(ID_LIFE,dummy_stim)\naxon_m.change_stimulus_from_electrode(1,dummy_stim)\nres_LIFE = axon_m(t_sim=3)\nres_LIFE.is_recruited()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 410
    },
    {
      "source": "fig, ax = plt.subplots(1)\ncbar = res_LIFE.colormap_plot(ax, \"V_mem\")\nax.set_xlabel('Time (ms)')\nax.set_ylabel(\"Fiber's x-axis position (\u00b5m)\")\ncbar.set_label(r'Membrane Voltage $V_{mem}$ (mV)')\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 438
    },
    {
      "source": "axon_m.change_stimulus_from_electrode(ID_cuff,stim1)\nres_cuff = axon_m(t_sim=3)\nres_cuff.is_recruited()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 466
    },
    {
      "source": "axon_m.change_stimulus_from_electrode(ID_cuff,stim1*4)\nres_cuff = axon_m(t_sim=3)\nres_cuff.is_recruited()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "connecting-the-fem-model-to-the-axon-and-simulating-it",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Connecting the FEM model to the axon and simulating it:"
        ]
      },
      "doc_lineno": 492
    },
    {
      "source": "axon_m.change_stimulus_from_electrode(ID_cuff,dummy_stim)\naxon_m.change_stimulus_from_electrode(ID_LIFE,dummy_stim)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 522
    },
    {
      "source": "def cathodic_pulse_update(axon,amp, pw, elec_id, start_p = 1):\n    stim_1 = nrv.stimulus()\n    stim_1.pulse(start_p,-amp,pw)\n    axon.change_stimulus_from_electrode(elec_id, stim_1)\n\n\n#parameters for the waveforms\narg_stim = {'pw':50e-3, 'elec_id':ID_LIFE, 'start_p':start}\n\nmax_amp = 300 #maximum search boundary\n\nthr_LIFE = nrv.axon_AP_threshold(axon = axon_m,amp_max = max_amp,\n                                        update_func = cathodic_pulse_update, args_update=arg_stim)\n\nprint(f'LIFE threshold: {np.round(thr_LIFE,1)}\u00b5A')",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 544
    },
    {
      "source": "axon_m.change_stimulus_from_electrode(ID_LIFE,dummy_stim)   #so LIFE is not stimulating\n\narg_stim = {'pw':50e-3, 'elec_id':ID_cuff, 'start_p':start}\nthr_cuff = nrv.axon_AP_threshold(axon = axon_m,amp_max = max_amp,\n                                        update_func = cathodic_pulse_update, args_update=arg_stim)\n\nprint(f'cuff threshold: {np.round(thr_cuff,1)}\u00b5A')",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 582
    },
    {
      "source": "if 'extra_stim' in locals():        #Delete extra_stim and axon_m if variable exist (known bug)\n    del extra_stim, axon_m\n\naxon_d_l = [2,4,6,8,10,12,14,16,18,20]        #axon diameter list, in \u00b5m\nLIFE_thr_l = []                               #list of results\nn_NoR = 31                                     #increase NoR so small axons are not too short\nnrv.parameters.set_nrv_verbosity(i=2)\n\nfor axon_d in axon_d_l:\n\n    #we create a new axon\n    L_a = nrv.get_length_from_nodes(axon_d, n_NoR)\n    new_axon = nrv.myelinated(y=y_a, z=z_a, d=axon_d, L=L_a, model='MRG', rec='nodes')\n\n    #we create a corresponding extracellular context\n    extra_stim_f = nrv.FEM_stimulation(endo_mat='endoneurium_ranck')\n    extra_stim_f.reshape_nerve(d_n,L_a)\n    extra_stim_f.reshape_outerBox(d_outbox)\n    extra_stim_f.reshape_fascicle(geometry=geom_f)\n\n    #same for the LIFE\n    x_LIFE = new_axon.x_nodes[n_NoR//2]     # LIFE x position, in [um]\n    x_LIFE_offset = x_LIFE - (LIFE_l/2)\n    new_LIFE = nrv.LIFE_electrode('LIFE_1', LIFE_d, LIFE_l, x_LIFE_offset, y_LIFE, z_LIFE)\n    extra_stim_f.add_electrode(new_LIFE, dummy_stim)  #ID = 0\n\n    #link the extrastim with the axon:\n    new_axon.attach_extracellular_stimulation(extra_stim_f)\n    new_axon.get_electrodes_footprints_on_axon()\n\n    #parameters for the waveforms\n    max_amp = 150 #maximum search boundary\n    arg_stim = {'pw':50e-3, 'elec_id':0, 'start_p':start}\n    thr_LIFE = nrv.axon_AP_threshold(axon = new_axon,amp_max = max_amp,\n                                            update_func = cathodic_pulse_update, args_update=arg_stim)\n    del extra_stim_f, new_axon                       #to prevent meshing error (known bug)\n\n    print(f'LIFE threshold: {np.round(thr_LIFE,1)}\u00b5A (axon_d = {axon_d}\u00b5m)')\n    LIFE_thr_l.append(thr_LIFE)",
      "names": [
        {
          "import_components": [
            "locals"
          ],
          "code_str": "locals",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "locals"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 614
    },
    {
      "source": "ncore = 4\ncuff_thr_l = nrv.search_threshold_dispatcher(process_threshold,axon_d_l, ncore=ncore)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 700
    },
    {
      "source": "def process_threshold(axon_d):\n    #we create a new axon\n    L_a = nrv.get_length_from_nodes(axon_d, n_NoR)\n    new_axon = nrv.myelinated(y=y_a, z=z_a, d=axon_d, L=L_a, model='MRG', rec='nodes')\n\n    #we create a corresponding extracellular context\n    extra_stim_f = nrv.FEM_stimulation(endo_mat='endoneurium_ranck')\n    extra_stim_f.reshape_nerve(d_n,L_a)\n    extra_stim_f.reshape_outerBox(d_outbox)\n    extra_stim_f.reshape_fascicle(geometry=geom_f)\n\n    #same for the LIFE\n    x_cuff = new_axon.x_nodes[n_NoR//2] # cuff z position, in [um]\n    new_cuff = nrv.CUFF_electrode('CUFF_1', contact_length=contact_width,\n            contact_thickness=contact_thickness, insulator_length=insulator_width,\n            insulator_thickness=insulator_thickness, x_center=x_cuff)\n    extra_stim_f.add_electrode(new_cuff, dummy_stim)  #ID = 0\n\n    #link the extrastim with the axon:\n    new_axon.attach_extracellular_stimulation(extra_stim_f)\n    new_axon.get_electrodes_footprints_on_axon()\n\n    #parameters for the waveforms\n    max_amp = 1500 #maximum search boundary\n    arg_stim = {'pw':50e-3, 'elec_id':0, 'start_p':start}\n    threshold = nrv.axon_AP_threshold(axon = new_axon,amp_max = max_amp,\n                                            update_func = cathodic_pulse_update, args_update=arg_stim)\n\n    del extra_stim_f,new_axon #to prevent meshing error (known bug)\n    return(threshold)\n\n\n# In a Notebook:\ncuff_thr_l = []\nfor _i, _d in enumerate(axon_d_l):\n    print(f\"{_i}/{len(axon_d_l)}\")\n    cuff_thr_l += [process_threshold(_d)]\n\n# In a .py file could be parallelised with\n# if __name__ == \"__main__\":\n#     ncore = 4\n#     cuff_thr_l = nrv.search_threshold_dispatcher(process_threshold,axon_d_l, ncore=ncore)",
      "names": [
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 707
    },
    {
      "source": "fig, ax = plt.subplots()\nax.semilogy(axon_d_l,LIFE_thr_l,'o-',label = 'LIFE')\nax.semilogy(axon_d_l,cuff_thr_l,'o-',label = 'Cuff')\nax.legend()\nax.set_xlabel(\"Axon diameter (\u00b5m)\")\nax.set_ylabel(\"Axon threshold (\u00b5A)\")\nfig.tight_layout()\nplt.show()",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 784
    }
  ],
  "tutorials/4_nerve_simulation": [
    {
      "source": "if __name__ == \"__main__\":\n    # your code here",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "tutorial-4-stimulating-nerves-with-nrv",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\n# if __name__ == \"__main__\":",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "tutorial-4-stimulating-nerves-with-nrv",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV"
        ]
      },
      "doc_lineno": 42
    },
    {
      "source": "outer_d = 5         # in mm\nnerve_d = 500       # in um\nnerve_l = 5000      # in um\nnerve = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "nerve-creation",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Nerve creation"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "fasc1_d = 200       # in um\nfasc1_y = -100      # in um\nfasc1_z = 0         # in um\n\n\n#create the fascicle objects\nfascicle_1 = nrv.fascicle(diameter=fasc1_d,ID=1)\nnerve.add_fascicle(fascicle=fascicle_1, y=fasc1_y, z=fasc1_z)\n\n#plot\nfig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve.plot(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "build-fascicles-geometry",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Build fascicles\u2019 geometry"
        ]
      },
      "doc_lineno": 101
    },
    {
      "source": "fasc2_d = (220,110)       # in um\nfasc2_center = (100, 0)       # in um\ngeom2 = nrv.create_cshape(center=fasc2_center, diameter=fasc2_d, rot=90, degree=True)\n\nfascicle_2 = nrv.fascicle(ID=2)\nfascicle_2.set_geometry(geometry=geom2)\n\n#Add the fascicles to the nerve\nnerve.add_fascicle(fascicle=fascicle_2)\n\n#plot\nfig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve.plot(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "build-fascicles-geometry",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Build fascicles\u2019 geometry"
        ]
      },
      "doc_lineno": 154
    },
    {
      "source": "n_ax = 100      #size of the axon population\nfascicle_1.axons.create_population(n_ax=n_ax, percent_unmyel=0.7, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\",)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "populate-fascicles-with-axons",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Populate fascicles with axons"
        ]
      },
      "doc_lineno": 229
    },
    {
      "source": "# The second step is to place the generated axon population within the fascicle. This is done using the :meth:`~nrv.nmod.axon_population.place_population`-method. This method automatically assigns (y, z) coordinates to each axon, ensuring that all axons are positioned inside the fascicle geometry. The placement algorithm respects the ``delta`` parameter, which sets the minimum allowed distance (in $\\mu m$) between axons and between axons and the fascicle border.\n#\n# .. note::\n#     A distinction can be done between the distance between axons and the distance with the border by using respectively ``delta_in`` and ``delta_trace``.\n#\n# The resulting positions are stored in the ``\"y\"`` and ``\"z\"`` columns of the ``axon_pop`` DataFrame (i.e., ``fascicle.axons.axon_pop``).\n# An additional boolean column ``\"is_placed\"`` is generated assessing if each axon could have been placed in the population. Thus, if the population is too large to fit within the fascicle given the specified ``delta`` (i.e. some lines of ``\"is_placed\"`` are ``False``), cooresponding axons will still exist in the population but will not be considered in the fascicle.\n#\n# .. seealso:\n#     More detail on mask and subpopulation in :doc:`Axon population users' guide <../usersguide/populations>`.\n#\n# .. tip::\n#     As Jupyter notebook offer a great viewer for ``pandas.DataFrame``, axon population can be well printed by adding the following line at the python cell: ```fascicle_1.axons.axon_pop```.\n\n\n\nfascicle_1.axons.place_population(delta=5)\n\nax_pop = fascicle_1.axons # Storing the population for later\nfascicle_1.axons.get_sub_population()",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "populate-fascicles-with-axons",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Populate fascicles with axons"
        ]
      },
      "doc_lineno": 249
    },
    {
      "source": "fascicle_2.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", delta=5)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "populate-fascicles-with-axons",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Populate fascicles with axons"
        ]
      },
      "doc_lineno": 432
    },
    {
      "source": "fig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve.plot(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "populate-fascicles-with-axons",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Populate fascicles with axons"
        ]
      },
      "doc_lineno": 457
    },
    {
      "source": "m_model = 'MRG'\num_model = 'Rattay_Aberham'\nu_param = {\"model\": um_model}\nm_param = {\"model\": m_model}\n\n#For fascicle1\nfascicle_1.set_axons_parameters(unmyelinated_only=True,**u_param)\nfascicle_1.set_axons_parameters(myelinated_only=True,**m_param)\n\n#For fascicle2\nfascicle_2.set_axons_parameters(unmyelinated_only=True,**u_param)\nfascicle_2.set_axons_parameters(myelinated_only=True,**m_param)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "populate-fascicles-with-axons",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Populate fascicles with axons"
        ]
      },
      "doc_lineno": 490
    },
    {
      "source": "extra_stim = nrv.FEM_stimulation(endo_mat=\"endoneurium_ranck\",      #endoneurium conductivity\n                                peri_mat=\"perineurium\",            #perineurium conductivity\n                                epi_mat=\"epineurium\",              #epineurium conductivity\n                                ext_mat=\"saline\")                  #saline solution conductivity",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "extracellular-stimulation-context",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Extracellular stimulation context"
        ]
      },
      "doc_lineno": 522
    },
    {
      "source": "life_d = 25                                 #LIFE diamter in um\nlife_length = 1000                          #LIFE active-site length in um\nlife_x_offset = (nerve_l-life_length)/2     #x position of the LIFE (centered)\n\nlife_y_c_0 = 0                              #LIFE_0 y-coordinate (in um)\nlife_z_c_0 = 150                            #LIFE_0 z-coordinate (in um)\nlife_y_c_1 = fasc1_y                        #LIFE_1 y-coordinate (in um)\nlife_z_c_1 = fasc1_z                        #LIFE_1 z-coordinate (in um)\nlife_y_c_2 = fasc2_center[0]                        #LIFE_2 y-coordinate (in um)\nlife_z_c_2 = fasc2_center[1]                        #LIFE_1 z-coordinate (in um)\n\nelec_0 = nrv.LIFE_electrode(\"LIFE_0\", life_d, life_length, life_x_offset, life_y_c_0, life_z_c_0, ID = 0) # LIFE in neither of the two fascicles\nelec_1 = nrv.LIFE_electrode(\"LIFE_1\", life_d, life_length, life_x_offset, life_y_c_1, life_z_c_1, ID = 1) # LIFE in the fascicle 1\nelec_2 = nrv.LIFE_electrode(\"LIFE_2\", life_d, life_length, life_x_offset, life_y_c_2, life_z_c_2, ID = 2) # LIFE in the fascicle 2\n\n#Dummy stimulus\ndummy_stim = nrv.stimulus()\ndummy_stim.pulse(0, 0.1, 1)\n\n#Attach electrodes to the extra_stim object\nextra_stim.add_electrode(elec_0, dummy_stim)\nextra_stim.add_electrode(elec_1, dummy_stim)\nextra_stim.add_electrode(elec_2, dummy_stim)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "adding-intracellular-electrodes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Extracellular stimulation context",
          "Adding intracellular electrodes"
        ]
      },
      "doc_lineno": 551
    },
    {
      "source": "nerve.attach_extracellular_stimulation(extra_stim)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "adding-intracellular-electrodes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Extracellular stimulation context",
          "Adding intracellular electrodes"
        ]
      },
      "doc_lineno": 591
    },
    {
      "source": "fig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve.plot(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "adding-intracellular-electrodes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Extracellular stimulation context",
          "Adding intracellular electrodes"
        ]
      },
      "doc_lineno": 609
    },
    {
      "source": "nerve.save_results = False\nnerve.return_parameters_only = False\nnerve.verbose = True\nnerve_results = nerve(t_sim=1,postproc_script = \"is_recruited\")         #Run the simulation",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 659
    },
    {
      "source": "fig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve_results.plot_recruited_fibers(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 688
    },
    {
      "source": "t_start = 0.1       #start of the pulse, in ms\nt_pulse = 0.1       #duration of the pulse, in ms\namp_pulse = 60      #amplitude of the pulse, in uA\n\npulse_stim = nrv.stimulus()\npulse_stim.pulse(t_start, -amp_pulse, t_pulse)      #cathodic pulse\n\nfig, ax = plt.subplots()                            #plot it\npulse_stim.plot(ax) #\nax.set_ylabel(\"Amplitude (\u00b5A)\")\nax.set_xlabel(\"Time (ms)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 720
    },
    {
      "source": "nerve.change_stimulus_from_electrode(ID_elec=2,stimulus=pulse_stim)\nnerve_results = nerve(t_sim=3,postproc_script = \"is_recruited\")\n\nfig, ax = plt.subplots(1, 1, figsize=(6,6))\nnerve_results.plot_recruited_fibers(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 761
    },
    {
      "source": "fasc_results = nerve_results.get_fascicle_results(ID = 1)                                #get results in fascicle 1\nunmyel = fasc_results.get_recruited_axons('unmyelinated', normalize = True)              #get ratio of unmyelinated axon activated in fascicle 1\nmyel = fasc_results.get_recruited_axons('myelinated', normalize = True)                  #get ratio of myelinated axon activated in fascicle 1\n\nprint(f\"Proportion of unmyelinated recruited in fascicle_1: {unmyel*100}%\")\nprint(f\"Proportion of myelinated recruited in fascicle_1: {myel*100}%\")\n\nfasc_results = nerve_results.get_fascicle_results(ID = 2)                                #get results in fascicle 2\nunmyel = fasc_results.get_recruited_axons('unmyelinated', normalize = True)              #get ratio of unmyelinated axon activated in fascicle 2\nmyel = fasc_results.get_recruited_axons('myelinated', normalize = True)                  #get ratio of myelinated axon activated in fascicle 2\n\nprint(f\"Proportion of unmyelinated recruited in fascicle_2: {unmyel*100}%\")\nprint(f\"Proportion of myelinated recruited in fascicle_2: {myel*100}%\")",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 801
    },
    {
      "source": "nerve.change_stimulus_from_electrode(ID_elec=0,stimulus=pulse_stim)\nnerve.change_stimulus_from_electrode(ID_elec=2,stimulus=dummy_stim)\nnerve_results = nerve(t_sim=3,postproc_script = \"is_recruited\")",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 842
    },
    {
      "source": "fasc_results = nerve_results.get_fascicle_results(ID = 1)                                #get results in fascicle 1\nunmyel = fasc_results.get_recruited_axons('unmyelinated', normalize = True)              #get ratio of unmyelinated axon activated in fascicle 1\nmyel = fasc_results.get_recruited_axons('myelinated', normalize = True)                  #get ratio of myelinated axon activated in fascicle 1\n\nprint(f\"Proportion of unmyelinated recruited in fascicle_1: {unmyel*100}%\")\nprint(f\"Proportion of myelinated recruited in fascicle_1: {myel*100}%\")\n\nfasc_results = nerve_results.get_fascicle_results(ID = 2)                                #get results in fascicle 2\nunmyel = fasc_results.get_recruited_axons('unmyelinated', normalize = True)              #get ratio of unmyelinated axon activated in fascicle 2\nmyel = fasc_results.get_recruited_axons('myelinated', normalize = True)                  #get ratio of myelinated axon activated in fascicle 2\n\nprint(f\"Proportion of unmyelinated recruited in fascicle_2: {unmyel*100}%\")\nprint(f\"Proportion of myelinated recruited in fascicle_2: {myel*100}%\")\n\nfig, ax = plt.subplots(figsize=(8, 8))\nnerve_results.plot_recruited_fibers(ax)\nax.set_xlabel(\"z-axis (\u00b5m)\")\nax.set_ylabel(\"y-axis (\u00b5m)\")",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "simulating-the-nerve",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Simulating the nerve"
        ]
      },
      "doc_lineno": 869
    },
    {
      "source": "def get_recruitment_electrode(elec_ID:int, amp_vec:np.array, nerve:nrv.nerve) -> list:\n\n    nerve.verbose = False\n\n    #create empty list to store results\n    unmyel_fasc1,myel_fasc1,unmyel_fasc2,myel_fasc2 = ([] for i in range(4))\n\n    #Deactivate unused electrodes\n    elec_IDs = [0,1,2]\n    unused_elec = [x for x in elec_IDs if elec_ID != x]\n    for elec in unused_elec:\n        nerve.change_stimulus_from_electrode(ID_elec=elec,stimulus=dummy_stim)\n\n    #Loop throught amp_vec\n    print(f\"Stimulating nerve with LIFE_{elec_ID}\")\n    for idx,amp in enumerate(amp_vec):\n        amp = np.round(amp,1)                                                       #get the amplitude\n        print(f\"Pulse amplitude set to {-amp}\u00b5A ({idx+1}/{len(amp_vec)})\")\n        pulse_stim = nrv.stimulus()                                                 #create a new empty stimulus\n        pulse_stim.pulse(t_start, -amp, t_pulse)                                    #create a pulse with the new amplitude\n        nerve.change_stimulus_from_electrode(ID_elec=elec_ID,stimulus=pulse_stim)    #attach stimulus to selected electrode\n        nerve_results = nerve(t_sim=3,postproc_script = \"is_recruited\", pbar_off=True)             #run the simulation\n\n        #add results to lists\n        fasc_results = nerve_results.get_fascicle_results(ID = 1)\n        unmyel_fasc1.append(fasc_results.get_recruited_axons('unmyelinated', normalize = True))\n        myel_fasc1.append(fasc_results.get_recruited_axons('myelinated', normalize = True))\n        fasc_results = nerve_results.get_fascicle_results(ID = 2)\n        unmyel_fasc2.append(fasc_results.get_recruited_axons('unmyelinated', normalize = True))\n        myel_fasc2.append(fasc_results.get_recruited_axons('myelinated', normalize = True))\n    return(unmyel_fasc1,myel_fasc1,unmyel_fasc2,myel_fasc2)",
      "names": [
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "list"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-lifes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with LIFEs"
        ]
      },
      "doc_lineno": 924
    },
    {
      "source": "amp_min = 0             #start at 0\u00b5A\namp_max = 100           #ends at 100\u00b5A\nn_amp = 20              #20pts\namp_vec = np.linspace(amp_min,amp_max,n_amp)\nnrv.parameters.set_nmod_ncore(4)            #number of core allocated to fascicle simulations\nunmyel_fasc1_LIFE0,myel_fasc1_LIFE0,unmyel_fasc2_LIFE0, myel_fasc2_LIFE0 = get_recruitment_electrode(0,amp_vec,nerve)\nunmyel_fasc1_LIFE1,myel_fasc1_LIFE1,unmyel_fasc2_LIFE1, myel_fasc2_LIFE1 = get_recruitment_electrode(1,amp_vec,nerve)\nunmyel_fasc1_LIFE2,myel_fasc1_LIFE2,unmyel_fasc2_LIFE2, myel_fasc2_LIFE2 = get_recruitment_electrode(2,amp_vec,nerve)\n\ndel nerve, extra_stim #to avoid meshing error, known bug",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-lifes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with LIFEs"
        ]
      },
      "doc_lineno": 972
    },
    {
      "source": "c_LIFE_0 = \"darkcyan\"\nc_LIFE_1 = \"orangered\"\nc_LIFE_2 = \"seagreen\"\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.plot(amp_vec,myel_fasc1_LIFE0, '-o', lw=2, color= c_LIFE_0, label = 'LIFE_0')\nax1.plot(amp_vec,myel_fasc1_LIFE1, '-o', lw=2, color= c_LIFE_1, label = 'LIFE_1')\nax1.plot(amp_vec,myel_fasc1_LIFE2, '-o', lw=2, color= c_LIFE_2, label = 'LIFE_2')\nax1.set_title(\"Fascicle 1 - Myelinated\")\n\nax2.plot(amp_vec,myel_fasc2_LIFE0, '-o', lw=2, color= c_LIFE_0, label = 'LIFE_0')\nax2.plot(amp_vec,myel_fasc2_LIFE1, '-o', lw=2, color= c_LIFE_1, label = 'LIFE_1')\nax2.plot(amp_vec,myel_fasc2_LIFE2, '-o', lw=2, color= c_LIFE_2, label = 'LIFE_2')\nax2.set_title(\"Fascicle 2 - Myelinated\")\n\nfor ax in ax1, ax2:\n    ax.set_xlabel('Amplitude (\u00b5A)')\n    ax.set_ylabel('Recruitment')\n    ax.legend()\n\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-lifes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with LIFEs"
        ]
      },
      "doc_lineno": 1187
    },
    {
      "source": "fig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(amp_vec,unmyel_fasc1_LIFE0, '-o', lw=2, color= c_LIFE_0, label = 'LIFE_0')\nax1.plot(amp_vec,unmyel_fasc1_LIFE1, '-o', lw=2, color= c_LIFE_1, label = 'LIFE_1')\nax1.plot(amp_vec,unmyel_fasc1_LIFE2, '-o', lw=2, color= c_LIFE_2, label = 'LIFE_2')\nax1.set_title(\"Fascicle 1 - Unmyelinated\")\n\nax2.plot(amp_vec,unmyel_fasc2_LIFE0, '-o', lw=2, color= c_LIFE_0, label = 'LIFE_0')\nax2.plot(amp_vec,unmyel_fasc2_LIFE1, '-o', lw=2, color= c_LIFE_1, label = 'LIFE_1')\nax2.plot(amp_vec,unmyel_fasc2_LIFE2, '-o', lw=2, color= c_LIFE_2, label = 'LIFE_2')\nax2.set_title(\"Fascicle 2 - Unmyelinated\")\n\nfor ax in ax1, ax2:\n    ax.set_xlabel('Amplitude (\u00b5A)')\n    ax.set_ylabel('Recruitment')\n    ax.legend()\n\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-lifes",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with LIFEs"
        ]
      },
      "doc_lineno": 1236
    },
    {
      "source": "#creating the fascicles are populating them\nfascicle_1_c = nrv.fascicle(diameter=fasc1_d,ID=1)\nfascicle_2_c = nrv.fascicle(ID=2)\nfascicle_2_c.set_geometry(geometry=geom2)\n\nfascicle_1_c.fill(data=ax_pop[[\"types\", \"diameters\"]], delta=5, fit_to_size=True)\nfascicle_2_c.fill(data=ax_pop[[\"types\", \"diameters\"]], delta=5, fit_to_size = True)\n\n#set simulation parameters\nfascicle_1_c.set_axons_parameters(unmyelinated_only=True,**u_param)\nfascicle_1_c.set_axons_parameters(myelinated_only=True,**m_param)\nfascicle_2_c.set_axons_parameters(unmyelinated_only=True,**u_param)\nfascicle_2_c.set_axons_parameters(myelinated_only=True,**m_param)\n\n#create the nerve and add fascicles\nnerve_cuff = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d)\nnerve_cuff.add_fascicle(fascicle=fascicle_1_c, y=fasc1_y, z=fasc1_z)\nnerve_cuff.add_fascicle(fascicle=fascicle_2_c, y=fasc2_center[0], z=fasc2_center[1])\n\n#set the simulation flags\nnerve_cuff.save_results = False\nnerve_cuff.return_parameters_only = False\nnerve_cuff.verbose = True",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-a-monopolar-cuff-like-electrode",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with a monopolar cuff-like electrode"
        ]
      },
      "doc_lineno": 1280
    },
    {
      "source": "extra_stim_cuff = nrv.FEM_stimulation(endo_mat=\"endoneurium_ranck\",      #endoneurium conductivity\n                                peri_mat=\"perineurium\",            #perineurium conductivity\n                                epi_mat=\"epineurium\",              #epineurium conductivity\n                                ext_mat=\"saline\")                  #saline solution conductivity\n\ncontact_length=1000         # length (width) of the cuff contact, in um\ncontact_thickness=100       # thickness of the contact, in um\ninsulator_length=1500       # length (width) of the cuff insulator, on top of the contact\ninsulator_thickness=500     # thickness of the in insulator\nx_center = nerve_l/2        # x-position of the cuff\n\ncuff_1 = nrv.CUFF_electrode('CUFF', contact_length=contact_length,\n    contact_thickness=contact_thickness, insulator_length=insulator_length,\n    insulator_thickness=insulator_thickness, x_center=x_center)\n\nextra_stim_cuff.add_electrode(cuff_1, dummy_stim)\nnerve_cuff.attach_extracellular_stimulation(extra_stim_cuff)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nnerve_cuff.plot(ax)",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-a-monopolar-cuff-like-electrode",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with a monopolar cuff-like electrode"
        ]
      },
      "doc_lineno": 1330
    },
    {
      "source": "#create empty list to store results\nunmyel_fasc1_cuff,myel_fasc1_cuff,unmyel_fasc2_cuff,myel_fasc2_cuff = ([] for i in range(4))\n\n#Loop throught amp_vec\nprint(\"Stimulating nerve with CUFF\")\nfor idx,amp in enumerate(amp_vec):\n    amp = np.round(amp,1)                                                       #get the amplitude\n    print(f\"Pulse amplitude set to {-amp}\u00b5A ({idx+1}/{len(amp_vec)})\")\n    pulse_stim = nrv.stimulus()                                                 #create a new empty stimulus\n    pulse_stim.pulse(t_start, -amp, t_pulse)                                    #create a pulse with the new amplitude\n    nerve_cuff.change_stimulus_from_electrode(ID_elec=0,stimulus=pulse_stim)          #attach stimulus to selected electrode\n    nerve_results = nerve_cuff(t_sim=3,postproc_script = \"is_recruited\", pbar_off=True)             #run the simulation\n\n    #add results to lists\n    fasc_results = nerve_results.get_fascicle_results(ID = 1)\n    unmyel_fasc1_cuff.append(fasc_results.get_recruited_axons('unmyelinated', normalize = True))\n    myel_fasc1_cuff.append(fasc_results.get_recruited_axons('myelinated', normalize = True))\n    fasc_results = nerve_results.get_fascicle_results(ID = 2)\n    unmyel_fasc2_cuff.append(fasc_results.get_recruited_axons('unmyelinated', normalize = True))\n    myel_fasc2_cuff.append(fasc_results.get_recruited_axons('myelinated', normalize = True))",
      "names": [
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-a-monopolar-cuff-like-electrode",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with a monopolar cuff-like electrode"
        ]
      },
      "doc_lineno": 1373
    },
    {
      "source": "c_fascicle_0 = \"royalblue\"\nc_fascicle_1 = \"orange\"\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(amp_vec,myel_fasc1_cuff, '-o', lw=2, color= c_fascicle_0, label = 'fascicle_0')\nax1.plot(amp_vec,myel_fasc2_cuff, '-o', lw=2, color= c_fascicle_1, label = 'fascicle_1')\nax1.set_title(\"Fascicle 1 - Myelinated\")\n\nax2.plot(amp_vec,unmyel_fasc1_cuff, '-o', lw=2, color= c_fascicle_0, label = 'fascicle_0')\nax2.plot(amp_vec,unmyel_fasc2_cuff, '-o', lw=2, color= c_fascicle_1, label = 'fascicle_1')\nax2.set_title(\"Fascicle 1 - Unmyelinated\")\n\nfor ax in ax1, ax2:\n    ax.set_xlabel('Amplitude (\u00b5A)')\n    ax.set_ylabel('Recruitment')\n    ax.legend()\n\nfig.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "recruitment-curves-with-a-monopolar-cuff-like-electrode",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV",
          "Recruitment curves with a monopolar cuff-like electrode"
        ]
      },
      "doc_lineno": 1478
    }
  ],
  "tutorials/5_first_optimization": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport nrv\n\nnp.random.seed(444)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "tutorial-5-first-optimization-problem-using-nrv",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": "## Cost function definition\nmy_cost0 = nrv.cost_function()",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "cost-function",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function"
        ]
      },
      "doc_lineno": 64
    },
    {
      "source": "ax_l = 10000 # um\nax_d=10\nax_y=50\nax_z=0\naxon_1 = nrv.myelinated(L=ax_l, d=ax_d, y=ax_y, z=ax_z)\n\n\nLIFE_stim0 = nrv.FEM_stimulation()\nLIFE_stim0.reshape_nerve(Length=ax_l)\nlife_d = 25 # um\nlife_length = 1000 # um\nlife_x_0_offset = life_length/2\nlife_y_c_0 = 0\nlife_z_c_0 = 0\nelec_0 = nrv.LIFE_electrode(\"LIFE\", life_d, life_length, life_x_0_offset, life_y_c_0, life_z_c_0)\n\ndummy_stim = nrv.stimulus()\ndummy_stim.pulse(0, 0.1, 1)\nLIFE_stim0.add_electrode(elec_0, dummy_stim)\n\naxon_1.attach_extracellular_stimulation(LIFE_stim0)\naxon_1.get_electrodes_footprints_on_axon()\naxon_dict = axon_1.save(extracel_context=True)\n\nfig, ax = plt.subplots(1, 1, figsize=(6,6))\naxon_1.plot(ax)\nax.set_xlim((-1.2*ax_y, 1.2*ax_y))\nax.set_ylim((-1.2*ax_y, 1.2*ax_y))\n\ndel axon_1",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "static-context",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function",
          "Static context"
        ]
      },
      "doc_lineno": 98
    },
    {
      "source": "static_context = axon_dict\nt_sim = 5\ndt = 0.005\nkwarg_sim = {\n    \"dt\":dt,\n    \"t_sim\":t_sim,\n}\n\nmy_cost0.set_static_context(static_context, **kwarg_sim)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "static-context",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function",
          "Static context"
        ]
      },
      "doc_lineno": 173
    },
    {
      "source": "t_start = 1\nI_max_abs = 100\n\ncm_0 = nrv.biphasic_stimulus_CM(start=t_start, s_cathod=\"0\", t_cathod=\"1\", s_anod=0)\nmy_cost0.set_context_modifier(cm_0)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "context-modifier",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function",
          "Context modifier"
        ]
      },
      "doc_lineno": 222
    },
    {
      "source": "test_points = np.array([[70, 0.5], [50, 1], [30, 1.5], [10, 2]])\n\nfig, ax = plt.subplots()\nax.grid()\nfor X in test_points:\n    axon_x = cm_0(X, static_context)\n    stim = axon_x.extra_stim.stimuli[0]\n    stim.plot(ax, label=f\"X={X}\")\n    ax.legend()\n    del axon_x",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "context-modifier",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function",
          "Context modifier"
        ]
      },
      "doc_lineno": 248
    },
    {
      "source": "# .. note::\n#     The second term of the equation (`\\alpha_r(N_{axon} - N_{recruited})`) essentially represents a function that is 1 if the fibre is triggered and 0 otherwise. This seemingly complicated notation allows us to use the same equation to evaluate a stimulus in contexts involving a larger number of axons.\n\n# .. note::\n#     With a good knowledge of the simulation results, it is possible to implement custom `cost_evaluation`, similar to `context_modifier`.\n#   It should be a function or a callable class taking a `sim_results` object and any additional `kwargs` parameters, returning a corresponding cost (`float`).\n\ncostR = nrv.recrutement_count_CE(reverse=True)\ncostC = nrv.stim_energy_CE()\n\ncost_evaluation = costR + 0.01 * costC\nmy_cost0.set_cost_evaluation(cost_evaluation)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Cost function",
          "Cost Evaluation"
        ]
      },
      "doc_lineno": 303
    },
    {
      "source": "pso_kwargs = {\n    \"maxiter\" : 50,\n    \"n_particles\" : 20,\n    \"opt_type\" : \"local\",\n    \"options\": {'c1': 0.6, 'c2': 0.6, 'w': 0.8, 'k': 3, 'p': 1},\n    \"bh_strategy\": \"reflective\",\n}\npso_opt = nrv.PSO_optimizer(**pso_kwargs)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 350
    },
    {
      "source": "# Problem definition\nmy_prob = nrv.Problem()\nmy_prob.costfunction = my_cost0\nmy_prob.optimizer = pso_opt",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 376
    },
    {
      "source": "t_end = 0.5\nduration_bound = (0.01, t_end)\nbounds0 = (\n    (0, I_max_abs),\n    duration_bound\n)\npso_kwargs_pb_0 = {\n    \"dimensions\" : 2,\n    \"bounds\" : bounds0,\n    \"comment\":\"pulse\"}\n\nres0 = my_prob(**pso_kwargs_pb_0)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 411
    },
    {
      "source": "print(\"best input vector:\", res0[\"x\"], \"\\nbest cost:\", res0[\"best_cost\"])",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 552
    },
    {
      "source": "fig_costs, axs_costs = plt.subplots(2, 1)\n\nstim = cm_0(res0.x, static_context).extra_stim.stimuli[0]\nstim.plot(axs_costs[0], label=\"rectangle pulse\")\naxs_costs[0].set_xlabel(\"best stimulus shape\")\naxs_costs[0].set_xlabel(\"time (ms)\")\naxs_costs[0].set_ylabel(\"amplitude (\u00b5A)\")\naxs_costs[0].grid()\n\nres0.plot_cost_history(axs_costs[1])\naxs_costs[1].set_xlabel(\"optimization iteration\")\naxs_costs[1].set_ylabel(\"cost\")\naxs_costs[1].grid()\nfig_costs.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 579
    },
    {
      "source": "simres = res0.compute_best_pos(my_cost0)\nsimres.rasterize(\"V_mem\")\nplt.figure()\nplt.scatter(simres[\"V_mem_raster_time\"], simres[\"V_mem_raster_x_position\"], color='darkslateblue')\nplt.xlabel('Times (ms)')\nplt.ylabel('Membrane voltage :math:`V_{mem} (mV)`')\nplt.xlim(0, t_sim)\nplt.ylim(0, simres[\"L\"])\nplt.grid()\nplt.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "First optimization: Pulse Stimulus on Single axon",
          "Optimization problem"
        ]
      },
      "doc_lineno": 620
    },
    {
      "source": "kwrgs_interp = {\n    \"dt\": dt,\n    \"amp_start\": 0,\n    \"amp_stop\": 0,\n    \"intertype\": \"Spline\",\n    \"bounds\": (-I_max_abs, 0),\n    \"t_sim\":t_sim,\n    \"t_end\": t_end,\n    \"t_shift\": t_start,\n    }\ncm_1 = nrv.stimulus_CM(interpolator=nrv.interpolate_Npts, intrep_kwargs=kwrgs_interp, t_sim=t_sim)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "second-optimization-spline-interpolated-stimulus",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "Second optimization spline interpolated stimulus"
        ]
      },
      "doc_lineno": 669
    },
    {
      "source": "test_points = np.array([[.1, -10, .2, -20], [.1, -60, .3, -45]])\n\nfig, ax = plt.subplots()\nax.grid()\nfor X in test_points:\n    axon_x = cm_1(X, static_context)\n    stim = axon_x.extra_stim.stimuli[0]\n    stim.plot(ax, label=f\"X={X}\")\n    plt.scatter(t_start+X[::2], X[1::2])\n    ax.legend()\n    del axon_x",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "second-optimization-spline-interpolated-stimulus",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "Second optimization spline interpolated stimulus"
        ]
      },
      "doc_lineno": 699
    },
    {
      "source": "my_cost_1 = nrv.cost_function(\n    static_context=static_context,\n    context_modifier=cm_1,\n    cost_evaluation=cost_evaluation,\n    kwargs_S=kwarg_sim)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "second-optimization-spline-interpolated-stimulus",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "Second optimization spline interpolated stimulus"
        ]
      },
      "doc_lineno": 734
    },
    {
      "source": "my_prob.costfunction = my_cost_1\n\nI_bound = (-I_max_abs, 0)\nt_bound = (0, t_end)\nbounds1 = (t_bound, I_bound, t_bound, I_bound)\npso_kwargs_pb_1 = {\n    \"dimensions\" : 4,\n    \"bounds\" : bounds1,\n    \"comment\":\"spline\",\n}\n\nres1 = my_prob(**pso_kwargs_pb_1)",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "second-optimization-spline-interpolated-stimulus",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "Second optimization spline interpolated stimulus"
        ]
      },
      "doc_lineno": 758
    },
    {
      "source": "fig_costs, axs_costs = plt.subplots(2, 1)\n\nstim_0 = cm_0(res0.x, static_context).extra_stim.stimuli[0]\nstim_1 = cm_1(res1.x, static_context).extra_stim.stimuli[0]\n\nstim_0.plot(axs_costs[0], label=\"rectangle pulse\")\nstim_1.plot(axs_costs[0], label=\"spline interpolated pulse\")\naxs_costs[0].set_xlabel(\"best stimulus shape\")\naxs_costs[0].set_xlabel(\"time (ms)\")\naxs_costs[0].set_ylabel(\"amplitude (\u00b5A)\")\naxs_costs[0].grid()\naxs_costs[0].legend()\n\nres0.plot_cost_history(axs_costs[1])\nres1.plot_cost_history(axs_costs[1])\naxs_costs[1].set_xlabel(\"optimization iteration\")\naxs_costs[1].set_ylabel(\"cost\")\naxs_costs[1].grid()\nfig_costs.tight_layout()",
      "names": [],
      "example": {
        "document": "tutorials/5_first_optimization",
        "ref_id": "second-optimization-spline-interpolated-stimulus",
        "headings": [
          "Tutorial 5 - First optimization problem using NRV",
          "Second optimization spline interpolated stimulus"
        ]
      },
      "doc_lineno": 895
    }
  ],
  "tutorials/6_play_with_eit": [
    {
      "source": "import nrv\nimport nrv.eit as eit\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\n\ntest_id = \"6\"\nres_dir  = f\"./{test_id}/\"\nif \"tutorials\" in os.listdir():\n    res_dir = \"./tutorials\" + res_dir[1:]\n\nnp.random.seed(4444)",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "eit"
          ],
          "code_str": "nrv.eit",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "nrv.eit"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "os"
          ],
          "code_str": "os",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "os"
        },
        {
          "import_components": [
            "os",
            "listdir"
          ],
          "code_str": "os.listdir",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "os.listdir"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "tutorial-6-play-with-eit-using-nrv",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV"
        ]
      },
      "doc_lineno": 38
    },
    {
      "source": "outer_d = 5     # mm\nnerve_d = 105  # um\nnerve_l = 15010  # um\npercent_unmyel = .7\nunmyelinated_nseg = 3000\naxons_data={\n    \"diameters\":[10.001],\n    \"types\":[1],\n    \"y\":[0],\n    \"z\":[0],\n}\n\nnerve_1 = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d, postproc_label=\"sample_keys\", record_g_mem=True)\n\n# Adding first fascicle\nn_ax1=30\nfasc1_d = (40, 60)   # um\nfasc1_y = 25     # um\nfasc1_z = 0     # um\nfascicle_1 = nrv.fascicle(diameter=fasc1_d, ID=1, unmyelinated_nseg=unmyelinated_nseg)\nfascicle_1.fill(n_ax=n_ax1, percent_unmyel=percent_unmyel, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", fit_to_size=False,delta=.5, delta_trace=3)\nnerve_1.add_fascicle(fascicle=fascicle_1, y=fasc1_y, z=fasc1_z)\n\n# Adding second fascicle\nn_ax2=10\nfasc2_d = 30   # um\nfasc2_y = -20     # um\nfasc2_z = -10     # um\nfascicle_2 = nrv.fascicle(diameter=fasc2_d, ID=2, unmyelinated_nseg=unmyelinated_nseg)\nfascicle_2.fill(n_ax=n_ax2, percent_unmyel=percent_unmyel, M_stat=\"Ochoa_M\", U_stat=\"Ochoa_U\", fit_to_size=False,delta=.5, delta_trace=3)\nnerve_1.add_fascicle(fascicle=fascicle_2, y=fasc2_y, z=fasc2_z)\n\nnerve_data = nerve_1.save(save=False)\n\nfig, ax = plt.subplots(figsize=(6, 6))\nnerve_1.plot(ax)\n\ndel nerve_1",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "setting-parameters",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Setting parameters"
        ]
      },
      "doc_lineno": 78
    },
    {
      "source": "# This includes specifying the geometry, electrode configuration, stimulation protocol, and other relevant settings required to set up and run the finite element simulation of impedance measurements.\n\nn_proc_global = 3\n\n\nl_elec = 1000 # um\nx_rec = 3000 # um\ni_drive = 30 # uA\n#dt_fem = 1 # ms\nt_sim=10 # ms\nt_iclamp = 0 # ms\nn_fem_step = 10*n_proc_global\n\ndt_fem = [\n    (2, .75),\n    (7,.4),\n    (-1,.75),\n        ]\n\nn_elec = 16\n\n\nsigma_method = \"mean\"\ninj_protocol_type = \"simple\"\nuse_gnd_elec = True\nparameters = {\"x_rec\":x_rec,\n\"dt_fem\":dt_fem,\n\"inj_protocol_type\":inj_protocol_type,\n\"n_proc_global\":n_proc_global,\n\"l_elec\":l_elec,\n\"i_drive\":i_drive,\n\"sigma_method\":sigma_method,\n\"use_gnd_elec\":use_gnd_elec,\n\"n_elec\":n_elec,\n}",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "setting-parameters",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Setting parameters"
        ]
      },
      "doc_lineno": 149
    },
    {
      "source": "eit_instance = eit.EIT2DProblem(nerve_data, res_dname=res_dir, label=test_id, **parameters)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 218
    },
    {
      "source": "## Nerve simulation\nsim_param = {\"t_sim\":t_sim}\nnrn_res = eit_instance.simulate_nerve(t_start=t_iclamp, sim_param=sim_param, fasc_list=[1])",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 252
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 6))\nnrn_res.plot_recruited_fibers(ax)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 281
    },
    {
      "source": "## Impedance simulation\neit_instance._setup_problem()\n# Build mesh\neit_instance.build_mesh()\n\n# Simulate nerve\nfem_res = eit_instance.simulate_eit()",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 320
    },
    {
      "source": "pat = fem_res[\"p\"][0]\ndv_pc = fem_res.dv_eit(i_p=0)\n\nfig = plt.figure()\n_, axs2 = eit.utils.gen_fig_elec(n_e=fem_res.n_e, fig=fig, )\n\neit.utils.add_nerve_plot(axs=axs2, data=nerve_data, drive_pair=pat)\neit.utils.plot_all_elec(axs=axs2, t=fem_res.t(), res_list=dv_pc,)\neit.utils.scale_axs(axs=axs2, e_gnd=[0], has_nerve=True)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 379
    },
    {
      "source": "if n_elec in [8, 16]:\n    fig = plt.figure(figsize=(20, 9))\n    subfigs = fig.subfigures(n_elec//4, 4)\n    axs = np.array([])\n    for i_p, pat in enumerate(fem_res[\"p\"]):\n        dv_pc = fem_res.dv_eit(i_p=i_p)\n        _, axs2 = eit.utils.gen_fig_elec(n_e=fem_res.n_e, fig=subfigs[i_p//4, i_p%4], small_fig=True)\n        eit.utils.add_nerve_plot(axs=axs2, data=nerve_data, drive_pair=pat)\n        eit.utils.plot_all_elec(axs=axs2, t=fem_res.t(), res_list=dv_pc,)\n        axs = np.concatenate([axs, axs2[1:-1]])\n        eit.utils.scale_axs(axs=axs2, e_gnd=[0], has_nerve=True)",
      "names": [
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "enumerate"
        }
      ],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "run-the-simulation",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Simulate the Measure (forward problem)",
          "Run the simulation"
        ]
      },
      "doc_lineno": 418
    },
    {
      "source": "inv_pb = eit.pyeit_inverse(data=fem_res)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 471
    },
    {
      "source": "print(fem_res.v_eit(i_t=0,signed=True).shape)\nplt.figure()\nplt.plot(fem_res.v_eit(i_t=0,signed=True))\n\nplt.xlabel(\"# drive electrode pair\")\nplt.ylabel(\"voltage (V)\")\nplt.title(\"Single ended measurements\")\nplt.figure()\nplt.plot(inv_pb.fromat_data())\nplt.xlabel(\"# drive electrode pair\")\nplt.ylabel(\"voltage (V)\")\nplt.title(\"Diferentrial measurements\")",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 485
    },
    {
      "source": "_dv = fem_res.dv_eit(i_e=fem_res.n_e//2, i_p=0,)\n\ni_tmax = np.argmax(np.abs(_dv))\n\nprint(f\"t_max={fem_res[\"t\"][i_tmax]}ms, (i_tmax={i_tmax})\")\n\n\nfig, ax = plt.subplots()\nax.plot(fem_res.t(), fem_res.dv_eit(i_e=fem_res.n_e//2, i_p=0), label=f\"Voltage shift measured by E{int(fem_res.n_e//2)}\")\nax.axvline(fem_res[\"t\"][i_tmax], color=(\"r\",.8), label=\"Measurment time used for\\n the reconstruction\")\nax.set_xlabel(\"time ($ms$)\")\nax.set_ylabel(\"voltage ($V$)\")\nax.legend()",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "int"
        }
      ],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 546
    },
    {
      "source": "v0 = inv_pb.fromat_data(i_t=0)\nv1 = inv_pb.fromat_data(i_t=i_tmax)\n\nfig, axs = plt.subplots(2)\naxs[0].plot(v0, \"-o\")\naxs[0].plot(v1, \"-o\")\n\naxs[1].plot(v1-v0)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 588
    },
    {
      "source": "ds = inv_pb.solve(i_t=i_tmax)[0]\n\nprint(type(ds), ds.shape, inv_pb.mesh_obj.node.shape, inv_pb.mesh_obj.element.shape)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "type"
          ],
          "code_str": "type",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "type"
        }
      ],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 628
    },
    {
      "source": "# draw\nfig, axs2 = plt.subplots(1, 2, figsize=(11, 9))\n\nnrn_res.plot_recruited_fibers(axs2[0])\naxs2[0].set_title(\"Simulated nerve\")\naxs2[0].set_axis_off()\n\ninv_pb.plot(ax=axs2[1], i_t=i_tmax)\naxs2[1].set_title(\"Reconstructed image\")\naxs2[1].set_aspect(\"equal\", adjustable=\"box\")",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 655
    },
    {
      "source": "# As an example lets use a simple threshold filter (see :func:`nrv.eit.utils.thr_window`) to highlight only the activated region.\n\nfig, ax2 = plt.subplots(figsize=(11, 9))\ninv_pb.plot(ax=ax2, i_t=i_tmax, filter=eit.utils.thr_window)",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "reconstruct-the-image-inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Reconstruct the image (inverse problem)"
        ]
      },
      "doc_lineno": 687
    },
    {
      "source": "eit_instance = eit.EIT2DProblem(nerve_data, res_dname=res_dir, label=test_id, **parameters)\n\n## Nerve simulation\nsim_param = {\"t_sim\":t_sim}\nnrn_res_2 = eit_instance.simulate_nerve(t_start=t_iclamp, sim_param=sim_param, fasc_list=[2])\n\n\n## Impedance simulation\neit_instance._setup_problem()\n# Build mesh\neit_instance.build_mesh()\n# Simulate nerve\nfem_res_2 = eit_instance.simulate_eit()",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "forward-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Second fascicle activation",
          "Forward problem"
        ]
      },
      "doc_lineno": 720
    },
    {
      "source": "inv_pb_2 = eit.pyeit_inverse(data=fem_res_2)\n\nds = inv_pb_2.solve(i_t=i_tmax)[0]\n\n# draw\nfig, axs2 = plt.subplots(1, 2, figsize=(11, 9))\nnrn_res_2.plot_recruited_fibers(axs2[0])\n\naxs2[0].set_title(\"Simulated nerve\")\n\ninv_pb_2.plot(ax=axs2[1], i_t=i_tmax)\naxs2[1].set_title(\"Reconstructed image\")\naxs2[1].set_aspect(\"equal\", adjustable=\"box\")",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "inverse-problem",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Second fascicle activation",
          "Inverse problem"
        ]
      },
      "doc_lineno": 767
    },
    {
      "source": "# draw\nfig, axs = plt.subplots(2, 3, figsize=(11, 9), layout=\"constrained\")\n\nnrn_res.plot_recruited_fibers(axs[0,0])\naxs[0,0].set_axis_off()\n\ninv_pb.plot(ax=axs[0,1], i_t=i_tmax)\naxs[0,1].set_aspect(\"equal\", adjustable=\"box\")\ninv_pb.plot(ax=axs[0,2], i_t=i_tmax, filter=eit.utils.thr_window)\naxs[0,2].set_aspect(\"equal\", adjustable=\"box\")\nnrn_res_2.plot_recruited_fibers(axs[1,0])\naxs[1,0].set_axis_off()\n\ninv_pb_2.plot(ax=axs[1,1], i_t=i_tmax)\naxs[1,1].set_aspect(\"equal\", adjustable=\"box\")\ninv_pb_2.plot(ax=axs[1,2], i_t=i_tmax, filter=eit.utils.thr_window)\naxs[1,2].set_aspect(\"equal\", adjustable=\"box\")\n\naxs[0,0].set_title(\"Simulated nerve\")\naxs[0,1].set_title(\"Reconstructed image\")\naxs[0,2].set_title(\"Filtered reconstruction\")",
      "names": [],
      "example": {
        "document": "tutorials/6_play_with_eit",
        "ref_id": "final-summary-plot",
        "headings": [
          "Tutorial 6 - Play with EIT using NRV",
          "Second fascicle activation",
          "Final summary plot"
        ]
      },
      "doc_lineno": 803
    }
  ],
  "tutorials/index": [],
  "tutorials/sg_execution_times": [],
  "usersguide": [
    {
      "source": "if __name__ == \"__main__\":\n    # your code here",
      "names": [],
      "example": {
        "document": "usersguide",
        "ref_id": "user-s-guide",
        "headings": [
          "User\u2019s Guide"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "import nrv\ny = 0                       # axon y position, in [um]\nz = 0                       # axon z position, in [um]\nd = 1                       # axon diameter, in [um]\nL = 5000                    # axon length, along x axis, in [um]\naxon1 = nrv.unmyelinated(y,z,d,L)\n\nax_dict = axon1.save()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "filename = \"ax_file.json\"\nax_dict = axon1.save(save=True, fname=filename)",
      "names": [],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": "del axon1\n\naxon2 = nrv.unmyelinated()\naxon2.load(ax_dict)\nprint(axon2.L == L)\n\ndel axon2\naxon3 = nrv.unmyelinated()\naxon3.load(filename)\nprint(axon3.L == L)",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon3",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 91
    },
    {
      "source": "axon1 = nrv.unmyelinated(y,z,d,L)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "axon1 = nrv.unmyelinated(**ax_dict)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 120
    },
    {
      "source": "axon1 = nrv.unmyelinated()\naxon1.load(filename)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 128
    },
    {
      "source": "axon1 = nrv.load_any(ax_dict)\nassert axon1.L == L\ndel axon1\n\naxon1 = nrv.load_any(filename)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 137
    }
  ],
  "usersguide/axon_simulations": [
    {
      "source": "def my_update_function(axon, amp, pw, some_args):\n    my_new_stim = nrv.stimulus()\n    my_new_stim.any_stim(amp)\n    axon.change_stimulus_from_electrode(elec_id, my_new_stim)\n\nmy_arg_stim = {'pw': 100, 'other_param': value}\n\nmy_threshold = nrv.axon_AP_threshold(\n    axon=my_axon,\n    amp_max=my_max_amp,\n    update_func=my_update_function,\n    args_update=my_arg_stim\n)",
      "names": [],
      "example": {
        "document": "usersguide/axon_simulations",
        "ref_id": "search-threshold-functions",
        "headings": [
          "Axon Simulations",
          "Search Threshold Functions"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "def my_process_threshold(my_param):\n    my_arg['my_param'] = my_param\n    return nrv.axon_AP_threshold(\n        axon=my_axon,\n        amp_max=my_amp_max,\n        update_func=my_update_function,\n        args_update=my_arg,\n        verbose=False\n    )\n\nif __name__ == '__main__':\n    my_thresholds = nrv.threshold_search_dispatcher(\n        my_process_threshold,\n        my_param_list\n    )",
      "names": [],
      "example": {
        "document": "usersguide/axon_simulations",
        "ref_id": "search-threshold-dispatching-functions",
        "headings": [
          "Axon Simulations",
          "Search Threshold Dispatching Functions"
        ]
      },
      "doc_lineno": 54
    }
  ],
  "usersguide/eit": [
    {
      "source": "import nrv\nimport nrv.eit as eit\n\n# Define nerve and fascicles\nnerve = nrv.nerve(length=15000, diameter=105, Outer_D=5)\nfascicle_1 = nrv.fascicle(diameter=(40, 60), ID=1)\nfascicle_1.fill(n_ax=30, percent_unmyel=0.7, delta=0.5, delta_trace=3)\nnerve.add_fascicle(fascicle_1, y=25, z=0)\nfascicle_2 = nrv.fascicle(diameter=30, ID=2)\nfascicle_2.fill(n_ax=10, percent_unmyel=0.7, delta=0.5, delta_trace=3)\nnerve.add_fascicle(fascicle_2, y=-20, z=-10)\n\n# Set EIT parameters\nparameters = {\n    \"n_elec\": 16,\n    \"l_elec\": 1000,\n    \"i_drive\": 30,\n    \"x_rec\": 3000,\n    \"sigma_method\": \"mean\",\n    \"inj_protocol_type\": \"simple\",\n    \"use_gnd_elec\": True,\n    \"n_proc_global\": 3,\n    \"dt_fem\": [(2, .75), (7, .4), (-1, .75)],\n}\n\n# Instantiate and run EIT problem\neit_instance = eit.EIT2DProblem(nerve.save(save=False), res_dname=\"./6/\", label=\"6\", **parameters)\nnrn_res = eit_instance.simulate_nerve(t_start=0, sim_param={\"t_sim\": 10}, fasc_list=[1])\neit_instance._setup_problem()\neit_instance.build_mesh()\nfem_res = eit_instance.simulate_eit()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "eit"
          ],
          "code_str": "nrv.eit",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "nrv.eit"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_2",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem"
          ],
          "code_str": "eit.EIT2DProblem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.eit._eit2d.EIT2DProblem"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem",
            "()"
          ],
          "code_str": "eit_instance",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.eit._eit2d.EIT2DProblem"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem",
            "()",
            "simulate_eit",
            "()"
          ],
          "code_str": "fem_res",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.eit.results._eit_forward_results.eit_forward_results"
        }
      ],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "typical-workflow",
        "headings": [
          "Electrical Impedance Tomography",
          "Forward Problem",
          "Typical workflow"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 6))\nnrn_res.plot_recruited_fibers(ax)\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "handle-the-results",
        "headings": [
          "Electrical Impedance Tomography",
          "Forward Problem",
          "Handle the results"
        ]
      },
      "doc_lineno": 100
    },
    {
      "source": "inv_pb = eit.pyeit_inverse(data=fem_res)\nv0 = inv_pb.fromat_data(i_t=0)\nv1 = inv_pb.fromat_data(i_t=i_tmax)\nds = inv_pb.solve(i_t=i_tmax)[0]\n\nfig, ax = plt.subplots()\ninv_pb.plot(ax=ax, i_t=i_tmax)\nplt.show()",
      "names": [],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "image-reconstruction",
        "headings": [
          "Electrical Impedance Tomography",
          "Inverse Problem",
          "Image reconstruction"
        ]
      },
      "doc_lineno": 125
    }
  ],
  "usersguide/electrodes": [],
  "usersguide/fem": [
    {
      "source": "my_FEM.reshape_fascicle(cshape_1, ID=0)  # Create fascicle ID 0\nmy_FEM.reshape_fascicle(cshape_2, ID=1)  # Create fascicle ID 1\nmy_FEM.reshape_fascicle(cshape_3, ID=0)  # Modify fascicle ID 0",
      "names": [],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "geometry-manipulation",
        "headings": [
          "FEM Simulations",
          "Geometry Manipulation"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "import nrv\nmy_axon = nrv.myelinated(...)                    # Create an axon\nmy_FEM = nrv.FEM_stimulation()                   # Create FEM model\nmy_FEM.reshape_nerve(nerve_d, nerve_l)           # Set nerve geometry\nmy_FEM.reshape_outerBox(outer_d)                 # Set simulation box size\nmy_FEM.reshape_fascicle(cshape_1, ID=0)          # Add fascicle 0\nmy_FEM.reshape_fascicle(cshape_2, ID=1)          # Add fascicle 1\nmy_FEM.add_electrode(my_electrode, my_stimulus)  # Add electrode and stimulus\nmy_axon.attach_extracellular_stimulation(my_FEM) # Attach FEM model to axon\nmy_result = my_axon(t_sim)                       # Run simulation",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "my_axon",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "my_axon",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        }
      ],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "examples",
        "headings": [
          "FEM Simulations",
          "Examples"
        ]
      },
      "doc_lineno": 70
    },
    {
      "source": "import nrv\nmy_nerve = nrv.nerve(...)                         # Create a Nerve\nmy_FEM = nrv.FEM_stimulation()                    # Create FEM model\nmy_FEM.add_electrode(my_electrode, my_stimulus)   # Add electrode and stimulus\nmy_nerve.attach_extracellular_stimulation(my_FEM) # Attach FEM model to nerve\nmy_result = my_nerve(t_sim)                       # Run simulation",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "my_nerve",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "my_nerve",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        }
      ],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "example-with-a-nerve",
        "headings": [
          "FEM Simulations",
          "Example with a Nerve"
        ]
      },
      "doc_lineno": 93
    }
  ],
  "usersguide/geometry": [
    {
      "source": "from nrv.utils.geom import CShape\n\nclass MyShape(CShape):\n    def get_trace(self):\n        # Return list of (y, z) points on the shape boundary\n        pass\n\n    def is_inside(self, point: tuple, delta: float = 0, for_all: bool = True):\n        # Check if the point or list of points is inside the shape\n        pass\n\n    def get_point_inside(self, n_pts: int = 1, delta: float = 0):\n        # Return an np.ndarray of random points inside the shape\n        pass",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "nrv.utils.geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape"
          ],
          "code_str": "CShape",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape"
          ],
          "code_str": "CShape",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "bool"
          ],
          "code_str": "bool",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "bool"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "geometry-base-class-cshape",
        "headings": [
          "Create (Fascicle) Geometry",
          "Geometry Base Class: CShape"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "from nrv.utils.geom import Circle\n\n# Create a circle with center (0, 0) and radius 50\ncircle = Circle(center=(0, 0), radius=50)\nprint(circle.is_inside((5, 5)))\n# out: True\nprint(circle.is_inside((100, 40)))\n# out: False",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "nrv.utils.geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle"
          ],
          "code_str": "Circle",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle"
          ],
          "code_str": "Circle",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle",
            "()"
          ],
          "code_str": "circle",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "builtin-shapes",
        "headings": [
          "Create (Fascicle) Geometry",
          "Builtin Shapes",
          "set_axons_parameters parameters"
        ]
      },
      "doc_lineno": 98
    },
    {
      "source": "import nrv\n\n# Create a circle with center (0, 0) and radius 50\ncircle = nrv.create_schape(center=(0, 0), radius=50)\nprint(circle.is_inside((5, 5)))\n# out: True\nprint(circle.is_inside((100, 40)))\n# out: False",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "builtin-shapes",
        "headings": [
          "Create (Fascicle) Geometry",
          "Builtin Shapes",
          "set_axons_parameters parameters"
        ]
      },
      "doc_lineno": 110
    }
  ],
  "usersguide/materials": [],
  "usersguide/optimization": [
    {
      "source": "import nrv\nmy_prob = nrv.Problem()\nmy_prob.costfunction = my_cost\nmy_prob.optimizer = my_optimizer",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "Problem"
          ],
          "code_str": "nrv.Problem",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Optimization",
          "Optimization Problem"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": "res_optim = my_prob(**kwargs)",
      "names": [
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res_optim",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Optimization",
          "Optimization Problem"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "my_cost = nrv.cost_function(\n    static_context=my_static_context,\n    context_modifier=my_context_modifier,\n    cost_evaluation=my_cost_evaluation,\n    kwargs_S=kwarg_sim,\n    kwargs_CM=kwarg_cm,\n    kwargs_CE=kwarg_ce\n)",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-function",
        "headings": [
          "Optimization",
          "Cost Function"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "my_cost = nrv.cost_function()\nmy_cost.set_static_context(my_static_context, **kwarg_sim)\nmy_cost.set_context_modifier(my_context_modifier, **kwarg_cm)\nmy_cost.set_cost_evaluation(my_cost_evaluation, **kwarg_ce)",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-function",
        "headings": [
          "Optimization",
          "Cost Function"
        ]
      },
      "doc_lineno": 79
    },
    {
      "source": "def homemade_context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:\n    local_sim = nrv.load_any(static_context, ...)\n    # Modify local_sim based on X\n    return local_sim",
      "names": [
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "local_sim",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "local_sim",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "context-modifier",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Built-in Context Modifiers"
        ]
      },
      "doc_lineno": 117
    },
    {
      "source": "def homemade_cost_evaluation(results: sim_results, **kwargs) -> float:\n    # Analyze `results` and return scalar cost\n    return cost",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 160
    },
    {
      "source": "class homemade_cost_evaluation(nrv.cost_evaluation):\n    def call_method(self, results: sim_results, **kwargs) -> float:\n        return cost",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_evaluation"
          ],
          "code_str": "nrv.cost_evaluation",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.cost_evaluation"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 168
    },
    {
      "source": "def __call__(self, results: sim_results, **kwargs) -> float:\n    return cost",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 176
    },
    {
      "source": "my_cost = nrv.cost_function(\n    static_context=my_static_context,\n    ...,\n    filters=my_filter\n)",
      "names": [],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "filter-optional",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Filter (optional)"
        ]
      },
      "doc_lineno": 187
    },
    {
      "source": "res = my_optimizer.minimize(func_to_minimize, ...)\n# or simply\nres = my_optimizer(func_to_minimize, ...)",
      "names": [],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimizer",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Optimizer"
        ]
      },
      "doc_lineno": 206
    }
  ],
  "usersguide/parallel": [],
  "usersguide/populations": [
    {
      "source": "import nrv\npop = nrv.axon_population()\npop.create_population_from_data((ax_type, ax_diameters))",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "axon_population"
          ],
          "code_str": "nrv.axon_population",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        },
        {
          "import_components": [
            "nrv",
            "axon_population",
            "()"
          ],
          "code_str": "pop",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 97
    },
    {
      "source": "import numpy as np\ndata = np.vstack((ax_type, ax_diameters))\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "vstack"
          ],
          "code_str": "np.vstack",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.vstack"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 104
    },
    {
      "source": "data = {\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":0}\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "from pandas import DataFrame\ndata =  DataFrame({\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":np.random.rand(len(ax_type))})\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "DataFrame",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pandas.DataFrame"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "DataFrame",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.DataFrame"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 119
    },
    {
      "source": "pop.create_population_from_stat(n_ax=100)",
      "names": [],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "create-ex-novo-populations-recommended-method",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Create ex-novo populations (recommended method)"
        ]
      },
      "doc_lineno": 133
    }
  ],
  "usersguide/postproc": [
    {
      "source": "val = my_result.my_key",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nrv-result-objects",
        "headings": [
          "Post-processing",
          "NRV Result Objects"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "val = my_result['my_key']",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nrv-result-objects",
        "headings": [
          "Post-processing",
          "NRV Result Objects"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "my_axon.record_V_mem = True         # save V_mem in the result object\nmy_axon.record_I_mem = True         # save I_mem in the result object\nmy_axon.record_g_mem = True         # save g_mem in the result object\nmy_axon.record_g_ions = True        # save all g_xx in the result object\nmy_axon.record_I_ions = True        # save all I_xx in the result object\nmy_axon.record_particles = True     # save all particles in the result object",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "axon-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "axon_results key/member"
        ]
      },
      "doc_lineno": 275
    },
    {
      "source": "my_axon_result = my_fascicle_result.axonx\nmy_axon_result = my_fascicle_result['axonx']  # equivalent",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "fascicle-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "Fascicle results"
        ]
      },
      "doc_lineno": 310
    },
    {
      "source": "my_fascicle_result = my_nerve_result.fasciclex\nmy_fascicle_result = my_nerve_result['fasciclex']  # equivalent",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nerve-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "Nerve results"
        ]
      },
      "doc_lineno": 325
    },
    {
      "source": "my_fasc.postproc_script = default_PP",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "built-in-functions-formerly-scripts",
        "headings": [
          "Post-processing",
          "Axon results",
          "Built-in functions (formerly scripts)"
        ]
      },
      "doc_lineno": 374
    },
    {
      "source": "my_fasc.postproc_script = \"default_PP\"",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "built-in-functions-formerly-scripts",
        "headings": [
          "Post-processing",
          "Axon results",
          "Built-in functions (formerly scripts)"
        ]
      },
      "doc_lineno": 380
    },
    {
      "source": "def my_custom_postproc(results: nrv.axon_results, **kwargs) -> nrv.axon_results:\n    # modify results in-place or return modified copy\n    return results",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "custom-post-processing-functions",
        "headings": [
          "Post-processing",
          "Axon results",
          "Custom post-processing functions"
        ]
      },
      "doc_lineno": 389
    },
    {
      "source": "import nrv\nimport numpy as np\n\ndef test_pp(results: nrv.axon_results, num=0):\n    results[\"comment\"] = \"Custom PP accessed\"\n    results[\"num\"] = num\n    results.remove_key(keys_to_keep={\"ID\", \"comment\", \"num\"})\n    return results\n\nfasc = nrv.fascicle()\nfasc.define_length(10000)\nfasc.axons_diameter = np.array([5.7])\nfasc.axons_type = np.array([1])\nfasc.axons_y = np.array([0])\nfasc.axons_z = np.array([0])\nfasc.postproc_script = test_pp\nfasc.postproc_kwargs = {\"num\": 1}\n\nresults = fasc.simulate()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "axon_results"
          ],
          "code_str": "nrv.axon_results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "nrv.nmod.results._fascicles_results.fascicle_results"
        }
      ],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "examples",
        "headings": [
          "Post-processing",
          "Axon results",
          "Examples"
        ]
      },
      "doc_lineno": 402
    },
    {
      "source": "import nrv\nimport numpy as np\n\ndef test_pp(results: nrv.axon_results, num=0):\n    results[\"comment\"] = \"Custom PP accessed\"\n    results[\"num\"] = num\n    results.remove_key(keys_to_keep={\"ID\", \"comment\", \"num\"})\n    return results\n\nfasc = nrv.fascicle()\nfasc.axons_diameter = np.array([5.7, 1.0])\nfasc.axons_type = np.array([1, 0])\nfasc.axons_y = np.array([0, 10])\nfasc.axons_z = np.array([0, 0])\nfasc.define_circular_contour(D=50)\n\nnerve = nrv.nerve(Length=10000)\nnerve.add_fascicle(fasc, ID=1)\nnerve.postproc_script = test_pp\nnerve.postproc_kwargs = {\"num\": 2}\n\nresults = nerve.simulate()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "axon_results"
          ],
          "code_str": "nrv.axon_results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod.results._nerve_results.nerve_results"
        }
      ],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "examples",
        "headings": [
          "Post-processing",
          "Axon results",
          "Examples"
        ]
      },
      "doc_lineno": 426
    }
  ],
  "usersguide/simulables": [
    {
      "source": "my_simulable.simulate(*myargs)",
      "names": [],
      "example": {
        "document": "usersguide/simulables",
        "ref_id": "simulable-objects",
        "headings": [
          "Simulable objects"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": "my_simulable(*myargs)",
      "names": [],
      "example": {
        "document": "usersguide/simulables",
        "ref_id": "simulable-objects",
        "headings": [
          "Simulable objects"
        ]
      },
      "doc_lineno": 23
    }
  ],
  "usersguide/stimuli": [
    {
      "source": "import nrv\n\nstim1 = nrv.stimulus()\nprint(len(stim1.s))\nprint(len(stim1.t))",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "stimuli",
        "headings": [
          "Stimuli"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "import matplotlib.pyplot as plt\n\nt_start = 1\nV_cat = 1\nt_cat = 60e-3   # recall, NRV's units are in ms\nt_dead = 40e-3\nca_ratio = 5\n\nbiphasic_stim = nrv.stimulus()\nbiphasic_stim.biphasic_pulse(t_start, V_cat,t_cat, V_cat/ca_ratio, t_dead)\n\nf_stim = 1      # recall, NRV's units are in ms\nduration = 10\namp = 0.5\n\nsinus_stim = nrv.stimulus()\nsinus_stim.sinus(t_start, duration, amp, f_stim)\n\n\n#print(dir(biphasic_stim))\nfig, axs = plt.subplots(1, 2, layout='constrained', figsize=(10, 4))\nbiphasic_stim.plot(axs[0])\naxs[0].set_title('Biphasic stimulus')\nsinus_stim.plot(axs[1])\naxs[1].set_title('Biphasic stimulus')",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "biphasic_stim",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "sinus_stim",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "stimuli-generators",
        "headings": [
          "Stimuli",
          "Stimuli Generators"
        ]
      },
      "doc_lineno": 182
    },
    {
      "source": "stim1, stim2 = nrv.stimulus(),nrv.stimulus()\n\nf_stim = 1\nt_start = 1\nduration = 99\namp = 0.5\n\nt_ramp_stop = 90\namp_start = 0\namp_max = 1\n\nstim1.sinus(t_start, duration, amp, f_stim)\nstim2.ramp_lim(t_start, t_ramp_stop, amp_start, amp_max, duration, dt=1)\n\nstim3 = stim1*stim2\nfig, axs = plt.subplots(1, 2, layout='constrained', figsize=(10, 4))\n\nstim1.plot(axs[0])\nstim2.plot(axs[0])\naxs[0].set_title('arguments of the product')\nstim3.plot(axs[1])\naxs[1].set_title('product result')",
      "names": [
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "mathematical-operations-with-stimuli",
        "headings": [
          "Stimuli",
          "Mathematical operations with stimuli"
        ]
      },
      "doc_lineno": 245
    }
  ]
}