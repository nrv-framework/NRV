{
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.__init__": [],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.default": [
    {
      "source": "def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return super().default(o)",
      "names": [
        {
          "import_components": [
            "iter"
          ],
          "code_str": "iter",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "iter"
        },
        {
          "import_components": [
            "TypeError"
          ],
          "code_str": "TypeError",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "TypeError"
        },
        {
          "import_components": [
            "list"
          ],
          "code_str": "list",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "list"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "super"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.default",
        "ref_id": "nrv-encoder-default",
        "headings": [
          "NRV_Encoder.default"
        ]
      },
      "doc_lineno": 8
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.encode": [
    {
      "source": ">>> from json.encoder import JSONEncoder\n>>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n'{\"foo\": [\"bar\", \"baz\"]}'",
      "names": [],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.encode",
        "ref_id": "nrv-encoder-encode",
        "headings": [
          "NRV_Encoder.encode"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.item_separator": [],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.iterencode": [
    {
      "source": "for chunk in JSONEncoder().iterencode(bigobject):\n    mysocket.write(chunk)",
      "names": [],
      "example": {
        "document": "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.iterencode",
        "ref_id": "nrv-encoder-iterencode",
        "headings": [
          "NRV_Encoder.iterencode"
        ]
      },
      "doc_lineno": 6
    }
  ],
  "_nrv/backend/NRV_Encoder/nrv.backend.NRV_Encoder.key_separator": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.__init__": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.get_parameters": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.load": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.save": [],
  "_nrv/backend/NRV_class/nrv.backend.NRV_class.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_class/nrv.backend.NRV_class.set_parameters",
        "ref_id": "nrv-class-set-parameters",
        "headings": [
          "NRV_class.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.__init__": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.clear": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.copy": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.fromkeys": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.get": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.get_parameters": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.is_dummy": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.is_empty": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.items": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.keys": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.load": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.pop": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.popitem": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.remove_key": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.save": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_results/nrv.backend.NRV_results.set_parameters",
        "ref_id": "nrv-results-set-parameters",
        "headings": [
          "NRV_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.setdefault": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.to_save": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.update": [],
  "_nrv/backend/NRV_results/nrv.backend.NRV_results.values": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.__init__": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.extracel_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.get_parameters": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.has_FEM_extracel": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.intracel_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.load": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.rec_status": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.save": [],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.set_parameters",
        "ref_id": "nrv-simulable-set-parameters",
        "headings": [
          "NRV_simulable.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/NRV_simulable/nrv.backend.NRV_simulable.simulate": [],
  "_nrv/backend/NRV_singleton/nrv.backend.NRV_singleton.__init__": [],
  "_nrv/backend/NRV_singleton/nrv.backend.NRV_singleton.mro": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.BOLD": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.ENDC": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.FAIL": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.HEADER": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKBLUE": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKCYAN": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.OKGREEN": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.UNDERLINE": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.WARNING": [],
  "_nrv/backend/bcolors/nrv.backend.bcolors.__init__": [],
  "_nrv/backend/nrv.backend.NRV_Encoder": [],
  "_nrv/backend/nrv.backend.NRV_class": [],
  "_nrv/backend/nrv.backend.NRV_results": [],
  "_nrv/backend/nrv.backend.NRV_simulable": [],
  "_nrv/backend/nrv.backend.NRV_singleton": [],
  "_nrv/backend/nrv.backend.bcolors": [],
  "_nrv/backend/nrv.backend.check_function_kwargs": [],
  "_nrv/backend/nrv.backend.check_json_fname": [],
  "_nrv/backend/nrv.backend.clear_prompt_line": [],
  "_nrv/backend/nrv.backend.create_folder": [],
  "_nrv/backend/nrv.backend.function_to_str": [],
  "_nrv/backend/nrv.backend.generate_new_fname": [],
  "_nrv/backend/nrv.backend.generate_results": [],
  "_nrv/backend/nrv.backend.init_reporter": [],
  "_nrv/backend/nrv.backend.is_NRV_class": [],
  "_nrv/backend/nrv.backend.is_NRV_class_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_class_list": [],
  "_nrv/backend/nrv.backend.is_NRV_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_dict_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_dict_list": [],
  "_nrv/backend/nrv.backend.is_NRV_object_dict": [],
  "_nrv/backend/nrv.backend.is_NRV_simulable": [],
  "_nrv/backend/nrv.backend.is_empty_iterable": [],
  "_nrv/backend/nrv.backend.is_iterable": [],
  "_nrv/backend/nrv.backend.json_dump": [],
  "_nrv/backend/nrv.backend.json_load": [],
  "_nrv/backend/nrv.backend.load_any": [],
  "_nrv/backend/nrv.backend.load_dxf_file": [],
  "_nrv/backend/nrv.backend.ncore_autoset": [],
  "_nrv/backend/nrv.backend.nrv_config": [],
  "_nrv/backend/nrv.backend.nrv_parameters": [],
  "_nrv/backend/nrv.backend.pass_debug_info": [],
  "_nrv/backend/nrv.backend.pass_info": [],
  "_nrv/backend/nrv.backend.progression_popup": [],
  "_nrv/backend/nrv.backend.prompt_debug": [],
  "_nrv/backend/nrv.backend.rise_error": [],
  "_nrv/backend/nrv.backend.rise_warning": [],
  "_nrv/backend/nrv.backend.rmv_ext": [],
  "_nrv/backend/nrv.backend.set_attributes": [],
  "_nrv/backend/nrv.backend.set_log_level": [],
  "_nrv/backend/nrv.backend.sim_results": [],
  "_nrv/backend/nrv.backend.simulable": [],
  "_nrv/backend/nrv.backend.str_to_function": [],
  "_nrv/backend/nrv_config/nrv.backend.nrv_config.__init__": [],
  "_nrv/backend/nrv_config/nrv.backend.nrv_config.display_machine_config": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.__init__": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_gmsh_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_nmod_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_nrv_verbosity": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.get_optim_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.gmsh_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.is_alone": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.load": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.nmod_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.optim_autoset": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.proc_label": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.save": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_gmsh_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_ncores": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_nmod_ncore": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_nrv_verbosity": [],
  "_nrv/backend/nrv_parameters/nrv.backend.nrv_parameters.set_optim_ncore": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.__init__": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.clear": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.copy": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.filter_freq": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.fromkeys": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.get": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.get_parameters": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.is_dummy": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.is_empty": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.items": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.keys": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.load": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.plot_stim": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.pop": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.popitem": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.remove_key": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.save": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/backend/sim_results/nrv.backend.sim_results.set_parameters",
        "ref_id": "sim-results-set-parameters",
        "headings": [
          "sim_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/backend/sim_results/nrv.backend.sim_results.setdefault": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.to_save": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.update": [],
  "_nrv/backend/sim_results/nrv.backend.sim_results.values": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.__init__": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.build_mesh": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.clear": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.clear_fem_res": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.dim": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.fem_res_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_info": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_nproc": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.get_parameters": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.i_drive": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.i_drive_A": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.inj_protocol": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.is_multi_patern": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.load": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_e": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_f": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_p": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.n_t": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.nerve_mesh_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.nerve_res_file": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.rerun_failed_steps": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_all_fem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_and_savefem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_fem": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.run_fem_1core": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.save": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_ncore_gmsh": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.set_parameters",
        "ref_id": "eit2dproblem-set-parameters",
        "headings": [
          "EIT2DProblem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_eit": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_nerve": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.simulate_recording": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.timers_dict": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.use_backup": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.v_shape": [],
  "_nrv/eit/EIT2DProblem/nrv.eit.EIT2DProblem.x_bounds_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.__init__": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.build_mesh": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.clear": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.clear_fem_res": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.dim": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.fem_res_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.get_nproc": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.get_parameters": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.i_drive": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.i_drive_A": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.inj_protocol": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.is_multi_patern": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.load": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_e": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_f": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_p": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.n_t": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.nerve_mesh_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.nerve_res_file": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.rerun_failed_steps": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_all_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_and_savefem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_fem": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.run_fem_1core": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.save": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.set_parameters",
        "ref_id": "eit3dproblem-set-parameters",
        "headings": [
          "EIT3DProblem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_eit": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_nerve": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.simulate_recording": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.timers_dict": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.use_backup": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.v_shape": [],
  "_nrv/eit/EIT3DProblem/nrv.eit.EIT3DProblem.x_bounds_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.__init__": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.build_mesh": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.clear": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.clear_fem_res": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.dim": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.fem_res_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.get_nproc": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.get_parameters": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.i_drive": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.i_drive_A": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.inj_protocol": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.is_multi_patern": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.load": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_e": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_f": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_p": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.n_t": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.nerve_mesh_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.nerve_res_file": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.rerun_failed_steps": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_all_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_and_savefem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_fem": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.run_fem_1core": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.save": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/eit/eit_forward/nrv.eit.eit_forward.set_parameters",
        "ref_id": "eit-forward-set-parameters",
        "headings": [
          "eit_forward.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_eit": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_nerve": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.simulate_recording": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.timers_dict": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.use_backup": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.v_shape": [],
  "_nrv/eit/eit_forward/nrv.eit.eit_forward.x_bounds_fem": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.__init__": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.clear_all_results": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.clear_results": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.fromat_data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.get_results": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.get_results_range": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.has_data": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.plot": [],
  "_nrv/eit/eit_inverse/nrv.eit.eit_inverse.solve": [],
  "_nrv/eit/nrv.eit.EIT2DProblem": [],
  "_nrv/eit/nrv.eit.EIT3DProblem": [],
  "_nrv/eit/nrv.eit.eit_forward": [
    {
      "source": ".. seealso::",
      "names": [],
      "example": {
        "document": "_nrv/eit/nrv.eit.eit_forward",
        "ref_id": "eit-forward",
        "headings": [
          "eit_forward"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/eit/nrv.eit.eit_inverse": [
    {
      "source": ".. seealso::",
      "names": [],
      "example": {
        "document": "_nrv/eit/nrv.eit.eit_inverse",
        "ref_id": "eit-inverse",
        "headings": [
          "eit_inverse"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/eit/nrv.eit.pyeit_inverse": [],
  "_nrv/eit/nrv.eit.results": [],
  "_nrv/eit/nrv.eit.utils": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.__init__": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.cbar": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.clear_all_results": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.clear_results": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.fromat_data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.get_results": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.get_results_range": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.has_data": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.plot": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.set_inversor": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.solve": [],
  "_nrv/eit/pyeit_inverse/nrv.eit.pyeit_inverse.update_mesh": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.__init__": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.clear": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.copy": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit_normalized": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.dv_eit_pc": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.e_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.f_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.fail_results": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.fromkeys": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_mask": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_t_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_acap_v_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_cap_i_t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_cap_mask": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_dv_from_df": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_idxs": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.get_reccap_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_failed_test": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_fem_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.has_nerve_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.i_t_duration": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.incorporate_nerve_res": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.is_multi_freqs": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.is_multi_patern": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.items": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.ix_": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.keys": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.load": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_e": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_f": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_p": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.n_t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.plot": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.pop": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.popitem": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.setdefault": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.shape": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.t": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.t_axis": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update_acap_inde_t_ppt": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.update_failed_results": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_0": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit_idx": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_eit_interp": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_rec": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.v_rec_interp": [],
  "_nrv/eit/results/eit_forward_results/nrv.eit.results.eit_forward_results.values": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.__init__": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.add_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.cap_duration": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.clear": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.copy": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit_normalized": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.dv_eit_pc": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.e_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.error": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.f_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.fail_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.fromkeys": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_mask": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_t_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_acap_v_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_i_t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_i_t_lim": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_mask": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_cap_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_dv_from_df": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_idxs": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_reccap_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.get_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_failed_test": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_fem_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.has_nerve_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.i_t_duration": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.incorporate_nerve_res": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.is_multi_freqs": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.is_multi_patern": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.items": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.ix_": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.keys": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.load": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.mean": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_e": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_f": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_p": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.n_t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.plot": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.pop": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.popitem": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.r_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.res_argwhere": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.res_where": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.setdefault": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.shape": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.std": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.t": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.t_axis": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update_acap_inde_t_ppt": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.update_failed_results": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_0": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit_idx": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_eit_interp": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_rec": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.v_rec_interp": [],
  "_nrv/eit/results/eit_results_list/nrv.eit.results.eit_results_list.values": [],
  "_nrv/eit/results/nrv.eit.results.eit_forward_results": [
    {
      "source": ">>> res = eit_forward_results(nerve_res=nerve_sim, fem_res=fem_sim) # create results\n>>> dv = res.dv_eit(i_e=0) # Access voltage shift of the first electrode\n>>> cap_mask = res.get_cap_mask(thr=0.1)\n>>> res.plot_recruited_fibers(ax)",
      "names": [],
      "example": {
        "document": "_nrv/eit/results/nrv.eit.results.eit_forward_results",
        "ref_id": "eit-forward-results",
        "headings": [
          "eit_forward_results"
        ]
      },
      "doc_lineno": 25
    }
  ],
  "_nrv/eit/results/nrv.eit.results.eit_results_list": [
    {
      "source": ">>> res_list = eit_results_list(dt=0.001)\n>>> res_list.add_results([res1, res2, res3])\n>>> mean_v = res_list.mean(which=\"v_eit\")\n>>> cap_times = res_list.get_cap_i_t(thr=0.1)\n>>> error = res_list.error(which=\"v_eit\", i_res_ref=0)",
      "names": [],
      "example": {
        "document": "_nrv/eit/results/nrv.eit.results.eit_results_list",
        "ref_id": "eit-results-list",
        "headings": [
          "eit_results_list"
        ]
      },
      "doc_lineno": 28
    }
  ],
  "_nrv/eit/results/nrv.eit.results.load_res": [],
  "_nrv/eit/results/nrv.eit.results.res_list_from_labels": [],
  "_nrv/eit/results/nrv.eit.results.synchronize_times": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.__init__": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.add_nerve_plot": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.axs": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.boxplot": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.color_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.fig": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.fill_between_all_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.plot_all_elec": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.scale_axs": [],
  "_nrv/eit/utils/Figure_elec/nrv.eit.utils.Figure_elec.snsplot": [],
  "_nrv/eit/utils/nrv.eit.utils.Figure_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.add_nerve_plot": [],
  "_nrv/eit/utils/nrv.eit.utils.color_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.fill_between_all_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.gen_fig_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.gen_idx_arange": [],
  "_nrv/eit/utils/nrv.eit.utils.get_samples_index": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_all_elec": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_array": [],
  "_nrv/eit/utils/nrv.eit.utils.plot_nerve_nor": [],
  "_nrv/eit/utils/nrv.eit.utils.sample_nerve_results": [],
  "_nrv/eit/utils/nrv.eit.utils.scale_axs": [],
  "_nrv/eit/utils/nrv.eit.utils.thr_window": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.__init__": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.clear_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.compute_field": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_ID_number": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.get_parameters": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.load": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.load_electrode": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.parameter_model": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.plot": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.rotate": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.save": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.save_electrode": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_ID_number": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_footprint": [],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.set_parameters",
        "ref_id": "cuff-mp-electrode-set-parameters",
        "headings": [
          "CUFF_MP_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/CUFF_MP_electrode/nrv.fmod.CUFF_MP_electrode.translate": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.__init__": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.clear_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.compute_field": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_ID_number": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.get_parameters": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.load": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.load_electrode": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.parameter_model": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.plot": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.rotate": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.save": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.save_electrode": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_ID_number": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_footprint": [],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.set_parameters",
        "ref_id": "cuff-electrode-set-parameters",
        "headings": [
          "CUFF_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/CUFF_electrode/nrv.fmod.CUFF_electrode.translate": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.__init__": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.build_and_mesh": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.clear": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.close": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.export": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_meshes": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_parameter": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_parameters": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_potentials": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.get_timers": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.load": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.save": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameter": [],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.set_parameters",
        "ref_id": "comsol-model-set-parameters",
        "headings": [
          "COMSOL_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/COMSOL_model/nrv.fmod.FEM.COMSOL_model.solve": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.__init__": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.get_parameters": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.get_timers": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.load": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.save": [],
  "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/FEM_model/nrv.fmod.FEM.FEM_model.set_parameters",
        "ref_id": "fem-model-set-parameters",
        "headings": [
          "FEM_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.N_electrode": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.N_fascicle": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.__init__": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.add_electrode": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.build_and_mesh": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_meshes": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_potentials": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.get_timers": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.load": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.load_from_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.remove_fascicles": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reset_parameters": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_fascicle": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_nerve": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.reshape_outerBox": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.save": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.save_results": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_materials": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_n_proc": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.set_parameters",
        "ref_id": "fenics-model-set-parameters",
        "headings": [
          "FENICS_model.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.setup_simulations": [],
  "_nrv/fmod/FEM/FENICS_model/nrv.fmod.FEM.FENICS_model.solve": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_boundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.add_inboundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_space_of_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.get_spaces_of_ibound": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.load_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.print_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.print_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.save_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_mesh_file": [],
  "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMParameters/nrv.fmod.FEM.fenics_utils.FEMParameters.set_parameters",
        "ref_id": "femparameters-set-parameters",
        "headings": [
          "FEMParameters.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.aline_V": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.clone_res": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.eval": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.load_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.save_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_parameters",
        "ref_id": "femresults-set-parameters",
        "headings": [
          "FEMResults.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.set_sim_result": [],
  "_nrv/fmod/FEM/fenics_utils/FEMResults/nrv.fmod.FEM.fenics_utils.FEMResults.vector": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_boundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.add_inboundary": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.compute_conductance": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_domain_potential": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_solver_opt": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_space_of_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_spaces_of_ibound": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_surface": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.get_timers": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.load": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.load_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.print_mixedspace_domain": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.print_mixedspace_mat_pty": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.save": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.save_SimParameters": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_mesh_file": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_parameters",
        "ref_id": "femsimulation-set-parameters",
        "headings": [
          "FEMSimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_result_merging": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.set_solver_opt": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.setup_sim": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solve": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solve_and_save_sim": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.solver_info": [],
  "_nrv/fmod/FEM/fenics_utils/FEMSimulation/nrv.fmod.FEM.fenics_utils.FEMSimulation.visualize_mesh": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.clear_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_func": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_function_defined": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_isotropic": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.is_permitive": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.load_material": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.save_material": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_anisotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_conductivity_function": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_isotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_name": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_parameters",
        "ref_id": "f-material-set-parameters",
        "headings": [
          "f_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_permitivity": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.set_source": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_func": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_xx": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_yy": [],
  "_nrv/fmod/FEM/fenics_utils/f_material/nrv.fmod.FEM.fenics_utils.f_material.sigma_zz": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.get_fenics_sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.set_parameters",
        "ref_id": "fenics-material-set-parameters",
        "headings": [
          "fenics_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.sigma_fen": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.update_fenics_sigma": [],
  "_nrv/fmod/FEM/fenics_utils/fenics_material/nrv.fmod.FEM.fenics_utils.fenics_material.update_mat": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.__init__": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.clear_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.get_parameters": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_func": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_function_defined": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_isotropic": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.is_permitive": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.load": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.load_material": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.save": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.save_material": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_anisotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_conductivity_function": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_frequency": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_isotropic_conductivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_name": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_parameters",
        "ref_id": "layered-material-set-parameters",
        "headings": [
          "layered_material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_permitivity": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.set_source": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_func": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_xx": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_yy": [],
  "_nrv/fmod/FEM/fenics_utils/layered_material/nrv.fmod.FEM.fenics_utils.layered_material.sigma_zz": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMParameters": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMResults": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.FEMSimulation": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.V_from_meshfile": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.closest_point_in_mesh": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.domain_from_meshfile": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.f_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.fenics_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.get_sig_ap": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_f_mat": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_lay_mat": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.is_sim_res": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.layered_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.load_f_material": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.mat_from_csv": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.mat_from_interp": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.read_gmsh": [],
  "_nrv/fmod/FEM/fenics_utils/nrv.fmod.FEM.fenics_utils.save_sim_res_list": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.__init__": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_box": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_cone": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_cylinder": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_domains": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_from_cshape": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_line": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.add_point": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_1D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_2D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.domains_3D": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.fragment": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.generate": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_faces": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_info": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_mesh_info": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_obj": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_parameters": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_res": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.get_volumes": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.load": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.n_core": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.n_domains": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_entities": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_min": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refine_threshold": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.refinement_callback": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.rotate": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.save": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.save_geom": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_chara_blen": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_ncore": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_parameters",
        "ref_id": "mshcreator-set-parameters",
        "headings": [
          "MshCreator.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_res": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.set_verbosity": [],
  "_nrv/fmod/FEM/mesh_creator/MshCreator/nrv.fmod.FEM.mesh_creator.MshCreator.visualize": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.__init__": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF_MEA": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_CUFF_MP": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_LIFE": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_axon": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_box": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_cone": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_cylinder": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_electrode": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_from_cshape": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_line": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.add_point": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_entity_domain": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_geo": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_mesh": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.compute_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_1D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_2D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.domains_3D": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.fragment": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.generate": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_faces": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_info": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_mesh_info": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_obj": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_parameters": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.get_volumes": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.load": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.n_core": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.n_domains": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_entities": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_min": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refine_threshold": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.refinement_callback": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.remove_fascicles": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_axon": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_fascicle": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_nerve": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.reshape_outerBox": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.rotate": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.save": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.save_geom": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_chara_blen": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_gnd_facet": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_ncore": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_parameters",
        "ref_id": "nervemshcreator-set-parameters",
        "headings": [
          "NerveMshCreator.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_res": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.set_verbosity": [],
  "_nrv/fmod/FEM/mesh_creator/NerveMshCreator/nrv.fmod.FEM.mesh_creator.NerveMshCreator.visualize": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.MshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.NerveMshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.clear_gmsh": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.get_mesh_domid": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.get_node_physical_id": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.is_MshCreator": [],
  "_nrv/fmod/FEM/mesh_creator/nrv.fmod.FEM.mesh_creator.is_NerveMshCreator": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.COMSOL_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.FEM_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.FENICS_model": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.check_sim_dom": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.fenics_utils": [],
  "_nrv/fmod/FEM/nrv.fmod.FEM.mesh_creator": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.__init__": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.clear_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.compute_field": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_ID_number": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.get_parameters": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.load": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.load_electrode": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.plot": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.rotate": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.save": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.save_electrode": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_ID_number": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_footprint": [],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.set_parameters",
        "ref_id": "fem-electrode-set-parameters",
        "headings": [
          "FEM_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM_electrode/nrv.fmod.FEM_electrode.translate": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.__init__": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.add_electrode": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.change_stimulus_from_electrode": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.clear_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.compute_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.compute_vext": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.get_parameters": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.is_empty": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.load": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.load_extracel_context": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.plot": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.remove_fascicles": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reset_electrodes": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reset_stimuli": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_fascicle": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_nerve": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.reshape_outerBox": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.rotate": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.run_model": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.save": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.save_extracel_context": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_electrodes_footprints": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_n_proc": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.set_parameters",
        "ref_id": "fem-stimulation-set-parameters",
        "headings": [
          "FEM_stimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.setup_FEM": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.synchronise_stimuli": [],
  "_nrv/fmod/FEM_stimulation/nrv.fmod.FEM_stimulation.translate": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.__init__": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.clear_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.compute_field": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_ID_number": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.get_parameters": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.load": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.load_electrode": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.parameter_model": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.plot": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.rotate": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.save": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.save_electrode": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_ID_number": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_footprint": [],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.set_parameters",
        "ref_id": "life-electrode-set-parameters",
        "headings": [
          "LIFE_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/LIFE_electrode/nrv.fmod.LIFE_electrode.translate": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.__init__": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.clear_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.compute_field": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_ID_number": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.get_parameters": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.load": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.load_electrode": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.plot": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.rotate": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.save": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.save_electrode": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_ID_number": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_footprint": [],
  "_nrv/fmod/electrode/nrv.fmod.electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/electrode/nrv.fmod.electrode.set_parameters",
        "ref_id": "electrode-set-parameters",
        "headings": [
          "electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/electrode/nrv.fmod.electrode.translate": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.__init__": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.add_electrode": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.change_stimulus_from_electrode": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.clear_electrodes_footprints": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.compute_vext": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.get_parameters": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.is_empty": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.load": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.load_extracel_context": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.plot": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.reset_electrodes": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.reset_stimuli": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.rotate": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.save": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.save_extracel_context": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_electrodes_footprints": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.set_parameters",
        "ref_id": "extracellular-context-set-parameters",
        "headings": [
          "extracellular_context.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.synchronise_stimuli": [],
  "_nrv/fmod/extracellular_context/nrv.fmod.extracellular_context.translate": [],
  "_nrv/fmod/material/nrv.fmod.material.__init__": [],
  "_nrv/fmod/material/nrv.fmod.material.clear_frequency": [],
  "_nrv/fmod/material/nrv.fmod.material.get_parameters": [],
  "_nrv/fmod/material/nrv.fmod.material.is_isotropic": [],
  "_nrv/fmod/material/nrv.fmod.material.is_permitive": [],
  "_nrv/fmod/material/nrv.fmod.material.load": [],
  "_nrv/fmod/material/nrv.fmod.material.load_material": [],
  "_nrv/fmod/material/nrv.fmod.material.save": [],
  "_nrv/fmod/material/nrv.fmod.material.save_material": [],
  "_nrv/fmod/material/nrv.fmod.material.set_anisotropic_conductivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_frequency": [],
  "_nrv/fmod/material/nrv.fmod.material.set_isotropic_conductivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_name": [],
  "_nrv/fmod/material/nrv.fmod.material.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/material/nrv.fmod.material.set_parameters",
        "ref_id": "material-set-parameters",
        "headings": [
          "material.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/material/nrv.fmod.material.set_permitivity": [],
  "_nrv/fmod/material/nrv.fmod.material.set_source": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_xx": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_yy": [],
  "_nrv/fmod/material/nrv.fmod.material.sigma_zz": [],
  "_nrv/fmod/nrv.fmod.CUFF_MP_electrode": [],
  "_nrv/fmod/nrv.fmod.CUFF_electrode": [],
  "_nrv/fmod/nrv.fmod.FEM": [],
  "_nrv/fmod/nrv.fmod.FEM_electrode": [],
  "_nrv/fmod/nrv.fmod.FEM_stimulation": [],
  "_nrv/fmod/nrv.fmod.LIFE_electrode": [],
  "_nrv/fmod/nrv.fmod.NodeD_interpol": [],
  "_nrv/fmod/nrv.fmod.check_electrodes_overlap": [],
  "_nrv/fmod/nrv.fmod.compute_effective_conductivity": [],
  "_nrv/fmod/nrv.fmod.electrode": [],
  "_nrv/fmod/nrv.fmod.extracellular_context": [],
  "_nrv/fmod/nrv.fmod.get_mat_file_as_dict": [],
  "_nrv/fmod/nrv.fmod.is_CUFF_electrode": [],
  "_nrv/fmod/nrv.fmod.is_FEM_electrode": [],
  "_nrv/fmod/nrv.fmod.is_FEM_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_LIFE_electrode": [],
  "_nrv/fmod/nrv.fmod.is_analytical_electrode": [],
  "_nrv/fmod/nrv.fmod.is_analytical_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_extra_stim": [],
  "_nrv/fmod/nrv.fmod.is_mat": [],
  "_nrv/fmod/nrv.fmod.is_recorder": [],
  "_nrv/fmod/nrv.fmod.is_recording_point": [],
  "_nrv/fmod/nrv.fmod.load_any_electrode": [],
  "_nrv/fmod/nrv.fmod.load_any_extracel_context": [],
  "_nrv/fmod/nrv.fmod.load_material": [],
  "_nrv/fmod/nrv.fmod.material": [],
  "_nrv/fmod/nrv.fmod.point_source_electrode": [],
  "_nrv/fmod/nrv.fmod.recorder": [],
  "_nrv/fmod/nrv.fmod.recording_point": [],
  "_nrv/fmod/nrv.fmod.stimulation": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.__init__": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.clear_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.compute_field": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.compute_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_ID_number": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.get_parameters": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.load": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.load_electrode": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.plot": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.rotate": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.save": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.save_electrode": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_ID_number": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_footprint": [],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.set_parameters",
        "ref_id": "point-source-electrode-set-parameters",
        "headings": [
          "point_source_electrode.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/point_source_electrode/nrv.fmod.point_source_electrode.translate": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.__init__": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.add_axon_contribution": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.add_recording_point": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.compute_footprints": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.gather_all_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.get_parameters": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.init_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.is_empty": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.load": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.load_recorder": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.plot": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.reset_recordings": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.rotate": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.save": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.save_recorder": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/recorder/nrv.fmod.recorder.set_parameters",
        "ref_id": "recorder-set-parameters",
        "headings": [
          "recorder.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_point": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_volume": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_yplane": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_recording_zplane": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.set_time": [],
  "_nrv/fmod/recorder/nrv.fmod.recorder.translate": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.__init__": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.add_axon_contribution": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_LSA_isotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_PSA_anisotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.compute_PSA_isotropic_footprint": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_ID": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_method": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.get_parameters": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.init_recording": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.load": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.load_recording_point": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.reset_recording": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.rotate": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.save": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.save_recording_point": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_method": [],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/recording_point/nrv.fmod.recording_point.set_parameters",
        "ref_id": "recording-point-set-parameters",
        "headings": [
          "recording_point.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/recording_point/nrv.fmod.recording_point.translate": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.__init__": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.add_electrode": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.change_stimulus_from_electrode": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.clear_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.compute_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.compute_vext": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.get_parameters": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.is_empty": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.load": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.load_extracel_context": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.plot": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.reset_electrodes": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.reset_stimuli": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.rotate": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.save": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.save_extracel_context": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_electrodes_footprints": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/fmod/stimulation/nrv.fmod.stimulation.set_parameters",
        "ref_id": "stimulation-set-parameters",
        "headings": [
          "stimulation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.synchronise_stimuli": [],
  "_nrv/fmod/stimulation/nrv.fmod.stimulation.translate": [],
  "_nrv/nmod/axon/nrv.nmod.axon.__init__": [],
  "_nrv/nmod/axon/nrv.nmod.axon.attach_extracellular_recorder": [],
  "_nrv/nmod/axon/nrv.nmod.axon.attach_extracellular_stimulation": [],
  "_nrv/nmod/axon/nrv.nmod.axon.change_stimulus_from_electrode": [],
  "_nrv/nmod/axon/nrv.nmod.axon.clear_I_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.clear_V_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.extracel_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_ionic_current": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_capacitance": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_conductance": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_current": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_membrane_voltage": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_parameters": [],
  "_nrv/nmod/axon/nrv.nmod.axon.get_particules_values": [],
  "_nrv/nmod/axon/nrv.nmod.axon.has_FEM_extracel": [],
  "_nrv/nmod/axon/nrv.nmod.axon.insert_I_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.insert_V_Clamp": [],
  "_nrv/nmod/axon/nrv.nmod.axon.intracel_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.load": [],
  "_nrv/nmod/axon/nrv.nmod.axon.load_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.plot": [],
  "_nrv/nmod/axon/nrv.nmod.axon.rec_status": [],
  "_nrv/nmod/axon/nrv.nmod.axon.save": [],
  "_nrv/nmod/axon/nrv.nmod.axon.save_axon": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_conductance_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_ionic_current_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_membrane_current_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_membrane_voltage_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/axon/nrv.nmod.axon.set_parameters",
        "ref_id": "axon-set-parameters",
        "headings": [
          "axon.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/axon/nrv.nmod.axon.set_particules_values_recorders": [],
  "_nrv/nmod/axon/nrv.nmod.axon.shut_recorder_down": [],
  "_nrv/nmod/axon/nrv.nmod.axon.simulate": [],
  "_nrv/nmod/axon/nrv.nmod.axon.topology": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.__init__": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.add_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.axon_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.check_placement": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_masks": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.clear_population_placement": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.create_population_from_stat": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.fill_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_NoR_position_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_from_deprected_fascicle": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_ligned_NoR_position": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.generate_random_NoR_position": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_parameters": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_ppop_info": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.get_sub_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_geom": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_node_shift": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_placed_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.has_pop": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.hist": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.iloc": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.load": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.n_ax": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.n_mask": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.place_population": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.place_population_from_data": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.placed_id": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.plot": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.reshape_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.rotate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.save": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_geometry": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/axon_population/nrv.nmod.axon_population.set_parameters",
        "ref_id": "axon-population-set-parameters",
        "headings": [
          "axon_population.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.translate": [],
  "_nrv/nmod/axon_population/nrv.nmod.axon_population.valid_mask_labels": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.A": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.N": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.__init__": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.add_sim_mask": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.attach_extracellular_recorder": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.attach_extracellular_stimulation": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.center": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.change_stimulus_from_electrode": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.clear_I_clamp": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.clear_context": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.compute_electrodes_footprints": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.d": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.define_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.define_length": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.extracel_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fill": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fill_with_population": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.fit_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.generate_ligned_NoR_position": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.generate_random_NoR_position": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.geom": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_axons_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_circular_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_electrodes_footprints_on_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.get_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.has_FEM_extracel": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.import_contour": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.insert_I_Clamp": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.intracel_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.load": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.n_ax": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.plot": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.plot_x": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.radius": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rec_status": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_axons_electrode_overlap": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_axons_size_threshold": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_myelinated_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_sim_masks": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.remove_unmyelinated_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.rotate_fascicle": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.save": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.save_path": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_ID": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_axons_parameters": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_geometry": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/fascicle/nrv.nmod.fascicle.set_parameters",
        "ref_id": "fascicle-set-parameters",
        "headings": [
          "fascicle.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.shut_recorder_down": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.sim_axon": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.simulate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate_axons": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.translate_fascicle": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.verbose": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.y": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.y_grav_center": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.z": [],
  "_nrv/nmod/fascicle/nrv.nmod.fascicle.z_grav_center": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.__init__": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.attach_extracellular_recorder": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.attach_extracellular_stimulation": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.change_stimulus_from_electrode": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.clear_I_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.clear_V_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.extracel_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_Nav_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_ionic_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_ionic_current": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_capacitance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_current": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_membrane_voltage": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_myelin_capacitance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_myelin_conductance": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_parameters": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_particles_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.get_particules_values": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.has_FEM_extracel": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_I_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_I_Clamp_node": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_V_Clamp": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.insert_V_Clamp_node": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.intracel_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.load": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.load_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.n_nodes": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.plot": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.rec_status": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.save": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.save_axon": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_Markov_Nav": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_Nav_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_conductance_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_ionic_current_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_membrane_current_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_membrane_voltage_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_parameters",
        "ref_id": "myelinated-set-parameters",
        "headings": [
          "myelinated.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.set_particules_values_recorders": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.shut_recorder_down": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.simulate": [],
  "_nrv/nmod/myelinated/nrv.nmod.myelinated.topology": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.__init__": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.add_fascicle": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.attach_extracellular_recorder": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.attach_extracellular_stimulation": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.change_stimulus_from_electrode": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.clear_I_clamp": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.clear_context": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.compute_electrodes_footprints": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_ellipsoid_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.define_length": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.extracel_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.fit_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_axons_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_circular_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_fascicles": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_n_ax": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.get_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.has_FEM_extracel": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.import_contour": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.insert_I_Clamp": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.intracel_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.load": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.n_ax": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.n_fasc": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.plot": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.rec_status": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.save": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_ID": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_axons_parameters": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/nerve/nrv.nmod.nerve.set_parameters",
        "ref_id": "nerve-set-parameters",
        "headings": [
          "nerve.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/nerve/nrv.nmod.nerve.shut_recorder_down": [],
  "_nrv/nmod/nerve/nrv.nmod.nerve.simulate": [],
  "_nrv/nmod/nrv.nmod.axon": [],
  "_nrv/nmod/nrv.nmod.axon_population": [],
  "_nrv/nmod/nrv.nmod.fascicle": [],
  "_nrv/nmod/nrv.nmod.myelinated": [],
  "_nrv/nmod/nrv.nmod.nerve": [],
  "_nrv/nmod/nrv.nmod.results": [],
  "_nrv/nmod/nrv.nmod.unmyelinated": [],
  "_nrv/nmod/nrv.nmod.utils": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.APs_in_timeframe": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.APs_reached_end": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.__init__": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.block": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.block_summary": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.check_test_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.clear": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.colormap_plot": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.compute_f_mem": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.copy": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.count_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.detect_AP_collisions": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.detect_start_extrastim": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.extra_stim_properties": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.filter_freq": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.find_central_index": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.fromkeys": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.generate_axon": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.getAPspeed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_AP_downward_len": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_AP_upward_len": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_axon_xrec": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_collision_pts": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_interAPs_collision": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_membrane_material": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_parameters": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_start_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_start_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_xmax_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.get_xmin_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.has_AP_reached_end": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_blocked": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_dummy": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_empty": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.is_recruited": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.items": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.keys": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.linfit_AP": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.load": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.plot_stim": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.plot_x_t": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.pop": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.popitem": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.raster_plot": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.rasterize": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.remove_key": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.save": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.set_parameters",
        "ref_id": "axon-results-set-parameters",
        "headings": [
          "axon_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.setdefault": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.speed": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.split_APs": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.to_save": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.update": [],
  "_nrv/nmod/results/axon_results/nrv.nmod.results.axon_results.values": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.__init__": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.clear": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.copy": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.filter_freq": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.fromkeys": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.geom": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_axons_key": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_block_summary": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_block_summary_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_n_ax": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_parameters": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons_greater_than": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.get_recruited_axons_lesser_than": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.is_dummy": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.is_empty": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.items": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.keys": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.load": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.n_ax": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_block_summary": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_recruited_fibers": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.plot_stim": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.pop": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.popitem": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.remove_key": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.save": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.set_parameters",
        "ref_id": "fascicle-results-set-parameters",
        "headings": [
          "fascicle_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.setdefault": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.to_save": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.update": [],
  "_nrv/nmod/results/fascicle_results/nrv.nmod.results.fascicle_results.values": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.APs_in_timeframe": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.APs_reached_end": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.__init__": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.block": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.block_summary": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.check_test_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.clear": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.colormap_plot": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.compute_f_mem": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.copy": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.count_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.detect_AP_collisions": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.detect_start_extrastim": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.extra_stim_properties": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.filter_freq": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.find_central_index": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.find_central_node_coordinate": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.fromkeys": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.generate_axon": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.getAPspeed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_AP_downward_len": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_AP_upward_len": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_axon_xrec": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_collision_pts": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_index_myelinated_sequence": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_interAPs_collision": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_membrane_material": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_myelin_properties": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_parameters": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_start_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_start_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_xmax_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.get_xmin_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.has_AP_reached_end": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_blocked": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_dummy": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_empty": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.is_recruited": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.items": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.keys": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.linfit_AP": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.load": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_Nav_states": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_stim": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_x_t": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.plot_x_t_all_seq": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.pop": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.popitem": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.raster_plot": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.rasterize": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.remove_key": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.save": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.set_parameters",
        "ref_id": "myelinated-results-set-parameters",
        "headings": [
          "myelinated_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.setdefault": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.speed": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.split_APs": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.to_save": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.update": [],
  "_nrv/nmod/results/myelinated_results/nrv.nmod.results.myelinated_results.values": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.__init__": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons_pop_properties": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.axons_type": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.clear": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.copy": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fasc_geometries": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fasc_properties": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fascicle_keys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.filter_freq": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.fromkeys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_axon_results": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_fascicle_key": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_fascicle_results": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_parameters": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.get_recruited_axons": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.is_dummy": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.is_empty": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.items": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.keys": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.load": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.n_ax": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.n_fasc": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.plot_recruited_fibers": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.plot_stim": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.pop": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.popitem": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.remove_key": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.save": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.set_parameters",
        "ref_id": "nerve-results-set-parameters",
        "headings": [
          "nerve_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.setdefault": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.to_save": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.update": [],
  "_nrv/nmod/results/nerve_results/nrv.nmod.results.nerve_results.values": [],
  "_nrv/nmod/results/nrv.nmod.results.axon_results": [],
  "_nrv/nmod/results/nrv.nmod.results.fascicle_results": [],
  "_nrv/nmod/results/nrv.nmod.results.myelinated_results": [],
  "_nrv/nmod/results/nrv.nmod.results.nerve_results": [],
  "_nrv/nmod/results/nrv.nmod.results.unmyelinated_results": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.APs_in_timeframe": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.APs_reached_end": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.__init__": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.block": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.block_summary": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.check_test_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.clear": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.colormap_plot": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.compute_f_mem": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.copy": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.count_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.detect_AP_collisions": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.detect_start_extrastim": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.extra_stim_properties": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.filter_freq": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.find_central_index": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.fromkeys": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.generate_axon": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.getAPspeed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_1dpoly_intersec": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_AP_downward_len": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_AP_upward_len": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_avg_AP_speed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_axon_xrec": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_collision_pts": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_interAPs_collision": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_capacitance": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_complexe_admitance": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_conductivity": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_membrane_material": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_parameters": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_start_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_start_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_xmax_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.get_xmin_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.has_AP_reached_end": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_AP_in_timeframe": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_blocked": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_dummy": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_empty": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.is_recruited": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.items": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.keys": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.linfit_AP": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.load": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.plot_stim": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.plot_x_t": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.pop": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.popitem": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.raster_plot": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.rasterize": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.remove_key": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.remove_raster_artifacts": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.save": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.set_parameters",
        "ref_id": "unmyelinated-results-set-parameters",
        "headings": [
          "unmyelinated_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.setdefault": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.speed": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.split_APs": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.to_save": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.update": [],
  "_nrv/nmod/results/unmyelinated_results/nrv.nmod.results.unmyelinated_results.values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.__init__": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.attach_extracellular_recorder": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.attach_extracellular_stimulation": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.change_stimulus_from_electrode": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.clear_I_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.clear_V_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.extracel_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_electrodes_footprints_on_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_ionic_conductance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_ionic_current": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_capacitance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_conductance": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_current": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_membrane_voltage": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_parameters": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_particles_values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.get_particules_values": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.has_FEM_extracel": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.insert_I_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.insert_V_Clamp": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.intracel_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.load": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.load_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.plot": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.rec_status": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.save": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.save_axon": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_conductance_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_ionic_current_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_membrane_current_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_membrane_voltage_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_parameters",
        "ref_id": "unmyelinated-set-parameters",
        "headings": [
          "unmyelinated.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.set_particules_values_recorders": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.shut_recorder_down": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.simulate": [],
  "_nrv/nmod/unmyelinated/nrv.nmod.unmyelinated.topology": [],
  "_nrv/nmod/utils/Placer/nrv.nmod.utils.Placer.__init__": [],
  "_nrv/nmod/utils/Placer/nrv.nmod.utils.Placer.place_all": [],
  "_nrv/nmod/utils/nrv.nmod.utils.Placer": [],
  "_nrv/nmod/utils/nrv.nmod.utils.axon_packer": [],
  "_nrv/nmod/utils/nrv.nmod.utils.create_axon_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.dist_matrix": [],
  "_nrv/nmod/utils/nrv.nmod.utils.expand_pop": [],
  "_nrv/nmod/utils/nrv.nmod.utils.fill_area_with_axons": [],
  "_nrv/nmod/utils/nrv.nmod.utils.get_circular_contour": [],
  "_nrv/nmod/utils/nrv.nmod.utils.get_ppop_info": [],
  "_nrv/nmod/utils/nrv.nmod.utils.load_axon_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.load_stat": [],
  "_nrv/nmod/utils/nrv.nmod.utils.plot_population": [],
  "_nrv/nmod/utils/nrv.nmod.utils.remove_collision": [],
  "_nrv/nmod/utils/nrv.nmod.utils.remove_outlier_axons": [],
  "_nrv/nmod/utils/nrv.nmod.utils.save_axon_population": [],
  "_nrv/nrv.backend": [],
  "_nrv/nrv.eit": [],
  "_nrv/nrv.fmod": [],
  "_nrv/nrv.nmod": [],
  "_nrv/nrv.optim": [],
  "_nrv/nrv.ui": [],
  "_nrv/nrv.utils": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.__init__": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.get_parameters": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.load": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.minimize": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.save": [],
  "_nrv/optim/Optimizer/nrv.optim.Optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/Optimizer/nrv.optim.Optimizer.set_parameters",
        "ref_id": "optimizer-set-parameters",
        "headings": [
          "Optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.__init__": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.get_parameters": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.load": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.minimize": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.save": [],
  "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/PSO_optimizer/nrv.optim.PSO_optimizer.set_parameters",
        "ref_id": "pso-optimizer-set-parameters",
        "headings": [
          "PSO_optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/Problem/nrv.optim.Problem.__init__": [],
  "_nrv/optim/Problem/nrv.optim.Problem.autoset_optimizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.compute_cost": [],
  "_nrv/optim/Problem/nrv.optim.Problem.context_and_cost": [],
  "_nrv/optim/Problem/nrv.optim.Problem.costfunction": [],
  "_nrv/optim/Problem/nrv.optim.Problem.get_parameters": [],
  "_nrv/optim/Problem/nrv.optim.Problem.load": [],
  "_nrv/optim/Problem/nrv.optim.Problem.optimizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.optmizer": [],
  "_nrv/optim/Problem/nrv.optim.Problem.save": [],
  "_nrv/optim/Problem/nrv.optim.Problem.set_multiprocess_type": [],
  "_nrv/optim/Problem/nrv.optim.Problem.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/Problem/nrv.optim.Problem.set_parameters",
        "ref_id": "problem-set-parameters",
        "headings": [
          "Problem.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.__init__": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.get_parameters": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.get_sim_results": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.is_m_proc_func": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.load": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.save": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_context_modifier": [
    {
      "source": ">>> context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:",
      "names": [],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_context_modifier",
        "ref_id": "cost-function-set-context-modifier",
        "headings": [
          "cost_function.set_context_modifier"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_cost_evaluation": [
    {
      "source": ">>> cost_evaluation(results: sim_results, **kwargs) -> float:",
      "names": [],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_cost_evaluation",
        "ref_id": "cost-function-set-cost-evaluation",
        "headings": [
          "cost_function.set_cost_evaluation"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/cost_function/nrv.optim.cost_function.set_parameters",
        "ref_id": "cost-function-set-parameters",
        "headings": [
          "cost_function.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/cost_function/nrv.optim.cost_function.set_static_context": [],
  "_nrv/optim/cost_function/nrv.optim.cost_function.simulate_context": [],
  "_nrv/optim/nrv.optim.Optimizer": [],
  "_nrv/optim/nrv.optim.PSO_optimizer": [],
  "_nrv/optim/nrv.optim.Problem": [],
  "_nrv/optim/nrv.optim.cost_function": [
    {
      "source": ">>> context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:",
      "names": [],
      "example": {
        "document": "_nrv/optim/nrv.optim.cost_function",
        "ref_id": "cost-function",
        "headings": [
          "cost_function"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ">>> cost_evaluation(results: sim_results, **kwargs) -> float:",
      "names": [],
      "example": {
        "document": "_nrv/optim/nrv.optim.cost_function",
        "ref_id": "cost-function",
        "headings": [
          "cost_function"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/optim/nrv.optim.optim_utils": [],
  "_nrv/optim/nrv.optim.scipy_optimizer": [
    {
      "source": ">>> import nrv\n>>> my_cost1 = nrv.sphere()\n>>> my_opt = nrv.scipy_optimizer(dimension=2, x0= [100, 10], maxiter=10)\n>>> res = my_opt.minimize(my_cost1)\n>>> print(\"best position\",res.x, \"best cost\", res.best_cost)",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "sphere"
          ],
          "code_str": "nrv.sphere",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "sphere",
            "()"
          ],
          "code_str": "my_cost1",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer"
          ],
          "code_str": "nrv.scipy_optimizer",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.scipy_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer",
            "()"
          ],
          "code_str": "my_opt",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.optim._Optimizers.scipy_optimizer"
        },
        {
          "import_components": [
            "nrv",
            "sphere",
            "()"
          ],
          "code_str": "my_cost1",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.sphere"
        },
        {
          "import_components": [
            "nrv",
            "scipy_optimizer",
            "()",
            "minimize",
            "()"
          ],
          "code_str": "res",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/nrv.optim.scipy_optimizer",
        "ref_id": "scipy-optimizer",
        "headings": [
          "scipy_optimizer"
        ]
      },
      "doc_lineno": 59
    }
  ],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.load": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.save": [],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.set_parameters",
        "ref_id": "biphasic-stimulus-cm-set-parameters",
        "headings": [
          "biphasic_stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/biphasic_stimulus_CM/nrv.optim.optim_utils.biphasic_stimulus_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.__init__": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.call_method": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.compute_stimulus_cost": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.get_parameters": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.load": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.save": [],
  "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/charge_quantity_CE/nrv.optim.optim_utils.charge_quantity_CE.set_parameters",
        "ref_id": "charge-quantity-ce-set-parameters",
        "headings": [
          "charge_quantity_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.__init__": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.get_parameters": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.load": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.save": [],
  "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/context_modifier/nrv.optim.optim_utils.context_modifier.set_parameters",
        "ref_id": "context-modifier-set-parameters",
        "headings": [
          "context_modifier.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.load": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.save": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.set_parameters",
        "ref_id": "harmonic-stimulus-cm-set-parameters",
        "headings": [
          "harmonic_stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_CM/nrv.optim.optim_utils.harmonic_stimulus_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.__init__": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.get_parameters": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.interpolate": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.load": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.save": [],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.set_parameters",
        "ref_id": "harmonic-stimulus-with-pw-cm-set-parameters",
        "headings": [
          "harmonic_stimulus_with_pw_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/harmonic_stimulus_with_pw_CM/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM.stimulus_generator": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.biphasic_stimulus_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.charge_quantity_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.context_modifier": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.cost_position_saver": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.harmonic_stimulus_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.harmonic_stimulus_with_pw_CM": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate_Npts": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.interpolate_amp": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.optim_results": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.raster_count_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.recrutement_count_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.stim_energy_CE": [],
  "_nrv/optim/optim_utils/nrv.optim.optim_utils.stimulus_CM": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.__init__": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.add_filter": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.clear": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.compute_best_pos": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.copy": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.findbestpart": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.fromkeys": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.get": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.get_parameters": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_dummy": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_empty": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.is_stabilized": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.items": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.keys": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.load": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.plot_cost_history": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.pop": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.popitem": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.remove_key": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.save": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.set_parameters",
        "ref_id": "optim-results-set-parameters",
        "headings": [
          "optim_results.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.setdefault": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.stabilization_it": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.to_save": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.update": [],
  "_nrv/optim/optim_utils/optim_results/nrv.optim.optim_utils.optim_results.values": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.__init__": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.call_method": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.get_parameters": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.load": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.save": [],
  "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/raster_count_CE/nrv.optim.optim_utils.raster_count_CE.set_parameters",
        "ref_id": "raster-count-ce-set-parameters",
        "headings": [
          "raster_count_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.__init__": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.call_method": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.count_axon_activation": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.count_fascicle_activation": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.get_parameters": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.load": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.save": [],
  "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/recrutement_count_CE/nrv.optim.optim_utils.recrutement_count_CE.set_parameters",
        "ref_id": "recrutement-count-ce-set-parameters",
        "headings": [
          "recrutement_count_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.__init__": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.call_method": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.compute_stimulus_cost": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.get_parameters": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.load": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.save": [],
  "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/stim_energy_CE/nrv.optim.optim_utils.stim_energy_CE.set_parameters",
        "ref_id": "stim-energy-ce-set-parameters",
        "headings": [
          "stim_energy_CE.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.__init__": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.get_parameters": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.interpolate": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.load": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.save": [],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.set_parameters",
        "ref_id": "stimulus-cm-set-parameters",
        "headings": [
          "stimulus_CM.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/optim/optim_utils/stimulus_CM/nrv.optim.optim_utils.stimulus_CM.stimulus_generator": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.__init__": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.get_parameters": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.load": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.minimize": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.save": [],
  "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/optim/scipy_optimizer/nrv.optim.scipy_optimizer.set_parameters",
        "ref_id": "scipy-optimizer-set-parameters",
        "headings": [
          "scipy_optimizer.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/ui/nrv.ui.AP_detection": [],
  "_nrv/ui/nrv.ui.CAP_time_detection": [],
  "_nrv/ui/nrv.ui.axon_AP_threshold": [],
  "_nrv/ui/nrv.ui.axon_block_threshold": [],
  "_nrv/ui/nrv.ui.axon_state": [],
  "_nrv/ui/nrv.ui.block": [],
  "_nrv/ui/nrv.ui.blocking_threshold_from_axon": [],
  "_nrv/ui/nrv.ui.blocking_threshold_point_source": [],
  "_nrv/ui/nrv.ui.check_test_AP": [],
  "_nrv/ui/nrv.ui.compute_f_mem": [],
  "_nrv/ui/nrv.ui.count_spike": [],
  "_nrv/ui/nrv.ui.default_PP": [],
  "_nrv/ui/nrv.ui.detect_start_extrastim": [],
  "_nrv/ui/nrv.ui.extra_stim_properties": [],
  "_nrv/ui/nrv.ui.fascicular_state": [],
  "_nrv/ui/nrv.ui.filter_freq": [],
  "_nrv/ui/nrv.ui.find_central_node_index": [],
  "_nrv/ui/nrv.ui.firing_threshold_from_axon": [],
  "_nrv/ui/nrv.ui.firing_threshold_point_source": [],
  "_nrv/ui/nrv.ui.generate_axon_from_results": [],
  "_nrv/ui/nrv.ui.get_index_myelinated_sequence": [],
  "_nrv/ui/nrv.ui.get_myelin_properties": [],
  "_nrv/ui/nrv.ui.is_blocked": [],
  "_nrv/ui/nrv.ui.is_recruited": [],
  "_nrv/ui/nrv.ui.load_axon": [],
  "_nrv/ui/nrv.ui.load_fascicle": [],
  "_nrv/ui/nrv.ui.load_nerve": [],
  "_nrv/ui/nrv.ui.ls_axons_results": [],
  "_nrv/ui/nrv.ui.ls_csv": [],
  "_nrv/ui/nrv.ui.max_spike_position": [],
  "_nrv/ui/nrv.ui.mesh_from_electrode": [],
  "_nrv/ui/nrv.ui.mesh_from_extracellular_context": [],
  "_nrv/ui/nrv.ui.mesh_from_fascicle": [],
  "_nrv/ui/nrv.ui.mesh_from_nerve": [],
  "_nrv/ui/nrv.ui.plot_Nav_states": [],
  "_nrv/ui/nrv.ui.plot_fasc_state": [],
  "_nrv/ui/nrv.ui.raster_plot": [],
  "_nrv/ui/nrv.ui.rasterize": [],
  "_nrv/ui/nrv.ui.remove_key": [],
  "_nrv/ui/nrv.ui.remove_non_NoR_zones": [],
  "_nrv/ui/nrv.ui.rm_file": [],
  "_nrv/ui/nrv.ui.rm_sim_dir": [],
  "_nrv/ui/nrv.ui.rm_sim_dir_from_results": [],
  "_nrv/ui/nrv.ui.rmv_keys": [],
  "_nrv/ui/nrv.ui.sample_g_mem": [],
  "_nrv/ui/nrv.ui.sample_keys": [],
  "_nrv/ui/nrv.ui.search_threshold_dispatcher": [],
  "_nrv/ui/nrv.ui.speed": [],
  "_nrv/ui/nrv.ui.update_fascicle_file": [],
  "_nrv/ui/nrv.ui.vmem_plot": [],
  "_nrv/utils/Id/nrv.utils.Id.__init__": [],
  "_nrv/utils/Id/nrv.utils.Id.call_method": [],
  "_nrv/utils/Id/nrv.utils.Id.get_parameters": [],
  "_nrv/utils/Id/nrv.utils.Id.load": [],
  "_nrv/utils/Id/nrv.utils.Id.save": [],
  "_nrv/utils/Id/nrv.utils.Id.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/Id/nrv.utils.Id.set_parameters",
        "ref_id": "id-set-parameters",
        "headings": [
          "Id.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.__init__": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.call_method": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.get_parameters": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.load": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.save": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_function": [],
  "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/MeshCallBack/nrv.utils.MeshCallBack.set_parameters",
        "ref_id": "meshcallback-set-parameters",
        "headings": [
          "MeshCallBack.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/ackley/nrv.utils.ackley.__init__": [],
  "_nrv/utils/ackley/nrv.utils.ackley.call_method": [],
  "_nrv/utils/ackley/nrv.utils.ackley.get_parameters": [],
  "_nrv/utils/ackley/nrv.utils.ackley.load": [],
  "_nrv/utils/ackley/nrv.utils.ackley.save": [],
  "_nrv/utils/ackley/nrv.utils.ackley.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/ackley/nrv.utils.ackley.set_parameters",
        "ref_id": "ackley-set-parameters",
        "headings": [
          "ackley.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/beale/nrv.utils.beale.__init__": [],
  "_nrv/utils/beale/nrv.utils.beale.call_method": [],
  "_nrv/utils/beale/nrv.utils.beale.get_parameters": [],
  "_nrv/utils/beale/nrv.utils.beale.load": [],
  "_nrv/utils/beale/nrv.utils.beale.save": [],
  "_nrv/utils/beale/nrv.utils.beale.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/beale/nrv.utils.beale.set_parameters",
        "ref_id": "beale-set-parameters",
        "headings": [
          "beale.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/booth/nrv.utils.booth.__init__": [],
  "_nrv/utils/booth/nrv.utils.booth.call_method": [],
  "_nrv/utils/booth/nrv.utils.booth.get_parameters": [],
  "_nrv/utils/booth/nrv.utils.booth.load": [],
  "_nrv/utils/booth/nrv.utils.booth.save": [],
  "_nrv/utils/booth/nrv.utils.booth.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/booth/nrv.utils.booth.set_parameters",
        "ref_id": "booth-set-parameters",
        "headings": [
          "booth.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/bukin6/nrv.utils.bukin6.__init__": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.call_method": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.get_parameters": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.load": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.save": [],
  "_nrv/utils/bukin6/nrv.utils.bukin6.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/bukin6/nrv.utils.bukin6.set_parameters",
        "ref_id": "bukin6-set-parameters",
        "headings": [
          "bukin6.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.__init__": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.call_method": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.get_parameters": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.load": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.save": [],
  "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/cost_evaluation/nrv.utils.cost_evaluation.set_parameters",
        "ref_id": "cost-evaluation-set-parameters",
        "headings": [
          "cost_evaluation.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_1D/nrv.utils.function_1D.__init__": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.call_method": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.get_parameters": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.load": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.save": [],
  "_nrv/utils/function_1D/nrv.utils.function_1D.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_1D/nrv.utils.function_1D.set_parameters",
        "ref_id": "function-1d-set-parameters",
        "headings": [
          "function_1D.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_2D/nrv.utils.function_2D.__init__": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.call_method": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.get_parameters": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.load": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.save": [],
  "_nrv/utils/function_2D/nrv.utils.function_2D.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_2D/nrv.utils.function_2D.set_parameters",
        "ref_id": "function-2d-set-parameters",
        "headings": [
          "function_2D.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/function_ND/nrv.utils.function_ND.__init__": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.call_method": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.get_parameters": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.load": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.save": [],
  "_nrv/utils/function_ND/nrv.utils.function_ND.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/function_ND/nrv.utils.function_ND.set_parameters",
        "ref_id": "function-nd-set-parameters",
        "headings": [
          "function_ND.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/gate/nrv.utils.gate.__init__": [],
  "_nrv/utils/gate/nrv.utils.gate.call_method": [],
  "_nrv/utils/gate/nrv.utils.gate.get_parameters": [],
  "_nrv/utils/gate/nrv.utils.gate.load": [],
  "_nrv/utils/gate/nrv.utils.gate.save": [],
  "_nrv/utils/gate/nrv.utils.gate.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/gate/nrv.utils.gate.set_parameters",
        "ref_id": "gate-set-parameters",
        "headings": [
          "gate.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/gaussian/nrv.utils.gaussian.__init__": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.call_method": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.get_parameters": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.load": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.save": [],
  "_nrv/utils/gaussian/nrv.utils.gaussian.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/gaussian/nrv.utils.gaussian.set_parameters",
        "ref_id": "gaussian-set-parameters",
        "headings": [
          "gaussian.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.__init__": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.area": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.bbox": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.bbox_size": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_parameters": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_point_inside": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.get_trace": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.is_inside": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.load": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.perimeter": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.plot": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.plot_bbox": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.rotate": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.save": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.set_parameters",
        "ref_id": "cshape-set-parameters",
        "headings": [
          "CShape.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.translate": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.x": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.y": [],
  "_nrv/utils/geom/CShape/nrv.utils.geom.CShape.z": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.__init__": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.area": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.bbox": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.bbox_size": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.c": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_parameters": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_point_inside": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.get_trace": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.is_inside": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.is_rot": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.load": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.perimeter": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.plot": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.plot_bbox": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.r": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rot_mat": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rot_mat_inverse": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.rotate": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.save": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.set_parameters",
        "ref_id": "circle-set-parameters",
        "headings": [
          "Circle.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.translate": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.x": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.y": [],
  "_nrv/utils/geom/Circle/nrv.utils.geom.Circle.z": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.__init__": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.area": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.bbox": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.bbox_size": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.c": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_parameters": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_point_inside": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.get_trace": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.is_inside": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.is_rot": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.load": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.perimeter": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.plot": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.plot_bbox": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.r": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rot_mat": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rot_mat_inverse": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.rotate": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.save": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.set_parameters",
        "ref_id": "ellipse-set-parameters",
        "headings": [
          "Ellipse.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.translate": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.x": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.y": [],
  "_nrv/utils/geom/Ellipse/nrv.utils.geom.Ellipse.z": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.__init__": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.area": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.bbox": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.bbox_size": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.c": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_parameters": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_point_inside": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.get_trace": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.is_inside": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.load": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.n_gon": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.perimeter": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.plot": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.plot_bbox": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.rotate": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.save": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.set_parameters",
        "ref_id": "polygon-set-parameters",
        "headings": [
          "Polygon.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.shp_poly": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.translate": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.x": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.y": [],
  "_nrv/utils/geom/Polygon/nrv.utils.geom.Polygon.z": [],
  "_nrv/utils/geom/nrv.utils.geom.CShape": [],
  "_nrv/utils/geom/nrv.utils.geom.Circle": [],
  "_nrv/utils/geom/nrv.utils.geom.Ellipse": [],
  "_nrv/utils/geom/nrv.utils.geom.Polygon": [],
  "_nrv/utils/geom/nrv.utils.geom.circle_overlap_checker": [],
  "_nrv/utils/geom/nrv.utils.geom.create_cshape": [],
  "_nrv/utils/geom/nrv.utils.geom.cshape_overlap_checker": [],
  "_nrv/utils/geom/nrv.utils.geom.get_cshape_bbox": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.__init__": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.call_method": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.get_parameters": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.load": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.save": [],
  "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/goldstein_price/nrv.utils.goldstein_price.set_parameters",
        "ref_id": "goldstein-price-set-parameters",
        "headings": [
          "goldstein_price.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv.utils.Id": [],
  "_nrv/utils/nrv.utils.MeshCallBack": [],
  "_nrv/utils/nrv.utils.ackley": [],
  "_nrv/utils/nrv.utils.beale": [],
  "_nrv/utils/nrv.utils.booth": [],
  "_nrv/utils/nrv.utils.bukin6": [],
  "_nrv/utils/nrv.utils.compute_complex_admitance": [],
  "_nrv/utils/nrv.utils.convert": [
    {
      "source": ">>> import nrv\n>>> val_S_m = 0.2 # S/m**2\n>>> nrv.convert(val_S_m, nrv.S/nrv.m**2, nrv.S/nrv.cm**2)\n2e-05\n>>> nrv.convert(val_S_m, \"S/m**2\", \"S/cm**2\")\n2e-05",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.convert",
        "ref_id": "convert",
        "headings": [
          "convert"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.cost_evaluation": [],
  "_nrv/utils/nrv.utils.datfile_2_stim": [],
  "_nrv/utils/nrv.utils.distance_point2line": [],
  "_nrv/utils/nrv.utils.distance_point2point": [],
  "_nrv/utils/nrv.utils.from_nrv_unit": [
    {
      "source": ">>> import nrv\n>>> val_default = 4530 # um\n>>> val_default / nrv.mm\n4.53\n>>> nrv.from_nrv_unit(val_default, nrv.mm)\n4.53\n>>> nrv.from_nrv_unit(val_default, \"mm\")\n4.53",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.from_nrv_unit",
        "ref_id": "from-nrv-unit",
        "headings": [
          "from_nrv_unit"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.function_1D": [],
  "_nrv/utils/nrv.utils.function_2D": [],
  "_nrv/utils/nrv.utils.function_ND": [],
  "_nrv/utils/nrv.utils.gate": [],
  "_nrv/utils/nrv.utils.gaussian": [],
  "_nrv/utils/nrv.utils.geom": [],
  "_nrv/utils/nrv.utils.get_MRG_parameters": [
    {
      "source": ">>> print(nrv.MRG_data)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.get_MRG_parameters",
        "ref_id": "get-mrg-parameters",
        "headings": [
          "get_MRG_parameters"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv.utils.get_equal_timing_copies": [],
  "_nrv/utils/nrv.utils.get_length_from_nodes": [],
  "_nrv/utils/nrv.utils.get_perineurial_thickness": [],
  "_nrv/utils/nrv.utils.goldstein_price": [],
  "_nrv/utils/nrv.utils.in_tol": [],
  "_nrv/utils/nrv.utils.is_stim": [],
  "_nrv/utils/nrv.utils.membrane_capacitance_from_model": [],
  "_nrv/utils/nrv.utils.nearest_greater_idx": [],
  "_nrv/utils/nrv.utils.nearest_idx": [],
  "_nrv/utils/nrv.utils.nrv_function": [],
  "_nrv/utils/nrv.utils.nrv_interp": [],
  "_nrv/utils/nrv.utils.print_default_nrv_unit": [],
  "_nrv/utils/nrv.utils.rastrigin": [],
  "_nrv/utils/nrv.utils.rosenbock": [],
  "_nrv/utils/nrv.utils.sci_round": [],
  "_nrv/utils/nrv.utils.set_common_time_series": [],
  "_nrv/utils/nrv.utils.sphere": [],
  "_nrv/utils/nrv.utils.stimulus": [],
  "_nrv/utils/nrv.utils.to_nrv_unit": [
    {
      "source": ">>> import nrv\n>>> val_MHz = 0.12 # MHz\n>>> val_MHz * nrv.MHz\n120.0\n>>> nrv.to_nrv_unit(val_MHz, nrv.MHz)\n120.0\n>>> nrv.to_nrv_unit(val_MHz, \"MHz\")\n120.0",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.to_nrv_unit",
        "ref_id": "to-nrv-unit",
        "headings": [
          "to_nrv_unit"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ">>> import numpy as np\n>>> vals_s = [[1, 2, 3], [4, 5, 6]]  # s\n>>> nrv.to_nrv_unit(vals_s, nrv.s)  # ms\n[[1000.0, 2000.0, 3000.0], [4000.0, 5000.0, 6000.0]]\n>>> nrv.to_nrv_unit(np.array(vals_s), nrv.s)  # ms\narray([[1000., 2000., 3000.],\n    [4000., 5000., 6000.]])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv.utils.to_nrv_unit",
        "ref_id": "to-nrv-unit",
        "headings": [
          "to_nrv_unit"
        ]
      },
      "doc_lineno": null
    }
  ],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.__init__": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.call_method": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.get_parameters": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.load": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.save": [],
  "_nrv/utils/nrv_function/nrv.utils.nrv_function.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv_function/nrv.utils.nrv_function.set_parameters",
        "ref_id": "nrv-function-set-parameters",
        "headings": [
          "nrv_function.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.__init__": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.call_method": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.get_parameters": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.load": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.save": [],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.set_parameters",
        "ref_id": "nrv-interp-set-parameters",
        "headings": [
          "nrv_interp.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/nrv_interp/nrv.utils.nrv_interp.update_interpolator": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.__init__": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.call_method": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.get_parameters": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.load": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.save": [],
  "_nrv/utils/rastrigin/nrv.utils.rastrigin.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/rastrigin/nrv.utils.rastrigin.set_parameters",
        "ref_id": "rastrigin-set-parameters",
        "headings": [
          "rastrigin.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.__init__": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.call_method": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.get_parameters": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.load": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.save": [],
  "_nrv/utils/rosenbock/nrv.utils.rosenbock.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/rosenbock/nrv.utils.rosenbock.set_parameters",
        "ref_id": "rosenbock-set-parameters",
        "headings": [
          "rosenbock.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/sphere/nrv.utils.sphere.__init__": [],
  "_nrv/utils/sphere/nrv.utils.sphere.call_method": [],
  "_nrv/utils/sphere/nrv.utils.sphere.get_parameters": [],
  "_nrv/utils/sphere/nrv.utils.sphere.load": [],
  "_nrv/utils/sphere/nrv.utils.sphere.save": [],
  "_nrv/utils/sphere/nrv.utils.sphere.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/sphere/nrv.utils.sphere.set_parameters",
        "ref_id": "sphere-set-parameters",
        "headings": [
          "sphere.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/stimulus/nrv.utils.stimulus.__init__": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.append": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.biphasic_pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.concatenate": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.constant": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.get_parameters": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.harmonic_pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.insert_samples": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.integrate": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.len": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.load": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.load_stimulus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.plot": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.pulse": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.ramp": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.ramp_lim": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.save": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.save_stimulus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.set_parameters": [
    {
      "source": ">>> ax = nrv.myelinated()\n>>> print(ax.d, ax.L)\n10, 10000\n>>> ax.set_parameters(d=6, L=1000)\n>>> print(ax.d, ax.L)\n6, 1000",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "_nrv/utils/stimulus/nrv.utils.stimulus.set_parameters",
        "ref_id": "stimulus-set-parameters",
        "headings": [
          "stimulus.set_parameters"
        ]
      },
      "doc_lineno": 14
    }
  ],
  "_nrv/utils/stimulus/nrv.utils.stimulus.sinus": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.snap_time": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.sort": [],
  "_nrv/utils/stimulus/nrv.utils.stimulus.square": [],
  "changelog": [],
  "devcorner": [],
  "examples/00_dummy_example": [],
  "examples/generic/01_propagation_Vmem": [],
  "examples/generic/02_activation_function": [],
  "examples/generic/03_LIFE_activation_function": [],
  "examples/generic/04_AP_particles": [],
  "examples/generic/05_KES_conduction_block": [],
  "examples/generic/06_fascicle_with_contexts": [],
  "examples/generic/07_DC_block": [],
  "examples/generic/08_KES_block_unmyelinated": [],
  "examples/generic/09_Prepulse_waveform": [],
  "examples/generic/10_Slowly_rising": [],
  "examples/generic/11_combining_stimulus": [],
  "examples/generic/12_MRG_structural_parameters": [],
  "examples/generic/13_axon_distributions": [],
  "examples/generic/14_activation_function_cuff": [],
  "examples/generic/15_activation_thresholds": [],
  "examples/generic/16_activation_thresholds_arbitrary": [],
  "examples/generic/18_Action_Potential_Analysis": [],
  "examples/generic/19_build_geometry": [],
  "examples/generic/20_create_population": [],
  "examples/generic/21_place_population": [],
  "examples/generic/22_access_subpopulation": [],
  "examples/generic/23_subpop_iclamp": [],
  "examples/generic/24_mp_nerve_sim": [],
  "examples/generic/25_test_fit_fasc": [],
  "examples/generic/index": [],
  "examples/generic/sg_execution_times": [],
  "examples/index": [],
  "examples/optim/index": [],
  "examples/optim/o01_nerve_optimization": [],
  "examples/optim/o02_stimulus_CM": [],
  "examples/optim/o03_biphasic_stimulus_CM": [],
  "examples/optim/o04_harmonic_stimulus_CM": [],
  "examples/optim/o05_plot_CM": [],
  "examples/optim/o06_mproc_optimization": [],
  "examples/optim/sg_execution_times": [],
  "examples/sg_execution_times": [],
  "index": [],
  "installation": [
    {
      "source": "[COMSOL]\nCOMSOL_STATUS = True\nCOMSOL_SERVER = PATH_TO_COMSOL_SERVER_BINARIES\nCOMSOL_CPU = 1\nCOMSOL_PORT = 2036\nTIME_COMSOL_SERVER_LAUNCH = 10",
      "names": [],
      "example": {
        "document": "installation",
        "ref_id": "comsol-installation",
        "headings": [
          "Installation",
          "Dependencies",
          "COMSOL Installation"
        ]
      },
      "doc_lineno": 62
    },
    {
      "source": "import nrv",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        }
      ],
      "example": {
        "document": "installation",
        "ref_id": "using-pip",
        "headings": [
          "Installation",
          "Installing NRV",
          "Using pip"
        ]
      },
      "doc_lineno": 99
    }
  ],
  "introduction": [],
  "modules": [],
  "scientific": [],
  "sg_execution_times": [],
  "tutorials/1_intracellular_stimulation": [],
  "tutorials/2_propagation_velocity": [],
  "tutorials/3_single_fiber_simulation": [
    {
      "source": "ncore = 4\ncuff_thr_l = nrv.search_threshold_dispatcher(process_threshold,axon_d_l, ncore=ncore)",
      "names": [],
      "example": {
        "document": "tutorials/3_single_fiber_simulation",
        "ref_id": "stimulation-threshold-curves",
        "headings": [
          "Tutorial 3 - Stimulating single fibers with NRV",
          "Stimulation threshold curves"
        ]
      },
      "doc_lineno": 700
    }
  ],
  "tutorials/4_nerve_simulation": [
    {
      "source": "if __name__ == \"__main__\":\n    # your code here",
      "names": [],
      "example": {
        "document": "tutorials/4_nerve_simulation",
        "ref_id": "tutorial-4-stimulating-nerves-with-nrv",
        "headings": [
          "Tutorial 4 - Stimulating Nerves with NRV"
        ]
      },
      "doc_lineno": 32
    }
  ],
  "tutorials/5_first_optimization": [],
  "tutorials/6_play_with_eit": [],
  "tutorials/index": [],
  "tutorials/sg_execution_times": [],
  "usersguide": [
    {
      "source": "if __name__ == \"__main__\":\n    # your code here",
      "names": [],
      "example": {
        "document": "usersguide",
        "ref_id": "user-s-guide",
        "headings": [
          "User\u2019s Guide"
        ]
      },
      "doc_lineno": 32
    },
    {
      "source": "import nrv\ny = 0                       # axon y position, in [um]\nz = 0                       # axon z position, in [um]\nd = 1                       # axon diameter, in [um]\nL = 5000                    # axon length, along x axis, in [um]\naxon1 = nrv.unmyelinated(y,z,d,L)\n\nax_dict = axon1.save()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "filename = \"ax_file.json\"\nax_dict = axon1.save(save=True, fname=filename)",
      "names": [],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 80
    },
    {
      "source": "del axon1\n\naxon2 = nrv.unmyelinated()\naxon2.load(ax_dict)\nprint(axon2.L == L)\n\ndel axon2\naxon3 = nrv.unmyelinated()\naxon3.load(filename)\nprint(axon3.L == L)",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon2",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon3",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-saving",
        "headings": [
          "User\u2019s Guide",
          "Note on object saving"
        ]
      },
      "doc_lineno": 91
    },
    {
      "source": "axon1 = nrv.unmyelinated(y,z,d,L)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "axon1 = nrv.unmyelinated(**ax_dict)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 120
    },
    {
      "source": "axon1 = nrv.unmyelinated()\naxon1.load(filename)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "unmyelinated"
          ],
          "code_str": "nrv.unmyelinated",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        },
        {
          "import_components": [
            "nrv",
            "unmyelinated",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod._unmyelinated.unmyelinated"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 128
    },
    {
      "source": "axon1 = nrv.load_any(ax_dict)\nassert axon1.L == L\ndel axon1\n\naxon1 = nrv.load_any(filename)\nassert axon1.L == L\ndel axon1",
      "names": [
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "axon1",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        }
      ],
      "example": {
        "document": "usersguide",
        "ref_id": "note-on-object-instantiation",
        "headings": [
          "User\u2019s Guide",
          "Note on object instantiation"
        ]
      },
      "doc_lineno": 137
    }
  ],
  "usersguide/axon_simulations": [
    {
      "source": "def my_update_function(axon, amp, pw, some_args):\n    my_new_stim = nrv.stimulus()\n    my_new_stim.any_stim(amp)\n    axon.change_stimulus_from_electrode(elec_id, my_new_stim)\n\nmy_arg_stim = {'pw': 100, 'other_param': value}\n\nmy_threshold = nrv.axon_AP_threshold(\n    axon=my_axon,\n    amp_max=my_max_amp,\n    update_func=my_update_function,\n    args_update=my_arg_stim\n)",
      "names": [],
      "example": {
        "document": "usersguide/axon_simulations",
        "ref_id": "search-threshold-functions",
        "headings": [
          "Axon Simulations",
          "Search Threshold Functions"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "def my_process_threshold(my_param):\n    my_arg['my_param'] = my_param\n    return nrv.axon_AP_threshold(\n        axon=my_axon,\n        amp_max=my_amp_max,\n        update_func=my_update_function,\n        args_update=my_arg,\n        verbose=False\n    )\n\nif __name__ == '__main__':\n    my_thresholds = nrv.threshold_search_dispatcher(\n        my_process_threshold,\n        my_param_list\n    )",
      "names": [],
      "example": {
        "document": "usersguide/axon_simulations",
        "ref_id": "search-threshold-dispatching-functions",
        "headings": [
          "Axon Simulations",
          "Search Threshold Dispatching Functions"
        ]
      },
      "doc_lineno": 54
    }
  ],
  "usersguide/eit": [
    {
      "source": "import nrv\nimport nrv.eit as eit\n\n# Define nerve and fascicles\nnerve = nrv.nerve(length=15000, diameter=105, Outer_D=5)\nfascicle_1 = nrv.fascicle(diameter=(40, 60), ID=1)\nfascicle_1.fill(n_ax=30, percent_unmyel=0.7, delta=0.5, delta_trace=3)\nnerve.add_fascicle(fascicle_1, y=25, z=0)\nfascicle_2 = nrv.fascicle(diameter=30, ID=2)\nfascicle_2.fill(n_ax=10, percent_unmyel=0.7, delta=0.5, delta_trace=3)\nnerve.add_fascicle(fascicle_2, y=-20, z=-10)\n\n# Set EIT parameters\nparameters = {\n    \"n_elec\": 16,\n    \"l_elec\": 1000,\n    \"i_drive\": 30,\n    \"x_rec\": 3000,\n    \"sigma_method\": \"mean\",\n    \"inj_protocol_type\": \"simple\",\n    \"use_gnd_elec\": True,\n    \"n_proc_global\": 3,\n    \"dt_fem\": [(2, .75), (7, .4), (-1, .75)],\n}\n\n# Instantiate and run EIT problem\neit_instance = eit.EIT2DProblem(nerve.save(save=False), res_dname=\"./6/\", label=\"6\", **parameters)\nnrn_res = eit_instance.simulate_nerve(t_start=0, sim_param={\"t_sim\": 10}, fasc_list=[1])\neit_instance._setup_problem()\neit_instance.build_mesh()\nfem_res = eit_instance.simulate_eit()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "eit"
          ],
          "code_str": "nrv.eit",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "nrv.eit"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fascicle_2",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem"
          ],
          "code_str": "eit.EIT2DProblem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.eit._eit2d.EIT2DProblem"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem",
            "()"
          ],
          "code_str": "eit_instance",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "nrv.eit._eit2d.EIT2DProblem"
        },
        {
          "import_components": [
            "nrv",
            "eit",
            "EIT2DProblem",
            "()",
            "simulate_eit",
            "()"
          ],
          "code_str": "fem_res",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "nrv.eit.results._eit_forward_results.eit_forward_results"
        }
      ],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "typical-workflow",
        "headings": [
          "Electrical Impedance Tomography",
          "Forward Problem",
          "Typical workflow"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 6))\nnrn_res.plot_recruited_fibers(ax)\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "handle-the-results",
        "headings": [
          "Electrical Impedance Tomography",
          "Forward Problem",
          "Handle the results"
        ]
      },
      "doc_lineno": 100
    },
    {
      "source": "inv_pb = eit.pyeit_inverse(data=fem_res)\nv0 = inv_pb.fromat_data(i_t=0)\nv1 = inv_pb.fromat_data(i_t=i_tmax)\nds = inv_pb.solve(i_t=i_tmax)[0]\n\nfig, ax = plt.subplots()\ninv_pb.plot(ax=ax, i_t=i_tmax)\nplt.show()",
      "names": [],
      "example": {
        "document": "usersguide/eit",
        "ref_id": "image-reconstruction",
        "headings": [
          "Electrical Impedance Tomography",
          "Inverse Problem",
          "Image reconstruction"
        ]
      },
      "doc_lineno": 125
    }
  ],
  "usersguide/electrodes": [],
  "usersguide/fem": [
    {
      "source": "my_FEM.reshape_fascicle(cshape_1, ID=0)  # Create fascicle ID 0\nmy_FEM.reshape_fascicle(cshape_2, ID=1)  # Create fascicle ID 1\nmy_FEM.reshape_fascicle(cshape_3, ID=0)  # Modify fascicle ID 0",
      "names": [],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "geometry-manipulation",
        "headings": [
          "FEM Simulations",
          "Geometry Manipulation"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "import nrv\nmy_axon = nrv.myelinated(...)                    # Create an axon\nmy_FEM = nrv.FEM_stimulation()                   # Create FEM model\nmy_FEM.reshape_nerve(nerve_d, nerve_l)           # Set nerve geometry\nmy_FEM.reshape_outerBox(outer_d)                 # Set simulation box size\nmy_FEM.reshape_fascicle(cshape_1, ID=0)          # Add fascicle 0\nmy_FEM.reshape_fascicle(cshape_2, ID=1)          # Add fascicle 1\nmy_FEM.add_electrode(my_electrode, my_stimulus)  # Add electrode and stimulus\nmy_axon.attach_extracellular_stimulation(my_FEM) # Attach FEM model to axon\nmy_result = my_axon(t_sim)                       # Run simulation",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "myelinated"
          ],
          "code_str": "nrv.myelinated",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "my_axon",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "myelinated",
            "()"
          ],
          "code_str": "my_axon",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._myelinated.myelinated"
        }
      ],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "examples",
        "headings": [
          "FEM Simulations",
          "Examples"
        ]
      },
      "doc_lineno": 70
    },
    {
      "source": "import nrv\nmy_nerve = nrv.nerve(...)                         # Create a Nerve\nmy_FEM = nrv.FEM_stimulation()                    # Create FEM model\nmy_FEM.add_electrode(my_electrode, my_stimulus)   # Add electrode and stimulus\nmy_nerve.attach_extracellular_stimulation(my_FEM) # Attach FEM model to nerve\nmy_result = my_nerve(t_sim)                       # Run simulation",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "my_nerve",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation"
          ],
          "code_str": "nrv.FEM_stimulation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "FEM_stimulation",
            "()"
          ],
          "code_str": "my_FEM",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.fmod._extracellular.FEM_stimulation"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "my_nerve",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        }
      ],
      "example": {
        "document": "usersguide/fem",
        "ref_id": "example-with-a-nerve",
        "headings": [
          "FEM Simulations",
          "Example with a Nerve"
        ]
      },
      "doc_lineno": 93
    }
  ],
  "usersguide/geometry": [
    {
      "source": "from nrv.utils.geom import CShape\n\nclass MyShape(CShape):\n    def get_trace(self):\n        # Return list of (y, z) points on the shape boundary\n        pass\n\n    def is_inside(self, point: tuple, delta: float = 0, for_all: bool = True):\n        # Check if the point or list of points is inside the shape\n        pass\n\n    def get_point_inside(self, n_pts: int = 1, delta: float = 0):\n        # Return an np.ndarray of random points inside the shape\n        pass",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "nrv.utils.geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape"
          ],
          "code_str": "CShape",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "CShape"
          ],
          "code_str": "CShape",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils.geom._cshape.CShape"
        },
        {
          "import_components": [
            "tuple"
          ],
          "code_str": "tuple",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "tuple"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "bool"
          ],
          "code_str": "bool",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "bool"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "geometry-base-class-cshape",
        "headings": [
          "Create (Fascicle) Geometry",
          "Geometry Base Class: CShape"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "from nrv.utils.geom import Circle\n\n# Create a circle with center (0, 0) and radius 50\ncircle = Circle(center=(0, 0), radius=50)\nprint(circle.is_inside((5, 5)))\n# out: True\nprint(circle.is_inside((100, 40)))\n# out: False",
      "names": [
        {
          "import_components": [
            "nrv",
            "utils",
            "geom"
          ],
          "code_str": "nrv.utils.geom",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "nrv.utils.geom"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle"
          ],
          "code_str": "Circle",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle"
          ],
          "code_str": "Circle",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "nrv",
            "utils",
            "geom",
            "Circle",
            "()"
          ],
          "code_str": "circle",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.utils.geom._circle.Circle"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "builtin-shapes",
        "headings": [
          "Create (Fascicle) Geometry",
          "Builtin Shapes",
          "set_axons_parameters parameters"
        ]
      },
      "doc_lineno": 98
    },
    {
      "source": "import nrv\n\n# Create a circle with center (0, 0) and radius 50\ncircle = nrv.create_schape(center=(0, 0), radius=50)\nprint(circle.is_inside((5, 5)))\n# out: True\nprint(circle.is_inside((100, 40)))\n# out: False",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "usersguide/geometry",
        "ref_id": "builtin-shapes",
        "headings": [
          "Create (Fascicle) Geometry",
          "Builtin Shapes",
          "set_axons_parameters parameters"
        ]
      },
      "doc_lineno": 110
    }
  ],
  "usersguide/materials": [],
  "usersguide/optimization": [
    {
      "source": "import nrv\nmy_prob = nrv.Problem()\nmy_prob.costfunction = my_cost\nmy_prob.optimizer = my_optimizer",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "Problem"
          ],
          "code_str": "nrv.Problem",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Optimization",
          "Optimization Problem"
        ]
      },
      "doc_lineno": 34
    },
    {
      "source": "res_optim = my_prob(**kwargs)",
      "names": [
        {
          "import_components": [
            "nrv",
            "Problem",
            "()"
          ],
          "code_str": "my_prob",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._Problems.Problem"
        },
        {
          "import_components": [
            "nrv",
            "Problem",
            "()",
            "()"
          ],
          "code_str": "res_optim",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim.optim_utils._OptimResults.optim_results"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimization-problem",
        "headings": [
          "Optimization",
          "Optimization Problem"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "my_cost = nrv.cost_function(\n    static_context=my_static_context,\n    context_modifier=my_context_modifier,\n    cost_evaluation=my_cost_evaluation,\n    kwargs_S=kwarg_sim,\n    kwargs_CM=kwarg_cm,\n    kwargs_CE=kwarg_ce\n)",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-function",
        "headings": [
          "Optimization",
          "Cost Function"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "my_cost = nrv.cost_function()\nmy_cost.set_static_context(my_static_context, **kwarg_sim)\nmy_cost.set_context_modifier(my_context_modifier, **kwarg_cm)\nmy_cost.set_cost_evaluation(my_cost_evaluation, **kwarg_ce)",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_function"
          ],
          "code_str": "nrv.cost_function",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        },
        {
          "import_components": [
            "nrv",
            "cost_function",
            "()"
          ],
          "code_str": "my_cost",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.optim._CostFunctions.cost_function"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-function",
        "headings": [
          "Optimization",
          "Cost Function"
        ]
      },
      "doc_lineno": 79
    },
    {
      "source": "def homemade_context_modifier(X: np.ndarray, static_context: NRV_simulable, **kwargs) -> NRV_simulable:\n    local_sim = nrv.load_any(static_context, ...)\n    # Modify local_sim based on X\n    return local_sim",
      "names": [
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "local_sim",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        },
        {
          "import_components": [
            "nrv",
            "load_any",
            "()"
          ],
          "code_str": "local_sim",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.backend._NRV_Class.NRV_class"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "context-modifier",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Built-in Context Modifiers"
        ]
      },
      "doc_lineno": 117
    },
    {
      "source": "def homemade_cost_evaluation(results: sim_results, **kwargs) -> float:\n    # Analyze `results` and return scalar cost\n    return cost",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 160
    },
    {
      "source": "class homemade_cost_evaluation(nrv.cost_evaluation):\n    def call_method(self, results: sim_results, **kwargs) -> float:\n        return cost",
      "names": [
        {
          "import_components": [
            "nrv",
            "cost_evaluation"
          ],
          "code_str": "nrv.cost_evaluation",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._nrv_function.cost_evaluation"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 168
    },
    {
      "source": "def __call__(self, results: sim_results, **kwargs) -> float:\n    return cost",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "cost-evaluation",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Built-in Cost Evaluations"
        ]
      },
      "doc_lineno": 176
    },
    {
      "source": "my_cost = nrv.cost_function(\n    static_context=my_static_context,\n    ...,\n    filters=my_filter\n)",
      "names": [],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "filter-optional",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Filter (optional)"
        ]
      },
      "doc_lineno": 187
    },
    {
      "source": "res = my_optimizer.minimize(func_to_minimize, ...)\n# or simply\nres = my_optimizer(func_to_minimize, ...)",
      "names": [],
      "example": {
        "document": "usersguide/optimization",
        "ref_id": "optimizer",
        "headings": [
          "Optimization",
          "Context Modifier",
          "Cost Evaluation",
          "Optimizer"
        ]
      },
      "doc_lineno": 206
    }
  ],
  "usersguide/parallel": [],
  "usersguide/populations": [
    {
      "source": "import nrv\npop = nrv.axon_population()\npop.create_population_from_data((ax_type, ax_diameters))",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "axon_population"
          ],
          "code_str": "nrv.axon_population",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        },
        {
          "import_components": [
            "nrv",
            "axon_population",
            "()"
          ],
          "code_str": "pop",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "nrv.nmod._axon_population.axon_population"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 97
    },
    {
      "source": "import numpy as np\ndata = np.vstack((ax_type, ax_diameters))\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "vstack"
          ],
          "code_str": "np.vstack",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.vstack"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 104
    },
    {
      "source": "data = {\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":0}\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 112
    },
    {
      "source": "from pandas import DataFrame\ndata =  DataFrame({\"types\":ax_type, \"diameters\":ax_diameters, \"other_key\":np.random.rand(len(ax_type))})\npop = axon_population()\npop.create_population_from_data(data)",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "DataFrame",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pandas.DataFrame"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "DataFrame",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.DataFrame"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "generate-a-population-from-data",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Generate a population from data"
        ]
      },
      "doc_lineno": 119
    },
    {
      "source": "pop.create_population_from_stat(n_ax=100)",
      "names": [],
      "example": {
        "document": "usersguide/populations",
        "ref_id": "create-ex-novo-populations-recommended-method",
        "headings": [
          "Axons populations",
          "columns of axon_population.axon_pop DataFrame",
          "Population generation",
          "Create ex-novo populations (recommended method)"
        ]
      },
      "doc_lineno": 133
    }
  ],
  "usersguide/postproc": [
    {
      "source": "val = my_result.my_key",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nrv-result-objects",
        "headings": [
          "Post-processing",
          "NRV Result Objects"
        ]
      },
      "doc_lineno": 18
    },
    {
      "source": "val = my_result['my_key']",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nrv-result-objects",
        "headings": [
          "Post-processing",
          "NRV Result Objects"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "my_axon.record_V_mem = True         # save V_mem in the result object\nmy_axon.record_I_mem = True         # save I_mem in the result object\nmy_axon.record_g_mem = True         # save g_mem in the result object\nmy_axon.record_g_ions = True        # save all g_xx in the result object\nmy_axon.record_I_ions = True        # save all I_xx in the result object\nmy_axon.record_particles = True     # save all particles in the result object",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "axon-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "axon_results key/member"
        ]
      },
      "doc_lineno": 275
    },
    {
      "source": "my_axon_result = my_fascicle_result.axonx\nmy_axon_result = my_fascicle_result['axonx']  # equivalent",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "fascicle-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "Fascicle results"
        ]
      },
      "doc_lineno": 310
    },
    {
      "source": "my_fascicle_result = my_nerve_result.fasciclex\nmy_fascicle_result = my_nerve_result['fasciclex']  # equivalent",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "nerve-results",
        "headings": [
          "Post-processing",
          "Axon results",
          "Nerve results"
        ]
      },
      "doc_lineno": 325
    },
    {
      "source": "my_fasc.postproc_script = default_PP",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "built-in-functions-formerly-scripts",
        "headings": [
          "Post-processing",
          "Axon results",
          "Built-in functions (formerly scripts)"
        ]
      },
      "doc_lineno": 374
    },
    {
      "source": "my_fasc.postproc_script = \"default_PP\"",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "built-in-functions-formerly-scripts",
        "headings": [
          "Post-processing",
          "Axon results",
          "Built-in functions (formerly scripts)"
        ]
      },
      "doc_lineno": 380
    },
    {
      "source": "def my_custom_postproc(results: nrv.axon_results, **kwargs) -> nrv.axon_results:\n    # modify results in-place or return modified copy\n    return results",
      "names": [],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "custom-post-processing-functions",
        "headings": [
          "Post-processing",
          "Axon results",
          "Custom post-processing functions"
        ]
      },
      "doc_lineno": 389
    },
    {
      "source": "import nrv\nimport numpy as np\n\ndef test_pp(results: nrv.axon_results, num=0):\n    results[\"comment\"] = \"Custom PP accessed\"\n    results[\"num\"] = num\n    results.remove_key(keys_to_keep={\"ID\", \"comment\", \"num\"})\n    return results\n\nfasc = nrv.fascicle()\nfasc.define_length(10000)\nfasc.axons_diameter = np.array([5.7])\nfasc.axons_type = np.array([1])\nfasc.axons_y = np.array([0])\nfasc.axons_z = np.array([0])\nfasc.postproc_script = test_pp\nfasc.postproc_kwargs = {\"num\": 1}\n\nresults = fasc.simulate()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "axon_results"
          ],
          "code_str": "nrv.axon_results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "nrv.nmod.results._fascicles_results.fascicle_results"
        }
      ],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "examples",
        "headings": [
          "Post-processing",
          "Axon results",
          "Examples"
        ]
      },
      "doc_lineno": 402
    },
    {
      "source": "import nrv\nimport numpy as np\n\ndef test_pp(results: nrv.axon_results, num=0):\n    results[\"comment\"] = \"Custom PP accessed\"\n    results[\"num\"] = num\n    results.remove_key(keys_to_keep={\"ID\", \"comment\", \"num\"})\n    return results\n\nfasc = nrv.fascicle()\nfasc.axons_diameter = np.array([5.7, 1.0])\nfasc.axons_type = np.array([1, 0])\nfasc.axons_y = np.array([0, 10])\nfasc.axons_z = np.array([0, 0])\nfasc.define_circular_contour(D=50)\n\nnerve = nrv.nerve(Length=10000)\nnerve.add_fascicle(fasc, ID=1)\nnerve.postproc_script = test_pp\nnerve.postproc_kwargs = {\"num\": 2}\n\nresults = nerve.simulate()",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "nrv",
            "axon_results"
          ],
          "code_str": "nrv.axon_results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "axon_results",
            "()"
          ],
          "code_str": "results",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "nrv.nmod.results._axons_results.axon_results"
        },
        {
          "import_components": [
            "nrv",
            "fascicle"
          ],
          "code_str": "nrv.fascicle",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "nrv",
            "nerve"
          ],
          "code_str": "nrv.nerve",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()"
          ],
          "code_str": "nerve",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "nrv.nmod._nerve.nerve"
        },
        {
          "import_components": [
            "nrv",
            "fascicle",
            "()"
          ],
          "code_str": "fasc",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "nrv.nmod._fascicles.fascicle"
        },
        {
          "import_components": [
            "nrv",
            "nerve",
            "()",
            "simulate",
            "()"
          ],
          "code_str": "results",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "nrv.nmod.results._nerve_results.nerve_results"
        }
      ],
      "example": {
        "document": "usersguide/postproc",
        "ref_id": "examples",
        "headings": [
          "Post-processing",
          "Axon results",
          "Examples"
        ]
      },
      "doc_lineno": 426
    }
  ],
  "usersguide/simulables": [
    {
      "source": "my_simulable.simulate(*myargs)",
      "names": [],
      "example": {
        "document": "usersguide/simulables",
        "ref_id": "simulable-objects",
        "headings": [
          "Simulable objects"
        ]
      },
      "doc_lineno": 17
    },
    {
      "source": "my_simulable(*myargs)",
      "names": [],
      "example": {
        "document": "usersguide/simulables",
        "ref_id": "simulable-objects",
        "headings": [
          "Simulable objects"
        ]
      },
      "doc_lineno": 23
    }
  ],
  "usersguide/stimuli": [
    {
      "source": "import nrv\n\nstim1 = nrv.stimulus()\nprint(len(stim1.s))\nprint(len(stim1.t))",
      "names": [
        {
          "import_components": [
            "nrv"
          ],
          "code_str": "nrv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "nrv"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "stim1",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "len"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "stimuli",
        "headings": [
          "Stimuli"
        ]
      },
      "doc_lineno": 24
    },
    {
      "source": "import matplotlib.pyplot as plt\n\nt_start = 1\nV_cat = 1\nt_cat = 60e-3   # recall, NRV's units are in ms\nt_dead = 40e-3\nca_ratio = 5\n\nbiphasic_stim = nrv.stimulus()\nbiphasic_stim.biphasic_pulse(t_start, V_cat,t_cat, V_cat/ca_ratio, t_dead)\n\nf_stim = 1      # recall, NRV's units are in ms\nduration = 10\namp = 0.5\n\nsinus_stim = nrv.stimulus()\nsinus_stim.sinus(t_start, duration, amp, f_stim)\n\n\n#print(dir(biphasic_stim))\nfig, axs = plt.subplots(1, 2, layout='constrained', figsize=(10, 4))\nbiphasic_stim.plot(axs[0])\naxs[0].set_title('Biphasic stimulus')\nsinus_stim.plot(axs[1])\naxs[1].set_title('Biphasic stimulus')",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "biphasic_stim",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus",
            "()"
          ],
          "code_str": "sinus_stim",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "stimuli-generators",
        "headings": [
          "Stimuli",
          "Stimuli Generators"
        ]
      },
      "doc_lineno": 182
    },
    {
      "source": "stim1, stim2 = nrv.stimulus(),nrv.stimulus()\n\nf_stim = 1\nt_start = 1\nduration = 99\namp = 0.5\n\nt_ramp_stop = 90\namp_start = 0\namp_max = 1\n\nstim1.sinus(t_start, duration, amp, f_stim)\nstim2.ramp_lim(t_start, t_ramp_stop, amp_start, amp_max, duration, dt=1)\n\nstim3 = stim1*stim2\nfig, axs = plt.subplots(1, 2, layout='constrained', figsize=(10, 4))\n\nstim1.plot(axs[0])\nstim2.plot(axs[0])\naxs[0].set_title('arguments of the product')\nstim3.plot(axs[1])\naxs[1].set_title('product result')",
      "names": [
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "nrv",
            "stimulus"
          ],
          "code_str": "nrv.stimulus",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "nrv.utils._stimulus.stimulus"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "usersguide/stimuli",
        "ref_id": "mathematical-operations-with-stimuli",
        "headings": [
          "Stimuli",
          "Mathematical operations with stimuli"
        ]
      },
      "doc_lineno": 245
    }
  ]
}