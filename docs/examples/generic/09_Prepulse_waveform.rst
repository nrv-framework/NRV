
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generic/09_Prepulse_waveform.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generic_09_Prepulse_waveform.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generic_09_Prepulse_waveform.py:


Prepulse waveform stimulation
=============================

Subthreshold pre-pulses change the initial state of an axon membrane and thus can be used to control its excitability. Depolarizing pre-pulse generate a transient decrease in excitability (i.e. virtually increases the fiber's threshold). This script illustrates this principle

.. GENERATED FROM PYTHON SOURCE LINES 7-68



.. image-sg:: /examples/generic/images/sphx_glr_09_Prepulse_waveform_001.png
   :alt: 09 Prepulse waveform
   :srcset: /examples/generic/images/sphx_glr_09_Prepulse_waveform_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    import nrv
    import numpy as np
    import matplotlib.pyplot as plt

    model = 'MRG'
    diam = 10
    y = 0
    z = 0
    n_node = 20

    t_sim = 20
    t_start = 1
    prep_d = 5
    prep_a = 15
    coeffs = [0, 1]
    labels = ['no prepulse', 'width prepulse']
    Vm = []
    interp_delay = 0
    pw = 100e-3
    amp = 48

    if __name__ == '__main__':
        nseg = 1
        material = nrv.load_material('endoneurium_bhadra')
        L=nrv.get_length_from_nodes(diam,n_node)


        for coeff in coeffs:
            prepulse = nrv.stimulus()
            prepulse.biphasic_pulse(t_start,prep_a,prep_d,0,0)
            pulse = nrv.stimulus()
            pulse.biphasic_pulse(t_start+interp_delay+prep_d,amp,pw,0,0)
            stim_1 = coeff*prepulse + pulse

            axon = nrv.myelinated(y,z,diam,L,rec='nodes',dt=0.005,Nseg_per_sec=nseg,model=model) 

            y_elec = 500
            z_elec = 0
            x_elec = axon.x_nodes[np.int32(n_node/2)]	# electrode y position, in [um]
            E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)

            stim_extra = nrv.stimulation(material)
            stim_extra.add_electrode(E1,stim_1)
            axon.attach_extracellular_stimulation(stim_extra)

            # simulate axon activity
            results = axon.simulate(t_sim=t_sim)
            Vm.append(results['V_mem'][10])
            del axon

        plt.figure(figsize=(8,5))
        for i in range(len(Vm)):
            plt.plot(results['t'], Vm[i],label=labels[i])
        plt.ylabel(r"$V_m (mV)$")
        plt.xlabel("Time (ms)")
        plt.legend()

        plt.xlim(np.min(results['t']),np.max(results['t']))
        plt.ylim(-85,27)
        plt.tight_layout()
        plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.724 seconds)


.. _sphx_glr_download_examples_generic_09_Prepulse_waveform.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 09_Prepulse_waveform.ipynb <09_Prepulse_waveform.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 09_Prepulse_waveform.py <09_Prepulse_waveform.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 09_Prepulse_waveform.zip <09_Prepulse_waveform.zip>`
