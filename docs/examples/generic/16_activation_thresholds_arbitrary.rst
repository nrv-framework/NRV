
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generic/16_activation_thresholds_arbitrary.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generic_16_activation_thresholds_arbitrary.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generic_16_activation_thresholds_arbitrary.py:


Activation thresholds with arbitrary settings
=============================================

This script shows how to use the ``axon_AP_threshold()`` function to evaluate axon thresholds with various stimulation waveforms.

.. GENERATED FROM PYTHON SOURCE LINES 7-69



.. image-sg:: /examples/generic/images/sphx_glr_16_activation_thresholds_arbitrary_001.png
   :alt: 16 activation thresholds arbitrary
   :srcset: /examples/generic/images/sphx_glr_16_activation_thresholds_arbitrary_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    





|

.. code-block:: Python

    import nrv
    import matplotlib.pyplot as plt

    #Update function for cathodic (monopolar) pulse
    def cath_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0):
        stim_1 = nrv.stimulus()
        stim_1.pulse(start=start_p, duration=pw, value = -amp)
        axon.change_stimulus_from_electrode(elec_id, stim_1)

    #Update function for biphasic pulse
    def biphasic_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0,t_inter=50e-3):
        stim_1 = nrv.stimulus()
        stim_1.biphasic_pulse(start = start_p, s_anod=amp,t_stim=pw,s_cathod=amp,t_inter=t_inter)
        axon.change_stimulus_from_electrode(elec_id, stim_1)

    #Update function for cathodic sine pulse
    def cath_sine_pulse_update(axon,amp, pw, start_p = 1, elec_id = 0):
        stim_1 = nrv.stimulus()
        freq = 1/(2*pw)
        stim_1.sinus(start_p, pw, amp, freq, offset=0, phase=180, dt=0)
        axon.change_stimulus_from_electrode(elec_id, stim_1)

    if __name__ == '__main__':
        # axon def
        y = 0       # axon y position, in [um]
        z = 0       # axon z position, in [um]
        d = 10      # axon diameter, in [um]
        L = 50_000  # axon length, along x axis, in [um]
        axon1 = nrv.myelinated(y,z,d,L,T=37,rec='nodes',dt=0.001)

        #electrode
        n_node = len(axon1.x_nodes)
        x_elec = axon1.x_nodes[n_node//2]
        y_elec = 1000
        z_elec = 0
        PSA = nrv.point_source_electrode(x_elec,y_elec,z_elec)
        stim1 = nrv.stimulus() #dummy stim

        ### define extra cellular stimulation
        extra_stim = nrv.stimulation('endoneurium_bhadra')
        extra_stim.add_electrode(PSA, stim1)
        axon1.attach_extracellular_stimulation(extra_stim)

        #parameters for the waveforms
        arg_stim = {'pw':50e-3, 'elec_id':0, 'start_p':1}
        max_amp = 300 #maximum search boundary

        threshold_pulse = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = cath_pulse_update, args_update=arg_stim)
        threshold_biphasic = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = biphasic_pulse_update, args_update=arg_stim)
        threshold_sine = nrv.axon_AP_threshold(axon = axon1,amp_max = max_amp, update_func = cath_sine_pulse_update, args_update=arg_stim)

        plt.plot([0.25], [threshold_pulse], "s", markersize=10, label="pulse", color="c")
        plt.plot([1.25], [threshold_biphasic], "s", markersize=10, label="biphasic", color="orange")
        plt.plot([2.25], [threshold_sine], "s", markersize=10, label="sine", color="limegreen")
        plt.fill_between([0, 0.5], [threshold_pulse, threshold_pulse], 0, color="c")
        plt.fill_between([1,1.5], [threshold_biphasic, threshold_biphasic], 0, color="orange")
        plt.fill_between([2, 2.5], [threshold_sine, threshold_sine], 0, color="limegreen")
        plt.xticks([])
        plt.xlabel("stimulus type")
        plt.ylabel("amplitude $\mu m$")
        plt.legend()
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 27.400 seconds)


.. _sphx_glr_download_examples_generic_16_activation_thresholds_arbitrary.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 16_activation_thresholds_arbitrary.ipynb <16_activation_thresholds_arbitrary.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 16_activation_thresholds_arbitrary.py <16_activation_thresholds_arbitrary.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 16_activation_thresholds_arbitrary.zip <16_activation_thresholds_arbitrary.zip>`
