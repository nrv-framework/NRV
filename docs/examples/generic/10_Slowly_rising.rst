
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generic/10_Slowly_rising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generic_10_Slowly_rising.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generic_10_Slowly_rising.py:


Slowly Rising Pulse Stimulation
===============================

A slowly rising pulse can help in triggering small diameter axon first. This script illustrates this phenomenon, with a constant stimulus, small diameter trigger a spike while larger axons are not depolarized sufficiently. 

.. GENERATED FROM PYTHON SOURCE LINES 7-76



.. image-sg:: /examples/generic/images/sphx_glr_10_Slowly_rising_001.png
   :alt: 10 Slowly rising
   :srcset: /examples/generic/images/sphx_glr_10_Slowly_rising_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    import nrv
    import numpy as np
    import matplotlib.pyplot as plt

    model = 'MRG'
    diams = [4, 7,  10, 13, 16]
    Vm = []
    y = 0
    z = 0
    n_node = 20

    t_sim = 20
    t_start = 1
    prep_d = 5
    prep_a = 35
    interp_delay = 0
    pw = 100e-3
    amp = 48

    if __name__ == '__main__':
        prepulse = nrv.stimulus()

        slope = prep_a/prep_d
        prepulse.ramp(slope, t_start, prep_d+t_start, 0.05)
        pulse = nrv.stimulus()
        pulse.biphasic_pulse(t_start+prep_d,amp,pw,0,0)
        stim_1 = -prepulse+pulse
        stim_1.s[-2] = -amp
        stim_1.s[-1] = 0

        nseg = 1
        material = nrv.load_material('endoneurium_bhadra')


        for diam in diams:
            L=nrv.get_length_from_nodes(diam,n_node)
            axon = nrv.myelinated(y,z,diam,L,rec='nodes',dt=0.005,Nseg_per_sec=nseg,model=model) 

            y_elec = 500
            z_elec = 0
            x_elec = axon.x_nodes[np.int32(n_node/2)]	# electrode y position, in [um]
            E1 = nrv.point_source_electrode(x_elec,y_elec,z_elec)

            #stim_1 = pulse
            stim_extra = nrv.stimulation(material)
            stim_extra.add_electrode(E1,stim_1)
            axon.attach_extracellular_stimulation(stim_extra)

            #axon1.insert_I_Clamp(t_position, t_start, t_duration, t_amplitude)       

            # extra-cellular stimulation

            # simulate axon activity
            results = axon.simulate(t_sim=t_sim)#,footprints = footprints)
            Vm.append(results['V_mem'][10])


        plt.figure(figsize=(8,5))
        for i in range(len(diams)):
            plt.plot(results['t'],Vm[i], label=f"{diams[i]}Âµm")
        plt.ylabel(r"$V_m (mV)$")
        plt.xlabel("Time (ms)")
        plt.legend()

        plt.xlim(np.min(results['t']),np.max(results['t']))
        plt.ylim(-85,40)
        plt.tight_layout()
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.861 seconds)


.. _sphx_glr_download_examples_generic_10_Slowly_rising.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 10_Slowly_rising.ipynb <10_Slowly_rising.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 10_Slowly_rising.py <10_Slowly_rising.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 10_Slowly_rising.zip <10_Slowly_rising.zip>`
