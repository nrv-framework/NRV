
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generic/24_mp_nerve_sim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generic_24_mp_nerve_sim.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generic_24_mp_nerve_sim.py:


Parallel Nerve Simulation
=========================

Practical example illustrating how a nerve simulation can be distributed across multiple cores.

.. seealso::
    :doc:`Users' guide <../../usersguide/parallel>` --- Parallel Computation in NRV.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: Python

    import nrv
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-16

Step 1: Define Nerve Geometry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 16-72

.. code-block:: Python


    def create_nerve():
        ## parameters
        # nerve parameters
        outer_d = 5         # in mm
        nerve_d = 500       # in um
        nerve_l = 5000      # in um
        # first fascicle
        fasc1_d = 200       # in um
        fasc1_y = -100      # in um
        fasc1_z = 0         # in um
        # second fascicle
        fasc2_d = 100       # in um
        fasc2_y = 100       # in um
        fasc2_z = 0         # in um
        # stimulus
        t_start = 0.1       #start of the pulse, in ms
        t_pulse = 0.1       #duration of the pulse, in ms
        amp_pulse = 60      #amplitude of the pulse, in uA 

        # create objects
        nerve = nrv.nerve(length=nerve_l, diameter=nerve_d, Outer_D=outer_d)
        fascicle_1 = nrv.fascicle(diameter=fasc1_d, ID=1)
        fascicle_2 = nrv.fascicle(diameter=fasc2_d, ID=2)
        nerve.add_fascicle(fascicle=fascicle_1, y=fasc1_y, z=fasc1_z)
        nerve.add_fascicle(fascicle=fascicle_2, y=fasc2_y, z=fasc2_z)

        # create axon population
        n_ax = 100      #size of the axon population
        fascicle_1.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat="Ochoa_M", U_stat="Ochoa_U", delta=5)

        fascicle_2.fill(n_ax=n_ax, percent_unmyel=0.7, M_stat="Ochoa_M", U_stat="Ochoa_U", delta=5)

        ## add electrode and stimulation
        # electrode
        extra_stim = nrv.FEM_stimulation(endo_mat="endoneurium_ranck",peri_mat="perineurium", epi_mat="epineurium", ext_mat="saline")
        life_d = 25                                 # LIFE diamter in um
        life_length = 1000                          # LIFE active-site length in um
        life_x_offset = (nerve_l-life_length)/2     # x position of the LIFE (centered)
        life_y_c_2 = fasc2_y                        # LIFE_2 y-coordinate (in um)
        life_z_c_2 = fasc2_z                        # LIFE_1 z-coordinate (in um)
        elec_2 = nrv.LIFE_electrode("LIFE_2", life_d, life_length, life_x_offset, life_y_c_2, life_z_c_2) # LIFE in the fascicle 2
        # stimulus
        pulse_stim = nrv.stimulus()
        pulse_stim.pulse(t_start, -amp_pulse, t_pulse)      #cathodic
        #Attach electrodes to the extra_stim object 
        extra_stim.add_electrode(elec_2, pulse_stim)
        nerve.attach_extracellular_stimulation(extra_stim)
        fig, ax = plt.subplots(1, 1, figsize=(6,6))
        nerve.plot(ax)
        ax.set_xlabel("z-axis (µm)")
        ax.set_ylabel("y-axis (µm)")
        plt.close(fig)
        return nerve









.. GENERATED FROM PYTHON SOURCE LINES 73-78

Step 2: Simulate the Nerve
^^^^^^^^^^^^^^^^^^^^^^^^^^

This is computationally intensive,
so we can use multiple processes

.. GENERATED FROM PYTHON SOURCE LINES 78-86

.. code-block:: Python



    def simulate_nerve(nerve, nproc=4):
        nrv.parameters.set_nmod_ncore(nproc)
        results = nerve(t_sim=3,postproc_script="is_recruited")
        return results









.. GENERATED FROM PYTHON SOURCE LINES 87-91

Step 3: Post-process Results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This is not compultationally intensive,
so we can use only on processes

.. GENERATED FROM PYTHON SOURCE LINES 91-99

.. code-block:: Python


    def prostprocessing(results):
        fig, ax = plt.subplots(1, 1, figsize=(6,6))
        results.plot_recruited_fibers(ax)
        ax.set_xlabel("z-axis (µm)")
        ax.set_ylabel("y-axis (µm)")









.. GENERATED FROM PYTHON SOURCE LINES 100-102

Main Execution Script
^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 102-107

.. code-block:: Python


    if __name__ == "__main__":

        sim_nerve = create_nerve()
        results = simulate_nerve(sim_nerve, nproc=4)
        prostprocessing(results)


.. image-sg:: /examples/generic/images/sphx_glr_24_mp_nerve_sim_001.png
   :alt: 24 mp nerve sim
   :srcset: /examples/generic/images/sphx_glr_24_mp_nerve_sim_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: On 100 axons to generate, there are 30 Myelinated and 70 Unmyelinated
    Placing... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
    NRV INFO: On 100 axons to generate, there are 30 Myelinated and 70 Unmyelinated
    Placing... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
    NRV INFO: 45axons not placed
    NRV INFO: Starting nerve simulation
    NRV INFO: ...computing electrodes footprint
    NRV INFO: Mesh properties:
    NRV INFO: Number of processes : 3
    NRV INFO: Number of entities : 175
    NRV INFO: Number of nodes : 10775
    NRV INFO: Number of elements : 75807
    NRV INFO: Static/Quasi-Static electrical current problem
    NRV INFO: FEN4NRV: setup the bilinear form
    NRV INFO: FEN4NRV: setup the linear form
    NRV INFO: Static/Quasi-Static electrical current problem
    NRV INFO: FEN4NRV: solving electrical potential
    NRV INFO: FEN4NRV: solved in 7.648335933685303 s
    fascicle 1/2 -- 4 CPUs: 100 / 100 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 0:00:07
    fascicle 2/2 -- 4 CPUs: 49 / 49 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 0:00:05
    NRV INFO: ...Done!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.277 seconds)


.. _sphx_glr_download_examples_generic_24_mp_nerve_sim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 24_mp_nerve_sim.ipynb <24_mp_nerve_sim.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 24_mp_nerve_sim.py <24_mp_nerve_sim.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 24_mp_nerve_sim.zip <24_mp_nerve_sim.zip>`
