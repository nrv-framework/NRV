
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generic/20_create_population.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generic_20_create_population.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generic_20_create_population.py:


Create an unplaced population
=============================

Simple example showing how to create builtin 2D shapes with nrv

.. seealso::
    :doc:`Users' guide <../../usersguide/populations>`

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: Python


    from nrv.utils import geom
    from nrv.nmod._axon_population import axon_population

    import matplotlib.pyplot as plt
    import numpy as np
    from pandas import DataFrame









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Generate population from data
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-29

.. code-block:: Python

    n_ax = 10
    # Randomly generate axon types and diameters
    ax_type = np.random.randint(0,2,n_ax)
    ax_diameters = np.random.random(n_ax)*20










.. GENERATED FROM PYTHON SOURCE LINES 30-32

When `data` are store in a tupple
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 32-37

.. code-block:: Python

    pop_tup = axon_population()
    pop_tup.create_population_from_data((ax_type, ax_diameters))
    pop_tup.axon_pop






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: Axon population generated from data


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>types</th>
          <th>diameters</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>9.436264</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>9.609528</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>18.205805</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>16.948614</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>6.459945</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0</td>
          <td>0.952670</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0</td>
          <td>12.597486</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1</td>
          <td>10.603188</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0</td>
          <td>17.558583</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1</td>
          <td>19.508831</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 38-40

When `data` are store in a np.ndarray
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: Python

    data = np.vstack((ax_type, ax_diameters))
    pop_np = axon_population()
    pop_np.create_population_from_data(data)
    pop_np.axon_pop







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: Axon population generated from data


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>types</th>
          <th>diameters</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1.0</td>
          <td>9.436264</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0</td>
          <td>9.609528</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.0</td>
          <td>18.205805</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1.0</td>
          <td>16.948614</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.0</td>
          <td>6.459945</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.0</td>
          <td>0.952670</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.0</td>
          <td>12.597486</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1.0</td>
          <td>10.603188</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.0</td>
          <td>17.558583</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1.0</td>
          <td>19.508831</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-50

When `data` are store in a dict
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 50-57

.. code-block:: Python

    data = {"types":ax_type, "diameters":ax_diameters, "other_key":0}
    pop_dict = axon_population()
    pop_dict.create_population_from_data(data)
    pop_dict.axon_pop







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: Axon population generated from data


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>types</th>
          <th>diameters</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>9.436264</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>9.609528</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>18.205805</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>16.948614</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>6.459945</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0</td>
          <td>0.952670</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0</td>
          <td>12.597486</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1</td>
          <td>10.603188</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0</td>
          <td>17.558583</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1</td>
          <td>19.508831</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-60

When `data` are store in a dataframe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: Python

    data = DataFrame({"types":ax_type, "diameters":ax_diameters, "other_key":np.random.rand(len(ax_type))})
    pop_df = axon_population()
    pop_df.create_population_from_data(data)
    pop_df.axon_pop






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: Axon population generated from data


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>types</th>
          <th>diameters</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>9.436264</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>9.609528</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>18.205805</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>16.948614</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>6.459945</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0</td>
          <td>0.952670</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0</td>
          <td>12.597486</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1</td>
          <td>10.603188</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0</td>
          <td>17.558583</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1</td>
          <td>19.508831</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 67-71

Generate population from data
-----------------------------
Small 20-axons population
^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 71-77

.. code-block:: Python

    n_ax = 20

    pop_stat = axon_population()
    pop_stat.create_population_from_stat(n_ax=n_ax)
    pop_stat.axon_pop





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: On 20 axons to generate, there are 6 Myelinated and 14 Unmyelinated


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>types</th>
          <th>diameters</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.0</td>
          <td>0.745090</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0</td>
          <td>0.692786</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.0</td>
          <td>12.346693</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.0</td>
          <td>2.250301</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.0</td>
          <td>0.617234</td>
        </tr>
        <tr>
          <th>5</th>
          <td>1.0</td>
          <td>8.424850</td>
        </tr>
        <tr>
          <th>6</th>
          <td>1.0</td>
          <td>3.398798</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1.0</td>
          <td>2.713427</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.0</td>
          <td>1.930661</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.0</td>
          <td>1.523848</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.0</td>
          <td>1.733066</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.0</td>
          <td>2.099198</td>
        </tr>
        <tr>
          <th>12</th>
          <td>1.0</td>
          <td>4.579158</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.0</td>
          <td>1.564529</td>
        </tr>
        <tr>
          <th>14</th>
          <td>0.0</td>
          <td>1.146092</td>
        </tr>
        <tr>
          <th>15</th>
          <td>1.0</td>
          <td>2.979960</td>
        </tr>
        <tr>
          <th>16</th>
          <td>0.0</td>
          <td>0.965932</td>
        </tr>
        <tr>
          <th>17</th>
          <td>0.0</td>
          <td>1.279760</td>
        </tr>
        <tr>
          <th>18</th>
          <td>0.0</td>
          <td>1.500601</td>
        </tr>
        <tr>
          <th>19</th>
          <td>0.0</td>
          <td>2.430461</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 78-80

Histograms
^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: Python


    fig, axs = plt.subplots(2, 2,  layout="constrained")
    for _i, n_ax in enumerate([20, 200, 2000, 20000]):
        ax = axs[_i%2, _i//2]
        pop_stat = axon_population()
        pop_stat.create_population_from_stat(n_ax=n_ax)
        pop_stat.hist(axes=ax, unmyel_color=("r",.4), myel_color=("b",.4), bins=50)
        ax.set_title(f"{n_ax} axons population")
        ax.set_xlabel("diameter")
        ax.set_ylabel("axons number")

    plt.show()



.. image-sg:: /examples/generic/images/sphx_glr_20_create_population_001.png
   :alt: 20 axons population, 2000 axons population, 200 axons population, 20000 axons population
   :srcset: /examples/generic/images/sphx_glr_20_create_population_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NRV INFO: On 20 axons to generate, there are 6 Myelinated and 14 Unmyelinated
    NRV INFO: On 200 axons to generate, there are 60 Myelinated and 140 Unmyelinated
    NRV INFO: On 2000 axons to generate, there are 600 Myelinated and 1400 Unmyelinated
    NRV INFO: On 20000 axons to generate, there are 6000 Myelinated and 14000 Unmyelinated





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.417 seconds)


.. _sphx_glr_download_examples_generic_20_create_population.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 20_create_population.ipynb <20_create_population.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 20_create_population.py <20_create_population.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 20_create_population.zip <20_create_population.zip>`
