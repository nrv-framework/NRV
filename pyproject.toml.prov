[build-system]
requires = [
  "setuptools>=60.0", 
  "wheel",
  "setuptools_scm"  # if using version from git tags; remove if not
]
build-backend = "setuptools.build_meta"

[project]
name = "nrv-py"
version = "1.3.0"  # or pull from tags/versions
description = "NeuRon Virtualizer (NRV): A pythonic framework for fast and user-friendly simulations of the Peripheral Nervous System"
readme = "README.md"
license = { file = "Licence.txt", text = "CeCILL" }  # Make sure this matches actual license
authors = [
  { name = "Thomas Couppey", email = "thomas.couppey@example.com" },
  { name = "Louis Regnacq", email = "louis.regnacq@example.com" },
  { name = "Florian Kolbl", email = "florian.kolbl@example.com" },
  { name = "Roland Giraud", email = "roland.giraud@example.com" },
]
homepage = "https://nrv.readthedocs.io"
repository = "https://github.com/nrv-framework/NRV"
documentation = "https://nrv.readthedocs.io/en/latest"
keywords = ["neuron", "nerve", "stimulation", "fem", "neuroscience", "simulation"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "License :: OSI Approved",  # or the correct classifier for CeCILL if listed
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
]

[project.dependencies]
# core dependencies
numpy >=1.23
scipy >=1.9
typing-extensions  # if needed
neuron
# for FEM via FEniCS-X
fenics-dolfinx >=0.9.0
# For mesh generation
python-gmsh
# Parallel computing / MPI
mpich

[project.optional-dependencies]
dev = [
  "pytest >=7.0",
  "pytest-cov",
  "flake8",
  "black",
  "mypy",
  "pre-commit",
  "sphinx",
  "sphinx-rtd-theme",
]
docs = [
  "sphinx",
  "sphinx-rtd-theme",
  "furo",  # optional
]

[tool.setuptools]
# If there are compiled extensions (NEURON mod, etc.), specify them here
# package_dir = { "": "src" }  # if code is in src/
packages = setuptools.find_packages()

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "dirty-tag"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov=nrv --cov-report=term-missing"
testpaths = ["tests"]

[tool.black]
line-length = 88
target-version = ["py311", "py312"]

[tool.flake8]
max-line-length = 88
exclude = ["build", "dist", ".git", "__pycache__"]
# other settings as needed

[tool.mypy]
python_version = 3.12
allow_redefinition = False
disallow_untyped_defs = False
ignore_missing_imports = True

